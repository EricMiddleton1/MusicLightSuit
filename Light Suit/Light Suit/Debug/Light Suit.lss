
Light Suit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000022ac  00002340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800124  00800124  00002364  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000024b5  00000000  00000000  000024c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ee  00000000  00000000  00004979  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000822  00000000  00000000  00005167  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  0000598c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f3  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002d82  00000000  00000000  0000625b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00008fdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  Author: ericm
 */ 

#include "Filter.h"

void CompFilterS(int16_t *val, int16_t newVal, uint16_t strength) {
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
	*val = (*val) * strength / 100 + newVal * (100 - strength) / 100;
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__vector_14>
      3c:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <__vector_15>
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_21>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
}
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <main+0x3d2>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
	...

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	11 e0       	ldi	r17, 0x01	; 1
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	ec ea       	ldi	r30, 0xAC	; 172
      d6:	f2 e2       	ldi	r31, 0x22	; 34
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a4 32       	cpi	r26, 0x24	; 36
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	a4 e2       	ldi	r26, 0x24	; 36
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a6 37       	cpi	r26, 0x76	; 118
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 75 02 	call	0x4ea	; 0x4ea <main>
      f8:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <APA102_InitSegment>:
	uint8_t blues[] = {0, 0, 0, magnitude, magnitude, magnitude};
	
	uint8_t sextant = angle / 43, nextSextant = (sextant + 1) % 6;
	uint32_t remainder = angle % 43, nextRemainder = 43 - remainder;
	
	*r = ((uint16_t)reds[sextant]*nextRemainder + reds[nextSextant]*remainder) / 86;
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
	*g = ((uint16_t)greens[sextant]*nextRemainder + greens[nextSextant]*remainder) / 86;
     104:	df 93       	push	r29
     106:	ec 01       	movw	r28, r24
     108:	16 2f       	mov	r17, r22
     10a:	86 2f       	mov	r24, r22
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	88 0f       	add	r24, r24
     114:	99 1f       	adc	r25, r25
     116:	9b 83       	std	Y+3, r25	; 0x03
     118:	8a 83       	std	Y+2, r24	; 0x02
     11a:	0e 94 2d 10 	call	0x205a	; 0x205a <malloc>
     11e:	99 83       	std	Y+1, r25	; 0x01
     120:	88 83       	st	Y, r24
     122:	1d 82       	std	Y+5, r1	; 0x05
     124:	1c 82       	std	Y+4, r1	; 0x04
     126:	11 23       	and	r17, r17
     128:	e9 f0       	breq	.+58     	; 0x164 <APA102_InitSegment+0x64>
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	9f ef       	ldi	r25, 0xFF	; 255
     132:	e8 81       	ld	r30, Y
     134:	f9 81       	ldd	r31, Y+1	; 0x01
     136:	e2 0f       	add	r30, r18
     138:	f3 1f       	adc	r31, r19
     13a:	90 83       	st	Z, r25
     13c:	e8 81       	ld	r30, Y
     13e:	f9 81       	ldd	r31, Y+1	; 0x01
     140:	e2 0f       	add	r30, r18
     142:	f3 1f       	adc	r31, r19
     144:	11 82       	std	Z+1, r1	; 0x01
     146:	e8 81       	ld	r30, Y
     148:	f9 81       	ldd	r31, Y+1	; 0x01
     14a:	e2 0f       	add	r30, r18
     14c:	f3 1f       	adc	r31, r19
     14e:	12 82       	std	Z+2, r1	; 0x02
     150:	e8 81       	ld	r30, Y
     152:	f9 81       	ldd	r31, Y+1	; 0x01
     154:	e2 0f       	add	r30, r18
     156:	f3 1f       	adc	r31, r19
     158:	13 82       	std	Z+3, r1	; 0x03
	*b = ((uint16_t)blues[sextant]*nextRemainder + blues[nextSextant]*remainder) / 86;
     15a:	8f 5f       	subi	r24, 0xFF	; 255
     15c:	2c 5f       	subi	r18, 0xFC	; 252
     15e:	3f 4f       	sbci	r19, 0xFF	; 255
     160:	81 13       	cpse	r24, r17
     162:	e7 cf       	rjmp	.-50     	; 0x132 <APA102_InitSegment+0x32>
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	1f 91       	pop	r17
     16a:	08 95       	ret

0000016c <APA102_InitStrip>:
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	ec 01       	movw	r28, r24
     178:	f6 2e       	mov	r15, r22
     17a:	07 2f       	mov	r16, r23
     17c:	14 2f       	mov	r17, r20
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	8b e2       	ldi	r24, 0x2B	; 43
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 80 00 	call	0x100	; 0x100 <APA102_InitSegment>
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	85 e2       	ldi	r24, 0x25	; 37
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	0e 94 80 00 	call	0x100	; 0x100 <APA102_InitSegment>
     192:	eb e2       	ldi	r30, 0x2B	; 43
     194:	f1 e0       	ldi	r31, 0x01	; 1
     196:	a0 81       	ld	r26, Z
     198:	b1 81       	ldd	r27, Z+1	; 0x01
     19a:	1c 92       	st	X, r1
     19c:	a0 81       	ld	r26, Z
     19e:	b1 81       	ldd	r27, Z+1	; 0x01
     1a0:	11 96       	adiw	r26, 0x01	; 1
     1a2:	1c 92       	st	X, r1
     1a4:	01 90       	ld	r0, Z+
     1a6:	f0 81       	ld	r31, Z
     1a8:	e0 2d       	mov	r30, r0
     1aa:	12 82       	std	Z+2, r1	; 0x02
     1ac:	13 82       	std	Z+3, r1	; 0x03
     1ae:	e5 e2       	ldi	r30, 0x25	; 37
     1b0:	f1 e0       	ldi	r31, 0x01	; 1
     1b2:	a0 81       	ld	r26, Z
     1b4:	b1 81       	ldd	r27, Z+1	; 0x01
     1b6:	8f ef       	ldi	r24, 0xFF	; 255
     1b8:	8c 93       	st	X, r24
     1ba:	a0 81       	ld	r26, Z
     1bc:	b1 81       	ldd	r27, Z+1	; 0x01
     1be:	11 96       	adiw	r26, 0x01	; 1
     1c0:	1c 92       	st	X, r1
     1c2:	01 90       	ld	r0, Z+
     1c4:	f0 81       	ld	r31, Z
     1c6:	e0 2d       	mov	r30, r0
     1c8:	12 82       	std	Z+2, r1	; 0x02
     1ca:	13 82       	std	Z+3, r1	; 0x03
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	81 0f       	add	r24, r17
     1d0:	8a 83       	std	Y+2, r24	; 0x02
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	88 0f       	add	r24, r24
	end.data[2] = 0x00;
	end.data[3] = 0x00;
	
	strip->count = count + 2;
	
	strip->segments = (APA102_Segment**)malloc(strip->count * sizeof(APA102_Segment*));
     1d6:	99 1f       	adc	r25, r25
     1d8:	0e 94 2d 10 	call	0x205a	; 0x205a <malloc>
     1dc:	99 83       	std	Y+1, r25	; 0x01
     1de:	88 83       	st	Y, r24
	
	for(i = 0; i < count; i++) {
     1e0:	11 23       	and	r17, r17
     1e2:	91 f0       	breq	.+36     	; 0x208 <APA102_InitStrip+0x9c>
     1e4:	ef 2d       	mov	r30, r15
     1e6:	f0 2f       	mov	r31, r16
     1e8:	22 e0       	ldi	r18, 0x02	; 2
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	80 e0       	ldi	r24, 0x00	; 0
		strip->segments[i+1] = segments[i];
     1ee:	61 91       	ld	r22, Z+
     1f0:	71 91       	ld	r23, Z+
     1f2:	a8 81       	ld	r26, Y
     1f4:	b9 81       	ldd	r27, Y+1	; 0x01
     1f6:	a2 0f       	add	r26, r18
     1f8:	b3 1f       	adc	r27, r19
     1fa:	6d 93       	st	X+, r22
     1fc:	7c 93       	st	X, r23
	
	strip->count = count + 2;
	
	strip->segments = (APA102_Segment**)malloc(strip->count * sizeof(APA102_Segment*));
	
	for(i = 0; i < count; i++) {
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	2e 5f       	subi	r18, 0xFE	; 254
     202:	3f 4f       	sbci	r19, 0xFF	; 255
     204:	81 13       	cpse	r24, r17
     206:	f3 cf       	rjmp	.-26     	; 0x1ee <APA102_InitStrip+0x82>
		strip->segments[i+1] = segments[i];
	}
	
	strip->segments[0] = &start;
     208:	e8 81       	ld	r30, Y
     20a:	f9 81       	ldd	r31, Y+1	; 0x01
     20c:	8b e2       	ldi	r24, 0x2B	; 43
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	91 83       	std	Z+1, r25	; 0x01
     212:	80 83       	st	Z, r24
	strip->segments[strip->count - 1] = &end;
     214:	ea 81       	ldd	r30, Y+2	; 0x02
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	e1 50       	subi	r30, 0x01	; 1
     21a:	f0 48       	sbci	r31, 0x80	; 128
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	88 81       	ld	r24, Y
     222:	99 81       	ldd	r25, Y+1	; 0x01
     224:	e8 0f       	add	r30, r24
     226:	f9 1f       	adc	r31, r25
     228:	85 e2       	ldi	r24, 0x25	; 37
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	91 83       	std	Z+1, r25	; 0x01
     22e:	80 83       	st	Z, r24
	
	SPI_Init();
     230:	0e 94 40 0b 	call	0x1680	; 0x1680 <SPI_Init>
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	ff 90       	pop	r15
     23e:	08 95       	ret

00000240 <APA102_SetPixel>:
		segment->data[4*i+2] = 0x00;
		segment->data[4*i+3] = 0x00;
	}
}

void APA102_SetPixel(APA102_Segment *segment, uint16_t id, uint8_t r, uint8_t g, uint8_t b) {
     240:	0f 93       	push	r16
     242:	fc 01       	movw	r30, r24
	uint16_t actualID = id*4 + segment->start;
     244:	66 0f       	add	r22, r22
     246:	77 1f       	adc	r23, r23
     248:	66 0f       	add	r22, r22
     24a:	77 1f       	adc	r23, r23
     24c:	84 81       	ldd	r24, Z+4	; 0x04
     24e:	95 81       	ldd	r25, Z+5	; 0x05
     250:	68 0f       	add	r22, r24
     252:	79 1f       	adc	r23, r25
	
	if(actualID > segment->size)
     254:	82 81       	ldd	r24, Z+2	; 0x02
     256:	93 81       	ldd	r25, Z+3	; 0x03
     258:	86 17       	cp	r24, r22
     25a:	97 07       	cpc	r25, r23
     25c:	10 f4       	brcc	.+4      	; 0x262 <APA102_SetPixel+0x22>
		actualID -= segment->size;
     25e:	68 1b       	sub	r22, r24
     260:	79 0b       	sbc	r23, r25
	
	(segment->data)[actualID + 1] = b;
     262:	a0 81       	ld	r26, Z
     264:	b1 81       	ldd	r27, Z+1	; 0x01
     266:	a6 0f       	add	r26, r22
     268:	b7 1f       	adc	r27, r23
     26a:	11 96       	adiw	r26, 0x01	; 1
     26c:	0c 93       	st	X, r16
	(segment->data)[actualID + 2] = g;
     26e:	a0 81       	ld	r26, Z
     270:	b1 81       	ldd	r27, Z+1	; 0x01
     272:	a6 0f       	add	r26, r22
     274:	b7 1f       	adc	r27, r23
     276:	12 96       	adiw	r26, 0x02	; 2
     278:	2c 93       	st	X, r18
	(segment->data)[actualID + 3] = r;
     27a:	80 81       	ld	r24, Z
     27c:	91 81       	ldd	r25, Z+1	; 0x01
     27e:	fc 01       	movw	r30, r24
     280:	e6 0f       	add	r30, r22
     282:	f7 1f       	adc	r31, r23
     284:	43 83       	std	Z+3, r20	; 0x03
}
     286:	0f 91       	pop	r16
     288:	08 95       	ret

0000028a <APA102_SetAll>:

void APA102_SetAll(APA102_Segment *segment, uint8_t r, uint8_t g, uint8_t b) {
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	dc 01       	movw	r26, r24
	uint8_t i, count = segment->size / 4;
     290:	12 96       	adiw	r26, 0x02	; 2
     292:	8d 91       	ld	r24, X+
     294:	9c 91       	ld	r25, X
     296:	13 97       	sbiw	r26, 0x03	; 3
     298:	96 95       	lsr	r25
     29a:	87 95       	ror	r24
     29c:	96 95       	lsr	r25
     29e:	87 95       	ror	r24
	
	for(i = 0; i < count; i++) {
     2a0:	88 23       	and	r24, r24
     2a2:	c9 f0       	breq	.+50     	; 0x2d6 <APA102_SetAll+0x4c>
     2a4:	e1 e0       	ldi	r30, 0x01	; 1
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
		segment->data[4*i + 1] = b;
     2aa:	cd 91       	ld	r28, X+
     2ac:	dc 91       	ld	r29, X
     2ae:	11 97       	sbiw	r26, 0x01	; 1
     2b0:	ce 0f       	add	r28, r30
     2b2:	df 1f       	adc	r29, r31
     2b4:	28 83       	st	Y, r18
		segment->data[4*i + 2] = g;
     2b6:	cd 91       	ld	r28, X+
     2b8:	dc 91       	ld	r29, X
     2ba:	11 97       	sbiw	r26, 0x01	; 1
     2bc:	ce 0f       	add	r28, r30
     2be:	df 1f       	adc	r29, r31
     2c0:	49 83       	std	Y+1, r20	; 0x01
		segment->data[4*i + 3] = r;
     2c2:	cd 91       	ld	r28, X+
     2c4:	dc 91       	ld	r29, X
     2c6:	11 97       	sbiw	r26, 0x01	; 1
     2c8:	ce 0f       	add	r28, r30
     2ca:	df 1f       	adc	r29, r31
     2cc:	6a 83       	std	Y+2, r22	; 0x02
}

void APA102_SetAll(APA102_Segment *segment, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, count = segment->size / 4;
	
	for(i = 0; i < count; i++) {
     2ce:	9f 5f       	subi	r25, 0xFF	; 255
     2d0:	34 96       	adiw	r30, 0x04	; 4
     2d2:	98 17       	cp	r25, r24
     2d4:	50 f3       	brcs	.-44     	; 0x2aa <APA102_SetAll+0x20>
		segment->data[4*i + 1] = b;
		segment->data[4*i + 2] = g;
		segment->data[4*i + 3] = r;
	}
}
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <APA102_Increment>:

void APA102_Increment(APA102_Segment *segment, uint8_t shiftAmount) {
     2dc:	fc 01       	movw	r30, r24
	segment->start += shiftAmount*4;
     2de:	84 81       	ldd	r24, Z+4	; 0x04
     2e0:	95 81       	ldd	r25, Z+5	; 0x05
     2e2:	24 e0       	ldi	r18, 0x04	; 4
     2e4:	62 9f       	mul	r22, r18
     2e6:	80 0d       	add	r24, r0
     2e8:	91 1d       	adc	r25, r1
     2ea:	11 24       	eor	r1, r1
     2ec:	95 83       	std	Z+5, r25	; 0x05
     2ee:	84 83       	std	Z+4, r24	; 0x04
	
	if(segment->start >= segment->size)
     2f0:	22 81       	ldd	r18, Z+2	; 0x02
     2f2:	33 81       	ldd	r19, Z+3	; 0x03
     2f4:	82 17       	cp	r24, r18
     2f6:	93 07       	cpc	r25, r19
     2f8:	20 f0       	brcs	.+8      	; 0x302 <APA102_Increment+0x26>
		segment->start -= segment->size;
     2fa:	82 1b       	sub	r24, r18
     2fc:	93 0b       	sbc	r25, r19
     2fe:	95 83       	std	Z+5, r25	; 0x05
     300:	84 83       	std	Z+4, r24	; 0x04
     302:	08 95       	ret

00000304 <APA102_Decrement>:
}

void APA102_Decrement(APA102_Segment *segment, uint8_t shiftAmount) {
	APA102_Increment(segment, segment->size/4 - shiftAmount);
     304:	fc 01       	movw	r30, r24
     306:	22 81       	ldd	r18, Z+2	; 0x02
     308:	33 81       	ldd	r19, Z+3	; 0x03
     30a:	36 95       	lsr	r19
     30c:	27 95       	ror	r18
     30e:	36 95       	lsr	r19
     310:	27 95       	ror	r18
     312:	f2 2f       	mov	r31, r18
     314:	f6 1b       	sub	r31, r22
     316:	6f 2f       	mov	r22, r31
     318:	0e 94 6e 01 	call	0x2dc	; 0x2dc <APA102_Increment>
     31c:	08 95       	ret

0000031e <APA102_Send>:
}

void APA102_Send(APA102_Strip *strip) {
	SPI_SendSewingMachineCirc(strip->segments, strip->count);
     31e:	fc 01       	movw	r30, r24
     320:	62 81       	ldd	r22, Z+2	; 0x02
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_SendSewingMachineCirc>
     32a:	08 95       	ret

0000032c <DrawLetter>:
 *  Author: ericm
 */ 

#include "Light Suit.h"

void DrawLetter(uint16_t *letter, APA102_Segment *levels, uint8_t r, uint8_t g, uint8_t b) {
     32c:	2f 92       	push	r2
     32e:	3f 92       	push	r3
     330:	4f 92       	push	r4
     332:	5f 92       	push	r5
     334:	6f 92       	push	r6
     336:	7f 92       	push	r7
     338:	8f 92       	push	r8
     33a:	9f 92       	push	r9
     33c:	af 92       	push	r10
     33e:	bf 92       	push	r11
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	2c 97       	sbiw	r28, 0x0c	; 12
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	6c 01       	movw	r12, r24
     362:	7a 83       	std	Y+2, r23	; 0x02
     364:	69 83       	std	Y+1, r22	; 0x01
     366:	54 2e       	mov	r5, r20
     368:	62 2e       	mov	r6, r18
     36a:	70 2e       	mov	r7, r16
     36c:	e1 2c       	mov	r14, r1
     36e:	f1 2c       	mov	r15, r1
	
	for(i = 0; i < 16; i++) {
		uint16_t mask = (1 << i);
		uint8_t temp;
		
		temp = !!(letter[0] & mask);
     370:	11 e0       	ldi	r17, 0x01	; 1
     372:	41 2c       	mov	r4, r1
     374:	0f 2e       	mov	r0, r31
     376:	f3 e1       	ldi	r31, 0x13	; 19
     378:	8f 2e       	mov	r8, r31
     37a:	91 2c       	mov	r9, r1
     37c:	f0 2d       	mov	r31, r0
		APA102_SetPixel(&(levels[0]), 19 - i, r*temp, g*temp, b*temp);
		
		temp = !!(letter[1] & mask);
		APA102_SetPixel(&(levels[1]), i, r*temp, g*temp, b*temp);
     37e:	cb 01       	movw	r24, r22
     380:	06 96       	adiw	r24, 0x06	; 6
     382:	9c 83       	std	Y+4, r25	; 0x04
     384:	8b 83       	std	Y+3, r24	; 0x03
		
		temp = !!(letter[2] & mask);
		APA102_SetPixel(&(levels[2]), 19 - i, r*temp, g*temp, b*temp);
     386:	fb 01       	movw	r30, r22
     388:	3c 96       	adiw	r30, 0x0c	; 12
     38a:	fe 83       	std	Y+6, r31	; 0x06
     38c:	ed 83       	std	Y+5, r30	; 0x05
		
		temp = !!(letter[3] & mask);
		APA102_SetPixel(&(levels[3]), i, r*temp, g*temp, b*temp);
     38e:	0c 96       	adiw	r24, 0x0c	; 12
     390:	98 87       	std	Y+8, r25	; 0x08
     392:	8f 83       	std	Y+7, r24	; 0x07
		
		temp = !!(letter[4] & mask);
		APA102_SetPixel(&(levels[4]), 19 - i, r*temp, g*temp, b*temp);
     394:	3c 96       	adiw	r30, 0x0c	; 12
     396:	fa 87       	std	Y+10, r31	; 0x0a
     398:	e9 87       	std	Y+9, r30	; 0x09
     39a:	fc 86       	std	Y+12, r15	; 0x0c
     39c:	eb 86       	std	Y+11, r14	; 0x0b

void DrawLetter(uint16_t *letter, APA102_Segment *levels, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i;
	
	for(i = 0; i < 16; i++) {
		uint16_t mask = (1 << i);
     39e:	ee 24       	eor	r14, r14
     3a0:	e3 94       	inc	r14
     3a2:	f1 2c       	mov	r15, r1
     3a4:	0b 84       	ldd	r0, Y+11	; 0x0b
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DrawLetter+0x80>
     3a8:	ee 0c       	add	r14, r14
     3aa:	ff 1c       	adc	r15, r15
     3ac:	0a 94       	dec	r0
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DrawLetter+0x7c>
		uint8_t temp;
		
		temp = !!(letter[0] & mask);
     3b0:	f6 01       	movw	r30, r12
     3b2:	80 81       	ld	r24, Z
     3b4:	91 81       	ldd	r25, Z+1	; 0x01
     3b6:	8e 21       	and	r24, r14
     3b8:	9f 21       	and	r25, r15
     3ba:	41 2f       	mov	r20, r17
     3bc:	89 2b       	or	r24, r25
     3be:	09 f4       	brne	.+2      	; 0x3c2 <DrawLetter+0x96>
     3c0:	44 2d       	mov	r20, r4
     3c2:	54 01       	movw	r10, r8
     3c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     3c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     3c8:	a8 1a       	sub	r10, r24
     3ca:	b9 0a       	sbc	r11, r25
		APA102_SetPixel(&(levels[0]), 19 - i, r*temp, g*temp, b*temp);
     3cc:	47 9d       	mul	r20, r7
     3ce:	00 2d       	mov	r16, r0
     3d0:	11 24       	eor	r1, r1
     3d2:	46 9d       	mul	r20, r6
     3d4:	20 2d       	mov	r18, r0
     3d6:	11 24       	eor	r1, r1
     3d8:	45 9d       	mul	r20, r5
     3da:	40 2d       	mov	r20, r0
     3dc:	11 24       	eor	r1, r1
     3de:	b5 01       	movw	r22, r10
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
		
		temp = !!(letter[1] & mask);
     3e8:	f6 01       	movw	r30, r12
     3ea:	82 81       	ldd	r24, Z+2	; 0x02
     3ec:	93 81       	ldd	r25, Z+3	; 0x03
     3ee:	8e 21       	and	r24, r14
     3f0:	9f 21       	and	r25, r15
     3f2:	41 2f       	mov	r20, r17
     3f4:	89 2b       	or	r24, r25
     3f6:	09 f4       	brne	.+2      	; 0x3fa <DrawLetter+0xce>
     3f8:	44 2d       	mov	r20, r4
		APA102_SetPixel(&(levels[1]), i, r*temp, g*temp, b*temp);
     3fa:	2b 84       	ldd	r2, Y+11	; 0x0b
     3fc:	3c 84       	ldd	r3, Y+12	; 0x0c
     3fe:	47 9d       	mul	r20, r7
     400:	00 2d       	mov	r16, r0
     402:	11 24       	eor	r1, r1
     404:	46 9d       	mul	r20, r6
     406:	20 2d       	mov	r18, r0
     408:	11 24       	eor	r1, r1
     40a:	45 9d       	mul	r20, r5
     40c:	40 2d       	mov	r20, r0
     40e:	11 24       	eor	r1, r1
     410:	6b 85       	ldd	r22, Y+11	; 0x0b
     412:	7c 85       	ldd	r23, Y+12	; 0x0c
     414:	8b 81       	ldd	r24, Y+3	; 0x03
     416:	9c 81       	ldd	r25, Y+4	; 0x04
     418:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
		
		temp = !!(letter[2] & mask);
     41c:	f6 01       	movw	r30, r12
     41e:	84 81       	ldd	r24, Z+4	; 0x04
     420:	95 81       	ldd	r25, Z+5	; 0x05
     422:	8e 21       	and	r24, r14
     424:	9f 21       	and	r25, r15
     426:	41 2f       	mov	r20, r17
     428:	89 2b       	or	r24, r25
     42a:	09 f4       	brne	.+2      	; 0x42e <DrawLetter+0x102>
     42c:	44 2d       	mov	r20, r4
		APA102_SetPixel(&(levels[2]), 19 - i, r*temp, g*temp, b*temp);
     42e:	47 9d       	mul	r20, r7
     430:	00 2d       	mov	r16, r0
     432:	11 24       	eor	r1, r1
     434:	46 9d       	mul	r20, r6
     436:	20 2d       	mov	r18, r0
     438:	11 24       	eor	r1, r1
     43a:	45 9d       	mul	r20, r5
     43c:	40 2d       	mov	r20, r0
     43e:	11 24       	eor	r1, r1
     440:	b5 01       	movw	r22, r10
     442:	8d 81       	ldd	r24, Y+5	; 0x05
     444:	9e 81       	ldd	r25, Y+6	; 0x06
     446:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
		
		temp = !!(letter[3] & mask);
     44a:	f6 01       	movw	r30, r12
     44c:	86 81       	ldd	r24, Z+6	; 0x06
     44e:	97 81       	ldd	r25, Z+7	; 0x07
     450:	8e 21       	and	r24, r14
     452:	9f 21       	and	r25, r15
     454:	41 2f       	mov	r20, r17
     456:	89 2b       	or	r24, r25
     458:	09 f4       	brne	.+2      	; 0x45c <DrawLetter+0x130>
     45a:	44 2d       	mov	r20, r4
		APA102_SetPixel(&(levels[3]), i, r*temp, g*temp, b*temp);
     45c:	47 9d       	mul	r20, r7
     45e:	00 2d       	mov	r16, r0
     460:	11 24       	eor	r1, r1
     462:	46 9d       	mul	r20, r6
     464:	20 2d       	mov	r18, r0
     466:	11 24       	eor	r1, r1
     468:	45 9d       	mul	r20, r5
     46a:	40 2d       	mov	r20, r0
     46c:	11 24       	eor	r1, r1
     46e:	62 2d       	mov	r22, r2
     470:	73 2d       	mov	r23, r3
     472:	8f 81       	ldd	r24, Y+7	; 0x07
     474:	98 85       	ldd	r25, Y+8	; 0x08
     476:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
		
		temp = !!(letter[4] & mask);
     47a:	f6 01       	movw	r30, r12
     47c:	80 85       	ldd	r24, Z+8	; 0x08
     47e:	91 85       	ldd	r25, Z+9	; 0x09
     480:	e8 22       	and	r14, r24
     482:	f9 22       	and	r15, r25
     484:	41 2f       	mov	r20, r17
     486:	ef 28       	or	r14, r15
     488:	09 f4       	brne	.+2      	; 0x48c <DrawLetter+0x160>
     48a:	44 2d       	mov	r20, r4
		APA102_SetPixel(&(levels[4]), 19 - i, r*temp, g*temp, b*temp);
     48c:	47 9d       	mul	r20, r7
     48e:	00 2d       	mov	r16, r0
     490:	11 24       	eor	r1, r1
     492:	46 9d       	mul	r20, r6
     494:	20 2d       	mov	r18, r0
     496:	11 24       	eor	r1, r1
     498:	45 9d       	mul	r20, r5
     49a:	40 2d       	mov	r20, r0
     49c:	11 24       	eor	r1, r1
     49e:	b5 01       	movw	r22, r10
     4a0:	89 85       	ldd	r24, Y+9	; 0x09
     4a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a4:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
     4a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     4aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	9c 87       	std	Y+12, r25	; 0x0c
     4b0:	8b 87       	std	Y+11, r24	; 0x0b
#include "Light Suit.h"

void DrawLetter(uint16_t *letter, APA102_Segment *levels, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i;
	
	for(i = 0; i < 16; i++) {
     4b2:	40 97       	sbiw	r24, 0x10	; 16
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <DrawLetter+0x18c>
     4b6:	73 cf       	rjmp	.-282    	; 0x39e <DrawLetter+0x72>
		APA102_SetPixel(&(levels[3]), i, r*temp, g*temp, b*temp);
		
		temp = !!(letter[4] & mask);
		APA102_SetPixel(&(levels[4]), 19 - i, r*temp, g*temp, b*temp);
	}
}
     4b8:	2c 96       	adiw	r28, 0x0c	; 12
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	df 90       	pop	r13
     4d2:	cf 90       	pop	r12
     4d4:	bf 90       	pop	r11
     4d6:	af 90       	pop	r10
     4d8:	9f 90       	pop	r9
     4da:	8f 90       	pop	r8
     4dc:	7f 90       	pop	r7
     4de:	6f 90       	pop	r6
     4e0:	5f 90       	pop	r5
     4e2:	4f 90       	pop	r4
     4e4:	3f 90       	pop	r3
     4e6:	2f 90       	pop	r2
     4e8:	08 95       	ret

000004ea <main>:

int main(void)
{
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	ce 59       	subi	r28, 0x9E	; 158
     4f4:	d1 09       	sbc	r29, r1
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
	APA102_Segment spectrum[SPECTRUM_COUNT], leftArm, rightArm, rightLeg, leftLeg;
	APA102_Segment *segments[SEGMENT_COUNT];
	APA102_Strip strip;
	
	uint16_t I_LED[5] = {0x8001L, 0x8001L, 0xFFFFL, 0x8001L, 0x8001L},
     500:	8a e0       	ldi	r24, 0x0A	; 10
     502:	e6 e0       	ldi	r30, 0x06	; 6
     504:	f1 e0       	ldi	r31, 0x01	; 1
     506:	de 01       	movw	r26, r28
     508:	a4 5b       	subi	r26, 0xB4	; 180
     50a:	bf 4f       	sbci	r27, 0xFF	; 255
     50c:	01 90       	ld	r0, Z+
     50e:	0d 92       	st	X+, r0
     510:	8a 95       	dec	r24
     512:	e1 f7       	brne	.-8      	; 0x50c <main+0x22>
			S_LED[5] = {0xFF01, 0x8101, 0x8101, 0x8101, 0x81FF},
     514:	8a e0       	ldi	r24, 0x0A	; 10
     516:	e0 e1       	ldi	r30, 0x10	; 16
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	de 01       	movw	r26, r28
     51c:	aa 5a       	subi	r26, 0xAA	; 170
     51e:	bf 4f       	sbci	r27, 0xFF	; 255
     520:	01 90       	ld	r0, Z+
     522:	0d 92       	st	X+, r0
     524:	8a 95       	dec	r24
     526:	e1 f7       	brne	.-8      	; 0x520 <main+0x36>
			U_LED[5] = {0xFFFF, 0x0001, 0x0001, 0x0001, 0xFFFF};
     528:	8a e0       	ldi	r24, 0x0A	; 10
     52a:	ea e1       	ldi	r30, 0x1A	; 26
     52c:	f1 e0       	ldi	r31, 0x01	; 1
     52e:	de 01       	movw	r26, r28
     530:	a0 5a       	subi	r26, 0xA0	; 160
     532:	bf 4f       	sbci	r27, 0xFF	; 255
     534:	01 90       	ld	r0, Z+
     536:	0d 92       	st	X+, r0
     538:	8a 95       	dec	r24
     53a:	e1 f7       	brne	.-8      	; 0x534 <main+0x4a>
	int i, tick, letterPtr = 0;
	uint16_t levels[5], lastLevel[5];
	int16_t r, g, b;
	uint16_t lastMode = -1;
	
	Util_Init();
     53c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <Util_Init>
	
	DDRD &= ~(0b10000000);
     540:	57 98       	cbi	0x0a, 7	; 10
	DDRB &= ~(0x02 | 0x04);
     542:	84 b1       	in	r24, 0x04	; 4
     544:	89 7f       	andi	r24, 0xF9	; 249
     546:	84 b9       	out	0x04, r24	; 4
	
	PORTD |= 0b10000000;
     548:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB |= 0x02 | 0x04;
     54a:	85 b1       	in	r24, 0x05	; 5
     54c:	86 60       	ori	r24, 0x06	; 6
     54e:	85 b9       	out	0x05, r24	; 5
     550:	8e 01       	movw	r16, r28
     552:	09 5c       	subi	r16, 0xC9	; 201
     554:	1f 4f       	sbci	r17, 0xFF	; 255
     556:	9e 01       	movw	r18, r28
     558:	21 5e       	subi	r18, 0xE1	; 225
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	ac 96       	adiw	r28, 0x2c	; 44
     55e:	3f af       	std	Y+63, r19	; 0x3f
     560:	2e af       	std	Y+62, r18	; 0x3e
     562:	ac 97       	sbiw	r28, 0x2c	; 44
     564:	ae 01       	movw	r20, r28
     566:	4f 5f       	subi	r20, 0xFF	; 255
     568:	5f 4f       	sbci	r21, 0xFF	; 255
     56a:	7a 01       	movw	r14, r20
	
	for(i = 0; i < SPECTRUM_COUNT; i++) {
		APA102_InitSegment(&(spectrum[i]), SPECTRUM_LENGTH);
     56c:	64 e1       	ldi	r22, 0x14	; 20
     56e:	c7 01       	movw	r24, r14
     570:	0e 94 80 00 	call	0x100	; 0x100 <APA102_InitSegment>
		segments[i] = &(spectrum[i]);
     574:	d8 01       	movw	r26, r16
     576:	ed 92       	st	X+, r14
     578:	fd 92       	st	X+, r15
     57a:	8d 01       	movw	r16, r26
     57c:	b6 e0       	ldi	r27, 0x06	; 6
     57e:	eb 0e       	add	r14, r27
     580:	f1 1c       	adc	r15, r1
	DDRB &= ~(0x02 | 0x04);
	
	PORTD |= 0b10000000;
	PORTB |= 0x02 | 0x04;
	
	for(i = 0; i < SPECTRUM_COUNT; i++) {
     582:	ac 96       	adiw	r28, 0x2c	; 44
     584:	ee ad       	ldd	r30, Y+62	; 0x3e
     586:	ff ad       	ldd	r31, Y+63	; 0x3f
     588:	ac 97       	sbiw	r28, 0x2c	; 44
     58a:	ee 16       	cp	r14, r30
     58c:	ff 06       	cpc	r15, r31
     58e:	71 f7       	brne	.-36     	; 0x56c <main+0x82>
		APA102_InitSegment(&(spectrum[i]), SPECTRUM_LENGTH);
		segments[i] = &(spectrum[i]);
	}
	
	APA102_InitSegment(&leftArm, ARM_LENGTH);
     590:	5e 01       	movw	r10, r28
     592:	ff e1       	ldi	r31, 0x1F	; 31
     594:	af 0e       	add	r10, r31
     596:	b1 1c       	adc	r11, r1
     598:	6b e1       	ldi	r22, 0x1B	; 27
     59a:	c5 01       	movw	r24, r10
     59c:	0e 94 80 00 	call	0x100	; 0x100 <APA102_InitSegment>
	APA102_InitSegment(&rightArm, ARM_LENGTH);
     5a0:	6e 01       	movw	r12, r28
     5a2:	25 e2       	ldi	r18, 0x25	; 37
     5a4:	c2 0e       	add	r12, r18
     5a6:	d1 1c       	adc	r13, r1
     5a8:	6b e1       	ldi	r22, 0x1B	; 27
     5aa:	c6 01       	movw	r24, r12
     5ac:	0e 94 80 00 	call	0x100	; 0x100 <APA102_InitSegment>
	APA102_InitSegment(&rightLeg, LEG_LENGTH);
     5b0:	7e 01       	movw	r14, r28
     5b2:	3b e2       	ldi	r19, 0x2B	; 43
     5b4:	e3 0e       	add	r14, r19
     5b6:	f1 1c       	adc	r15, r1
     5b8:	66 e2       	ldi	r22, 0x26	; 38
     5ba:	c7 01       	movw	r24, r14
     5bc:	0e 94 80 00 	call	0x100	; 0x100 <APA102_InitSegment>
	APA102_InitSegment(&leftLeg, LEG_LENGTH);
     5c0:	8e 01       	movw	r16, r28
     5c2:	0f 5c       	subi	r16, 0xCF	; 207
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	66 e2       	ldi	r22, 0x26	; 38
     5c8:	c8 01       	movw	r24, r16
     5ca:	0e 94 80 00 	call	0x100	; 0x100 <APA102_InitSegment>
	
	segments[SPECTRUM_COUNT] = &leftArm;
     5ce:	23 96       	adiw	r28, 0x03	; 3
     5d0:	bf ae       	std	Y+63, r11	; 0x3f
     5d2:	ae ae       	std	Y+62, r10	; 0x3e
     5d4:	23 97       	sbiw	r28, 0x03	; 3
	segments[SPECTRUM_COUNT + 1] = &rightArm;
     5d6:	25 96       	adiw	r28, 0x05	; 5
     5d8:	df ae       	std	Y+63, r13	; 0x3f
     5da:	ce ae       	std	Y+62, r12	; 0x3e
     5dc:	25 97       	sbiw	r28, 0x05	; 5
	segments[SPECTRUM_COUNT + 2] = &rightLeg;
     5de:	27 96       	adiw	r28, 0x07	; 7
     5e0:	ff ae       	std	Y+63, r15	; 0x3f
     5e2:	ee ae       	std	Y+62, r14	; 0x3e
     5e4:	27 97       	sbiw	r28, 0x07	; 7
	segments[SPECTRUM_COUNT + 3] = &leftLeg;
     5e6:	29 96       	adiw	r28, 0x09	; 9
     5e8:	1f af       	std	Y+63, r17	; 0x3f
     5ea:	0e af       	std	Y+62, r16	; 0x3e
     5ec:	29 97       	sbiw	r28, 0x09	; 9
	
	APA102_InitStrip(&strip, segments, SEGMENT_COUNT);
     5ee:	49 e0       	ldi	r20, 0x09	; 9
     5f0:	be 01       	movw	r22, r28
     5f2:	69 5c       	subi	r22, 0xC9	; 201
     5f4:	7f 4f       	sbci	r23, 0xFF	; 255
     5f6:	ce 01       	movw	r24, r28
     5f8:	87 5b       	subi	r24, 0xB7	; 183
     5fa:	9f 4f       	sbci	r25, 0xFF	; 255
     5fc:	0e 94 b6 00 	call	0x16c	; 0x16c <APA102_InitStrip>
			U_LED[5] = {0xFFFF, 0x0001, 0x0001, 0x0001, 0xFFFF};
	
	int i, tick, letterPtr = 0;
	uint16_t levels[5], lastLevel[5];
	int16_t r, g, b;
	uint16_t lastMode = -1;
     600:	4f ef       	ldi	r20, 0xFF	; 255
     602:	5f ef       	ldi	r21, 0xFF	; 255
     604:	cd 56       	subi	r28, 0x6D	; 109
     606:	df 4f       	sbci	r29, 0xFF	; 255
     608:	59 83       	std	Y+1, r21	; 0x01
     60a:	48 83       	st	Y, r20
     60c:	c3 59       	subi	r28, 0x93	; 147
     60e:	d0 40       	sbci	r29, 0x00	; 0
	
	uint16_t I_LED[5] = {0x8001L, 0x8001L, 0xFFFFL, 0x8001L, 0x8001L},
			S_LED[5] = {0xFF01, 0x8101, 0x8101, 0x8101, 0x81FF},
			U_LED[5] = {0xFFFF, 0x0001, 0x0001, 0x0001, 0xFFFF};
	
	int i, tick, letterPtr = 0;
     610:	c9 56       	subi	r28, 0x69	; 105
     612:	df 4f       	sbci	r29, 0xFF	; 255
     614:	19 82       	std	Y+1, r1	; 0x01
     616:	18 82       	st	Y, r1
     618:	c7 59       	subi	r28, 0x97	; 151
     61a:	d0 40       	sbci	r29, 0x00	; 0
	segments[SPECTRUM_COUNT + 2] = &rightLeg;
	segments[SPECTRUM_COUNT + 3] = &leftLeg;
	
	APA102_InitStrip(&strip, segments, SEGMENT_COUNT);
	
	tick = 0;
     61c:	cb 56       	subi	r28, 0x6B	; 107
     61e:	df 4f       	sbci	r29, 0xFF	; 255
     620:	19 82       	std	Y+1, r1	; 0x01
     622:	18 82       	st	Y, r1
     624:	c5 59       	subi	r28, 0x95	; 149
     626:	d0 40       	sbci	r29, 0x00	; 0
inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
}

void inline Filter(int16_t *val, int16_t newVal, uint16_t strength) {
	int32_t temp = (int32_t)(*val) * strength / 100 + (int32_t)newVal * (100 - strength) / 100;
     628:	0f 2e       	mov	r0, r31
     62a:	f4 e6       	ldi	r31, 0x64	; 100
     62c:	4f 2e       	mov	r4, r31
     62e:	51 2c       	mov	r5, r1
     630:	61 2c       	mov	r6, r1
     632:	71 2c       	mov	r7, r1
     634:	f0 2d       	mov	r31, r0
						brightness = 32;
					else
						brightness = 127;
					
					if(letterPtr == 0)
						letter = I_LED;
     636:	ce 01       	movw	r24, r28
     638:	84 5b       	subi	r24, 0xB4	; 180
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	ae 96       	adiw	r28, 0x2e	; 46
     63e:	9f af       	std	Y+63, r25	; 0x3f
     640:	8e af       	std	Y+62, r24	; 0x3e
     642:	ae 97       	sbiw	r28, 0x2e	; 46
					else if(letterPtr == 1)
						letter = S_LED;
     644:	de 01       	movw	r26, r28
     646:	aa 5a       	subi	r26, 0xAA	; 170
     648:	bf 4f       	sbci	r27, 0xFF	; 255
     64a:	e0 96       	adiw	r28, 0x30	; 48
     64c:	bf af       	std	Y+63, r27	; 0x3f
     64e:	ae af       	std	Y+62, r26	; 0x3e
     650:	e0 97       	sbiw	r28, 0x30	; 48
					else if(letterPtr == 2)
						letter = U_LED;
     652:	fe 01       	movw	r30, r28
     654:	e0 5a       	subi	r30, 0xA0	; 160
     656:	ff 4f       	sbci	r31, 0xFF	; 255
     658:	e2 96       	adiw	r28, 0x32	; 50
     65a:	ff af       	std	Y+63, r31	; 0x3f
     65c:	ee af       	std	Y+62, r30	; 0x3e
     65e:	e2 97       	sbiw	r28, 0x32	; 50
     660:	51 01       	movw	r10, r2
     662:	12 c0       	rjmp	.+36     	; 0x688 <main+0x19e>
     664:	e8 96       	adiw	r28, 0x38	; 56
     666:	ae ac       	ldd	r10, Y+62	; 0x3e
     668:	bf ac       	ldd	r11, Y+63	; 0x3f
     66a:	e8 97       	sbiw	r28, 0x38	; 56
     66c:	ea 96       	adiw	r28, 0x3a	; 58
     66e:	8e ac       	ldd	r8, Y+62	; 0x3e
     670:	9f ac       	ldd	r9, Y+63	; 0x3f
     672:	ea 97       	sbiw	r28, 0x3a	; 58
     674:	ec 96       	adiw	r28, 0x3c	; 60
     676:	2e ad       	ldd	r18, Y+62	; 0x3e
     678:	3f ad       	ldd	r19, Y+63	; 0x3f
     67a:	ec 97       	sbiw	r28, 0x3c	; 60
     67c:	cf 56       	subi	r28, 0x6F	; 111
     67e:	df 4f       	sbci	r29, 0xFF	; 255
     680:	39 83       	std	Y+1, r19	; 0x01
     682:	28 83       	st	Y, r18
     684:	c1 59       	subi	r28, 0x91	; 145
     686:	d0 40       	sbci	r29, 0x00	; 0
		//else if(! (PINB & 0x02) )
			//mode = 2;
		//else
			//mode = 0;
		
		mode = ((!(PIND & 0b10000000))) | ((!(PINB & 0x02)) << 1) | ((!(PINB & 0x04)) << 2);
     688:	99 b1       	in	r25, 0x09	; 9
     68a:	90 95       	com	r25
     68c:	99 1f       	adc	r25, r25
     68e:	99 27       	eor	r25, r25
     690:	99 1f       	adc	r25, r25
     692:	19 99       	sbic	0x03, 1	; 3
     694:	02 c0       	rjmp	.+4      	; 0x69a <main+0x1b0>
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	01 c0       	rjmp	.+2      	; 0x69c <main+0x1b2>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	98 2b       	or	r25, r24
     69e:	1a 99       	sbic	0x03, 2	; 3
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <main+0x1bc>
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <main+0x1be>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	98 2b       	or	r25, r24
     6aa:	c6 57       	subi	r28, 0x76	; 118
     6ac:	df 4f       	sbci	r29, 0xFF	; 255
     6ae:	98 83       	st	Y, r25
     6b0:	ca 58       	subi	r28, 0x8A	; 138
     6b2:	d0 40       	sbci	r29, 0x00	; 0
		//levels[1] = min(10*SPECTRUM_LENGTH, LogScale(adc[1]));
		//levels[2] = min(10*SPECTRUM_LENGTH, LogScale(adc[2]));
		//levels[3] = min(10*SPECTRUM_LENGTH, LogScale(adc[3]));
		//levels[4] = min(10*SPECTRUM_LENGTH, LogScale(adc[4]));
		
		raw[0] = min(10*SPECTRUM_LENGTH, LogScale(adc[0]));
     6b4:	60 91 49 01 	lds	r22, 0x0149
     6b8:	70 91 4a 01 	lds	r23, 0x014A
		APA102_SetPixel(segment, last - i, 0, 0, 0);
	}
}

inline uint16_t LogScale(uint16_t val) {
	float temp = (logf(val))*29.f;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__floatunsisf>
     6c4:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <log>
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	48 ee       	ldi	r20, 0xE8	; 232
     6ce:	51 e4       	ldi	r21, 0x41	; 65
     6d0:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__mulsf3>
     6d4:	6b 01       	movw	r12, r22
     6d6:	7c 01       	movw	r14, r24
	
	return (uint16_t) ((temp > 0) ? temp : 0);
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	a9 01       	movw	r20, r18
     6de:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__gesf2>
     6e2:	18 16       	cp	r1, r24
     6e4:	3c f4       	brge	.+14     	; 0x6f4 <main+0x20a>
     6e6:	c7 01       	movw	r24, r14
     6e8:	b6 01       	movw	r22, r12
     6ea:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fixunssfsi>
     6ee:	26 2f       	mov	r18, r22
     6f0:	87 2f       	mov	r24, r23
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <main+0x20e>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	80 e0       	ldi	r24, 0x00	; 0
	
}

inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
     6f8:	e3 96       	adiw	r28, 0x33	; 51
     6fa:	2f af       	std	Y+63, r18	; 0x3f
     6fc:	e3 97       	sbiw	r28, 0x33	; 51
     6fe:	e4 96       	adiw	r28, 0x34	; 52
     700:	8f af       	std	Y+63, r24	; 0x3f
     702:	e4 97       	sbiw	r28, 0x34	; 52
     704:	e4 96       	adiw	r28, 0x34	; 52
     706:	4e ad       	ldd	r20, Y+62	; 0x3e
     708:	5f ad       	ldd	r21, Y+63	; 0x3f
     70a:	e4 97       	sbiw	r28, 0x34	; 52
     70c:	49 3c       	cpi	r20, 0xC9	; 201
     70e:	51 05       	cpc	r21, r1
     710:	34 f0       	brlt	.+12     	; 0x71e <main+0x234>
     712:	88 ec       	ldi	r24, 0xC8	; 200
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	e4 96       	adiw	r28, 0x34	; 52
     718:	9f af       	std	Y+63, r25	; 0x3f
     71a:	8e af       	std	Y+62, r24	; 0x3e
     71c:	e4 97       	sbiw	r28, 0x34	; 52
		//levels[2] = min(10*SPECTRUM_LENGTH, LogScale(adc[2]));
		//levels[3] = min(10*SPECTRUM_LENGTH, LogScale(adc[3]));
		//levels[4] = min(10*SPECTRUM_LENGTH, LogScale(adc[4]));
		
		raw[0] = min(10*SPECTRUM_LENGTH, LogScale(adc[0]));
		levels[0] = max(raw[0], levels[0] - 1);
     71e:	e8 96       	adiw	r28, 0x38	; 56
     720:	8e ad       	ldd	r24, Y+62	; 0x3e
     722:	9f ad       	ldd	r25, Y+63	; 0x3f
     724:	e8 97       	sbiw	r28, 0x38	; 56
     726:	01 97       	sbiw	r24, 0x01	; 1
inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
}

inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
     728:	e3 96       	adiw	r28, 0x33	; 51
     72a:	3f ad       	ldd	r19, Y+63	; 0x3f
     72c:	e3 97       	sbiw	r28, 0x33	; 51
     72e:	e4 96       	adiw	r28, 0x34	; 52
     730:	2f ad       	ldd	r18, Y+63	; 0x3f
     732:	e4 97       	sbiw	r28, 0x34	; 52
     734:	e4 96       	adiw	r28, 0x34	; 52
     736:	ae ad       	ldd	r26, Y+62	; 0x3e
     738:	bf ad       	ldd	r27, Y+63	; 0x3f
     73a:	e4 97       	sbiw	r28, 0x34	; 52
     73c:	a8 17       	cp	r26, r24
     73e:	b9 07       	cpc	r27, r25
     740:	14 f4       	brge	.+4      	; 0x746 <main+0x25c>
     742:	38 2f       	mov	r19, r24
     744:	29 2f       	mov	r18, r25
		//levels[2] = min(10*SPECTRUM_LENGTH, LogScale(adc[2]));
		//levels[3] = min(10*SPECTRUM_LENGTH, LogScale(adc[3]));
		//levels[4] = min(10*SPECTRUM_LENGTH, LogScale(adc[4]));
		
		raw[0] = min(10*SPECTRUM_LENGTH, LogScale(adc[0]));
		levels[0] = max(raw[0], levels[0] - 1);
     746:	e7 96       	adiw	r28, 0x37	; 55
     748:	3f af       	std	Y+63, r19	; 0x3f
     74a:	e7 97       	sbiw	r28, 0x37	; 55
     74c:	e8 96       	adiw	r28, 0x38	; 56
     74e:	2f af       	std	Y+63, r18	; 0x3f
     750:	e8 97       	sbiw	r28, 0x38	; 56
		
		raw[1] = min(10*SPECTRUM_LENGTH, LogScale(adc[1]));
     752:	60 91 4b 01 	lds	r22, 0x014B
     756:	70 91 4c 01 	lds	r23, 0x014C
		APA102_SetPixel(segment, last - i, 0, 0, 0);
	}
}

inline uint16_t LogScale(uint16_t val) {
	float temp = (logf(val))*29.f;
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__floatunsisf>
     762:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <log>
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	48 ee       	ldi	r20, 0xE8	; 232
     76c:	51 e4       	ldi	r21, 0x41	; 65
     76e:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__mulsf3>
     772:	6b 01       	movw	r12, r22
     774:	7c 01       	movw	r14, r24
	
	return (uint16_t) ((temp > 0) ? temp : 0);
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	a9 01       	movw	r20, r18
     77c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__gesf2>
     780:	18 16       	cp	r1, r24
     782:	3c f4       	brge	.+14     	; 0x792 <main+0x2a8>
     784:	c7 01       	movw	r24, r14
     786:	b6 01       	movw	r22, r12
     788:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fixunssfsi>
     78c:	26 2f       	mov	r18, r22
     78e:	87 2f       	mov	r24, r23
     790:	02 c0       	rjmp	.+4      	; 0x796 <main+0x2ac>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	80 e0       	ldi	r24, 0x00	; 0
	
}

inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
     796:	22 2e       	mov	r2, r18
     798:	38 2e       	mov	r3, r24
     79a:	b9 ec       	ldi	r27, 0xC9	; 201
     79c:	2b 16       	cp	r2, r27
     79e:	31 04       	cpc	r3, r1
     7a0:	2c f0       	brlt	.+10     	; 0x7ac <main+0x2c2>
     7a2:	0f 2e       	mov	r0, r31
     7a4:	f8 ec       	ldi	r31, 0xC8	; 200
     7a6:	2f 2e       	mov	r2, r31
     7a8:	31 2c       	mov	r3, r1
     7aa:	f0 2d       	mov	r31, r0
		
		raw[0] = min(10*SPECTRUM_LENGTH, LogScale(adc[0]));
		levels[0] = max(raw[0], levels[0] - 1);
		
		raw[1] = min(10*SPECTRUM_LENGTH, LogScale(adc[1]));
		levels[1] = max(raw[1], levels[1] - 1);
     7ac:	c5 57       	subi	r28, 0x75	; 117
     7ae:	df 4f       	sbci	r29, 0xFF	; 255
     7b0:	88 81       	ld	r24, Y
     7b2:	99 81       	ldd	r25, Y+1	; 0x01
     7b4:	cb 58       	subi	r28, 0x8B	; 139
     7b6:	d0 40       	sbci	r29, 0x00	; 0
     7b8:	01 97       	sbiw	r24, 0x01	; 1
inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
}

inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
     7ba:	32 2d       	mov	r19, r2
     7bc:	23 2d       	mov	r18, r3
     7be:	28 16       	cp	r2, r24
     7c0:	39 06       	cpc	r3, r25
     7c2:	14 f4       	brge	.+4      	; 0x7c8 <main+0x2de>
     7c4:	38 2f       	mov	r19, r24
     7c6:	29 2f       	mov	r18, r25
		
		raw[0] = min(10*SPECTRUM_LENGTH, LogScale(adc[0]));
		levels[0] = max(raw[0], levels[0] - 1);
		
		raw[1] = min(10*SPECTRUM_LENGTH, LogScale(adc[1]));
		levels[1] = max(raw[1], levels[1] - 1);
     7c8:	c5 57       	subi	r28, 0x75	; 117
     7ca:	df 4f       	sbci	r29, 0xFF	; 255
     7cc:	38 83       	st	Y, r19
     7ce:	cb 58       	subi	r28, 0x8B	; 139
     7d0:	d0 40       	sbci	r29, 0x00	; 0
     7d2:	c4 57       	subi	r28, 0x74	; 116
     7d4:	df 4f       	sbci	r29, 0xFF	; 255
     7d6:	28 83       	st	Y, r18
     7d8:	cc 58       	subi	r28, 0x8C	; 140
     7da:	d0 40       	sbci	r29, 0x00	; 0
		
		raw[2] = min(10*SPECTRUM_LENGTH, LogScale(adc[2]));
     7dc:	60 91 4d 01 	lds	r22, 0x014D
     7e0:	70 91 4e 01 	lds	r23, 0x014E
		APA102_SetPixel(segment, last - i, 0, 0, 0);
	}
}

inline uint16_t LogScale(uint16_t val) {
	float temp = (logf(val))*29.f;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__floatunsisf>
     7ec:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <log>
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	48 ee       	ldi	r20, 0xE8	; 232
     7f6:	51 e4       	ldi	r21, 0x41	; 65
     7f8:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__mulsf3>
     7fc:	6b 01       	movw	r12, r22
     7fe:	7c 01       	movw	r14, r24
	
	return (uint16_t) ((temp > 0) ? temp : 0);
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	a9 01       	movw	r20, r18
     806:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__gesf2>
     80a:	18 16       	cp	r1, r24
     80c:	3c f4       	brge	.+14     	; 0x81c <main+0x332>
     80e:	c7 01       	movw	r24, r14
     810:	b6 01       	movw	r22, r12
     812:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fixunssfsi>
     816:	26 2f       	mov	r18, r22
     818:	87 2f       	mov	r24, r23
     81a:	02 c0       	rjmp	.+4      	; 0x820 <main+0x336>
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	80 e0       	ldi	r24, 0x00	; 0
	
}

inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
     820:	e5 96       	adiw	r28, 0x35	; 53
     822:	2f af       	std	Y+63, r18	; 0x3f
     824:	e5 97       	sbiw	r28, 0x35	; 53
     826:	e6 96       	adiw	r28, 0x36	; 54
     828:	8f af       	std	Y+63, r24	; 0x3f
     82a:	e6 97       	sbiw	r28, 0x36	; 54
     82c:	e6 96       	adiw	r28, 0x36	; 54
     82e:	ee ad       	ldd	r30, Y+62	; 0x3e
     830:	ff ad       	ldd	r31, Y+63	; 0x3f
     832:	e6 97       	sbiw	r28, 0x36	; 54
     834:	e9 3c       	cpi	r30, 0xC9	; 201
     836:	f1 05       	cpc	r31, r1
     838:	34 f0       	brlt	.+12     	; 0x846 <main+0x35c>
     83a:	28 ec       	ldi	r18, 0xC8	; 200
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	e6 96       	adiw	r28, 0x36	; 54
     840:	3f af       	std	Y+63, r19	; 0x3f
     842:	2e af       	std	Y+62, r18	; 0x3e
     844:	e6 97       	sbiw	r28, 0x36	; 54
		
		raw[1] = min(10*SPECTRUM_LENGTH, LogScale(adc[1]));
		levels[1] = max(raw[1], levels[1] - 1);
		
		raw[2] = min(10*SPECTRUM_LENGTH, LogScale(adc[2]));
		levels[2] = max(raw[2], levels[2] - 1);
     846:	c3 57       	subi	r28, 0x73	; 115
     848:	df 4f       	sbci	r29, 0xFF	; 255
     84a:	88 81       	ld	r24, Y
     84c:	99 81       	ldd	r25, Y+1	; 0x01
     84e:	cd 58       	subi	r28, 0x8D	; 141
     850:	d0 40       	sbci	r29, 0x00	; 0
     852:	01 97       	sbiw	r24, 0x01	; 1
inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
}

inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
     854:	e5 96       	adiw	r28, 0x35	; 53
     856:	3f ad       	ldd	r19, Y+63	; 0x3f
     858:	e5 97       	sbiw	r28, 0x35	; 53
     85a:	e6 96       	adiw	r28, 0x36	; 54
     85c:	2f ad       	ldd	r18, Y+63	; 0x3f
     85e:	e6 97       	sbiw	r28, 0x36	; 54
     860:	e6 96       	adiw	r28, 0x36	; 54
     862:	4e ad       	ldd	r20, Y+62	; 0x3e
     864:	5f ad       	ldd	r21, Y+63	; 0x3f
     866:	e6 97       	sbiw	r28, 0x36	; 54
     868:	48 17       	cp	r20, r24
     86a:	59 07       	cpc	r21, r25
     86c:	14 f4       	brge	.+4      	; 0x872 <main+0x388>
     86e:	38 2f       	mov	r19, r24
     870:	29 2f       	mov	r18, r25
		
		raw[1] = min(10*SPECTRUM_LENGTH, LogScale(adc[1]));
		levels[1] = max(raw[1], levels[1] - 1);
		
		raw[2] = min(10*SPECTRUM_LENGTH, LogScale(adc[2]));
		levels[2] = max(raw[2], levels[2] - 1);
     872:	c3 57       	subi	r28, 0x73	; 115
     874:	df 4f       	sbci	r29, 0xFF	; 255
     876:	38 83       	st	Y, r19
     878:	cd 58       	subi	r28, 0x8D	; 141
     87a:	d0 40       	sbci	r29, 0x00	; 0
     87c:	c2 57       	subi	r28, 0x72	; 114
     87e:	df 4f       	sbci	r29, 0xFF	; 255
     880:	28 83       	st	Y, r18
     882:	ce 58       	subi	r28, 0x8E	; 142
     884:	d0 40       	sbci	r29, 0x00	; 0
		
		raw[3] = min(10*SPECTRUM_LENGTH, LogScale(adc[3]));
     886:	60 91 4f 01 	lds	r22, 0x014F
     88a:	70 91 50 01 	lds	r23, 0x0150
		APA102_SetPixel(segment, last - i, 0, 0, 0);
	}
}

inline uint16_t LogScale(uint16_t val) {
	float temp = (logf(val))*29.f;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__floatunsisf>
     896:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <log>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	48 ee       	ldi	r20, 0xE8	; 232
     8a0:	51 e4       	ldi	r21, 0x41	; 65
     8a2:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__mulsf3>
     8a6:	6b 01       	movw	r12, r22
     8a8:	7c 01       	movw	r14, r24
	
	return (uint16_t) ((temp > 0) ? temp : 0);
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	a9 01       	movw	r20, r18
     8b0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__gesf2>
     8b4:	18 16       	cp	r1, r24
     8b6:	3c f4       	brge	.+14     	; 0x8c6 <main+0x3dc>
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fixunssfsi>
     8c0:	26 2f       	mov	r18, r22
     8c2:	87 2f       	mov	r24, r23
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <main+0x3e0>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	80 e0       	ldi	r24, 0x00	; 0
	
}

inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
     8ca:	02 2f       	mov	r16, r18
     8cc:	18 2f       	mov	r17, r24
     8ce:	09 3c       	cpi	r16, 0xC9	; 201
     8d0:	11 05       	cpc	r17, r1
     8d2:	14 f0       	brlt	.+4      	; 0x8d8 <main+0x3ee>
     8d4:	08 ec       	ldi	r16, 0xC8	; 200
     8d6:	10 e0       	ldi	r17, 0x00	; 0
		
		raw[2] = min(10*SPECTRUM_LENGTH, LogScale(adc[2]));
		levels[2] = max(raw[2], levels[2] - 1);
		
		raw[3] = min(10*SPECTRUM_LENGTH, LogScale(adc[3]));
		levels[3] = max(raw[3], levels[3] - 1);
     8d8:	ea 96       	adiw	r28, 0x3a	; 58
     8da:	8e ad       	ldd	r24, Y+62	; 0x3e
     8dc:	9f ad       	ldd	r25, Y+63	; 0x3f
     8de:	ea 97       	sbiw	r28, 0x3a	; 58
     8e0:	01 97       	sbiw	r24, 0x01	; 1
inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
}

inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
     8e2:	30 2f       	mov	r19, r16
     8e4:	21 2f       	mov	r18, r17
     8e6:	08 17       	cp	r16, r24
     8e8:	19 07       	cpc	r17, r25
     8ea:	14 f4       	brge	.+4      	; 0x8f0 <main+0x406>
     8ec:	38 2f       	mov	r19, r24
     8ee:	29 2f       	mov	r18, r25
		
		raw[2] = min(10*SPECTRUM_LENGTH, LogScale(adc[2]));
		levels[2] = max(raw[2], levels[2] - 1);
		
		raw[3] = min(10*SPECTRUM_LENGTH, LogScale(adc[3]));
		levels[3] = max(raw[3], levels[3] - 1);
     8f0:	e9 96       	adiw	r28, 0x39	; 57
     8f2:	3f af       	std	Y+63, r19	; 0x3f
     8f4:	e9 97       	sbiw	r28, 0x39	; 57
     8f6:	ea 96       	adiw	r28, 0x3a	; 58
     8f8:	2f af       	std	Y+63, r18	; 0x3f
     8fa:	ea 97       	sbiw	r28, 0x3a	; 58
		
		raw[4] = min(10*SPECTRUM_LENGTH, LogScale(adc[4]));
     8fc:	60 91 51 01 	lds	r22, 0x0151
     900:	70 91 52 01 	lds	r23, 0x0152
		APA102_SetPixel(segment, last - i, 0, 0, 0);
	}
}

inline uint16_t LogScale(uint16_t val) {
	float temp = (logf(val))*29.f;
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__floatunsisf>
     90c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <log>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	48 ee       	ldi	r20, 0xE8	; 232
     916:	51 e4       	ldi	r21, 0x41	; 65
     918:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__mulsf3>
     91c:	6b 01       	movw	r12, r22
     91e:	7c 01       	movw	r14, r24
	
	return (uint16_t) ((temp > 0) ? temp : 0);
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	a9 01       	movw	r20, r18
     926:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__gesf2>
     92a:	18 16       	cp	r1, r24
     92c:	3c f4       	brge	.+14     	; 0x93c <__stack+0x3d>
     92e:	c7 01       	movw	r24, r14
     930:	b6 01       	movw	r22, r12
     932:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fixunssfsi>
     936:	26 2f       	mov	r18, r22
     938:	87 2f       	mov	r24, r23
     93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0x41>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
	
}

inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
     940:	c2 2e       	mov	r12, r18
     942:	d8 2e       	mov	r13, r24
     944:	59 ec       	ldi	r21, 0xC9	; 201
     946:	c5 16       	cp	r12, r21
     948:	d1 04       	cpc	r13, r1
     94a:	2c f0       	brlt	.+10     	; 0x956 <__stack+0x57>
     94c:	0f 2e       	mov	r0, r31
     94e:	f8 ec       	ldi	r31, 0xC8	; 200
     950:	cf 2e       	mov	r12, r31
     952:	d1 2c       	mov	r13, r1
     954:	f0 2d       	mov	r31, r0
		
		raw[3] = min(10*SPECTRUM_LENGTH, LogScale(adc[3]));
		levels[3] = max(raw[3], levels[3] - 1);
		
		raw[4] = min(10*SPECTRUM_LENGTH, LogScale(adc[4]));
		levels[4] = max(raw[4], levels[4] - 1);
     956:	ec 96       	adiw	r28, 0x3c	; 60
     958:	8e ad       	ldd	r24, Y+62	; 0x3e
     95a:	9f ad       	ldd	r25, Y+63	; 0x3f
     95c:	ec 97       	sbiw	r28, 0x3c	; 60
     95e:	01 97       	sbiw	r24, 0x01	; 1
inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
}

inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
     960:	3c 2d       	mov	r19, r12
     962:	2d 2d       	mov	r18, r13
     964:	c8 16       	cp	r12, r24
     966:	d9 06       	cpc	r13, r25
     968:	14 f4       	brge	.+4      	; 0x96e <__stack+0x6f>
     96a:	38 2f       	mov	r19, r24
     96c:	29 2f       	mov	r18, r25
		
		raw[3] = min(10*SPECTRUM_LENGTH, LogScale(adc[3]));
		levels[3] = max(raw[3], levels[3] - 1);
		
		raw[4] = min(10*SPECTRUM_LENGTH, LogScale(adc[4]));
		levels[4] = max(raw[4], levels[4] - 1);
     96e:	eb 96       	adiw	r28, 0x3b	; 59
     970:	3f af       	std	Y+63, r19	; 0x3f
     972:	eb 97       	sbiw	r28, 0x3b	; 59
     974:	ec 96       	adiw	r28, 0x3c	; 60
     976:	2f af       	std	Y+63, r18	; 0x3f
     978:	ec 97       	sbiw	r28, 0x3c	; 60
		
		temp = levels[2] - lastLevel[2];
		dLevels[2] = max(temp, dLevels[2] - 10);
		
		temp = levels[3] - lastLevel[3];
		dLevels[3] = max(temp, dLevels[3] - 10);
     97a:	c0 58       	subi	r28, 0x80	; 128
     97c:	df 4f       	sbci	r29, 0xFF	; 255
     97e:	28 81       	ld	r18, Y
     980:	39 81       	ldd	r19, Y+1	; 0x01
     982:	c0 58       	subi	r28, 0x80	; 128
     984:	d0 40       	sbci	r29, 0x00	; 0
     986:	2a 50       	subi	r18, 0x0A	; 10
     988:	31 09       	sbc	r19, r1
		
		temp = levels[4] - lastLevel[4];
		dLevels[4] = max(temp, dLevels[4] - 10);
     98a:	c2 58       	subi	r28, 0x82	; 130
     98c:	df 4f       	sbci	r29, 0xFF	; 255
     98e:	88 81       	ld	r24, Y
     990:	99 81       	ldd	r25, Y+1	; 0x01
     992:	ce 57       	subi	r28, 0x7E	; 126
     994:	d0 40       	sbci	r29, 0x00	; 0
     996:	0a 97       	sbiw	r24, 0x0a	; 10
inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
}

inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
     998:	ee 96       	adiw	r28, 0x3e	; 62
     99a:	4e ad       	ldd	r20, Y+62	; 0x3e
     99c:	5f ad       	ldd	r21, Y+63	; 0x3f
     99e:	ee 97       	sbiw	r28, 0x3e	; 62
     9a0:	45 50       	subi	r20, 0x05	; 5
     9a2:	51 09       	sbc	r21, r1
     9a4:	55 23       	and	r21, r21
     9a6:	14 f4       	brge	.+4      	; 0x9ac <__stack+0xad>
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	50 e0       	ldi	r21, 0x00	; 0
		levels[3] = max(raw[3], levels[3] - 1);
		
		raw[4] = min(10*SPECTRUM_LENGTH, LogScale(adc[4]));
		levels[4] = max(raw[4], levels[4] - 1);
		
		temp = levels[0] - lastLevel[0];
     9ac:	e8 96       	adiw	r28, 0x38	; 56
     9ae:	6e ad       	ldd	r22, Y+62	; 0x3e
     9b0:	7f ad       	ldd	r23, Y+63	; 0x3f
     9b2:	e8 97       	sbiw	r28, 0x38	; 56
     9b4:	6a 19       	sub	r22, r10
     9b6:	7b 09       	sbc	r23, r11
     9b8:	ee 96       	adiw	r28, 0x3e	; 62
     9ba:	5f af       	std	Y+63, r21	; 0x3f
     9bc:	4e af       	std	Y+62, r20	; 0x3e
     9be:	ee 97       	sbiw	r28, 0x3e	; 62
     9c0:	46 17       	cp	r20, r22
     9c2:	57 07       	cpc	r21, r23
     9c4:	24 f4       	brge	.+8      	; 0x9ce <__stack+0xcf>
     9c6:	ee 96       	adiw	r28, 0x3e	; 62
     9c8:	7f af       	std	Y+63, r23	; 0x3f
     9ca:	6e af       	std	Y+62, r22	; 0x3e
     9cc:	ee 97       	sbiw	r28, 0x3e	; 62
inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
}

inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
     9ce:	33 23       	and	r19, r19
     9d0:	14 f4       	brge	.+4      	; 0x9d6 <__stack+0xd7>
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
		dLevels[1] = max(temp, dLevels[1] - 10);
		
		temp = levels[2] - lastLevel[2];
		dLevels[2] = max(temp, dLevels[2] - 10);
		
		temp = levels[3] - lastLevel[3];
     9d6:	ea 96       	adiw	r28, 0x3a	; 58
     9d8:	4e ad       	ldd	r20, Y+62	; 0x3e
     9da:	5f ad       	ldd	r21, Y+63	; 0x3f
     9dc:	ea 97       	sbiw	r28, 0x3a	; 58
     9de:	48 19       	sub	r20, r8
     9e0:	59 09       	sbc	r21, r9
     9e2:	c0 58       	subi	r28, 0x80	; 128
     9e4:	df 4f       	sbci	r29, 0xFF	; 255
     9e6:	39 83       	std	Y+1, r19	; 0x01
     9e8:	28 83       	st	Y, r18
     9ea:	c0 58       	subi	r28, 0x80	; 128
     9ec:	d0 40       	sbci	r29, 0x00	; 0
     9ee:	24 17       	cp	r18, r20
     9f0:	35 07       	cpc	r19, r21
     9f2:	34 f4       	brge	.+12     	; 0xa00 <__stack+0x101>
     9f4:	c0 58       	subi	r28, 0x80	; 128
     9f6:	df 4f       	sbci	r29, 0xFF	; 255
     9f8:	59 83       	std	Y+1, r21	; 0x01
     9fa:	48 83       	st	Y, r20
     9fc:	c0 58       	subi	r28, 0x80	; 128
     9fe:	d0 40       	sbci	r29, 0x00	; 0
inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
}

inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
     a00:	99 23       	and	r25, r25
     a02:	14 f4       	brge	.+4      	; 0xa08 <__stack+0x109>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
		dLevels[2] = max(temp, dLevels[2] - 10);
		
		temp = levels[3] - lastLevel[3];
		dLevels[3] = max(temp, dLevels[3] - 10);
		
		temp = levels[4] - lastLevel[4];
     a08:	ec 96       	adiw	r28, 0x3c	; 60
     a0a:	2e ad       	ldd	r18, Y+62	; 0x3e
     a0c:	3f ad       	ldd	r19, Y+63	; 0x3f
     a0e:	ec 97       	sbiw	r28, 0x3c	; 60
     a10:	cf 56       	subi	r28, 0x6F	; 111
     a12:	df 4f       	sbci	r29, 0xFF	; 255
     a14:	a8 81       	ld	r26, Y
     a16:	b9 81       	ldd	r27, Y+1	; 0x01
     a18:	c1 59       	subi	r28, 0x91	; 145
     a1a:	d0 40       	sbci	r29, 0x00	; 0
     a1c:	2a 1b       	sub	r18, r26
     a1e:	3b 0b       	sbc	r19, r27
     a20:	c2 58       	subi	r28, 0x82	; 130
     a22:	df 4f       	sbci	r29, 0xFF	; 255
     a24:	99 83       	std	Y+1, r25	; 0x01
     a26:	88 83       	st	Y, r24
     a28:	ce 57       	subi	r28, 0x7E	; 126
     a2a:	d0 40       	sbci	r29, 0x00	; 0
     a2c:	82 17       	cp	r24, r18
     a2e:	93 07       	cpc	r25, r19
     a30:	34 f4       	brge	.+12     	; 0xa3e <__stack+0x13f>
     a32:	c2 58       	subi	r28, 0x82	; 130
     a34:	df 4f       	sbci	r29, 0xFF	; 255
     a36:	39 83       	std	Y+1, r19	; 0x01
     a38:	28 83       	st	Y, r18
     a3a:	ce 57       	subi	r28, 0x7E	; 126
     a3c:	d0 40       	sbci	r29, 0x00	; 0
inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
}

void inline Filter(int16_t *val, int16_t newVal, uint16_t strength) {
	int32_t temp = (int32_t)(*val) * strength / 100 + (int32_t)newVal * (100 - strength) / 100;
     a3e:	ca 57       	subi	r28, 0x7A	; 122
     a40:	df 4f       	sbci	r29, 0xFF	; 255
     a42:	e8 81       	ld	r30, Y
     a44:	f9 81       	ldd	r31, Y+1	; 0x01
     a46:	c6 58       	subi	r28, 0x86	; 134
     a48:	d0 40       	sbci	r29, 0x00	; 0
     a4a:	cf 01       	movw	r24, r30
     a4c:	aa 27       	eor	r26, r26
     a4e:	97 fd       	sbrc	r25, 7
     a50:	a0 95       	com	r26
     a52:	ba 2f       	mov	r27, r26
     a54:	ac 01       	movw	r20, r24
     a56:	bd 01       	movw	r22, r26
     a58:	44 0f       	add	r20, r20
     a5a:	55 1f       	adc	r21, r21
     a5c:	66 1f       	adc	r22, r22
     a5e:	77 1f       	adc	r23, r23
     a60:	84 0f       	add	r24, r20
     a62:	95 1f       	adc	r25, r21
     a64:	a6 1f       	adc	r26, r22
     a66:	b7 1f       	adc	r27, r23
     a68:	ac 01       	movw	r20, r24
     a6a:	bd 01       	movw	r22, r26
     a6c:	44 0f       	add	r20, r20
     a6e:	55 1f       	adc	r21, r21
     a70:	66 1f       	adc	r22, r22
     a72:	77 1f       	adc	r23, r23
     a74:	44 0f       	add	r20, r20
     a76:	55 1f       	adc	r21, r21
     a78:	66 1f       	adc	r22, r22
     a7a:	77 1f       	adc	r23, r23
     a7c:	84 0f       	add	r24, r20
     a7e:	95 1f       	adc	r25, r21
     a80:	a6 1f       	adc	r26, r22
     a82:	b7 1f       	adc	r27, r23
     a84:	bc 01       	movw	r22, r24
     a86:	cd 01       	movw	r24, r26
     a88:	66 0f       	add	r22, r22
     a8a:	77 1f       	adc	r23, r23
     a8c:	88 1f       	adc	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	a3 01       	movw	r20, r6
     a92:	92 01       	movw	r18, r4
     a94:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divmodsi4>
     a98:	49 01       	movw	r8, r18
     a9a:	5a 01       	movw	r10, r20
		//temp = min(SPECTRUM_LENGTH, levels[0] / 10);
		

		
			
		temp = (raw[0] + raw[1])/10 + 40*dLevels[0];
     a9c:	e4 96       	adiw	r28, 0x34	; 52
     a9e:	8e ad       	ldd	r24, Y+62	; 0x3e
     aa0:	9f ad       	ldd	r25, Y+63	; 0x3f
     aa2:	e4 97       	sbiw	r28, 0x34	; 52
     aa4:	82 0d       	add	r24, r2
     aa6:	93 1d       	adc	r25, r3
     aa8:	0f 2e       	mov	r0, r31
     aaa:	fa e0       	ldi	r31, 0x0A	; 10
     aac:	ef 2e       	mov	r14, r31
     aae:	f1 2c       	mov	r15, r1
     ab0:	f0 2d       	mov	r31, r0
     ab2:	b7 01       	movw	r22, r14
     ab4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__divmodhi4>
     ab8:	28 e2       	ldi	r18, 0x28	; 40
     aba:	ee 96       	adiw	r28, 0x3e	; 62
     abc:	4e ad       	ldd	r20, Y+62	; 0x3e
     abe:	5f ad       	ldd	r21, Y+63	; 0x3f
     ac0:	ee 97       	sbiw	r28, 0x3e	; 62
     ac2:	24 9f       	mul	r18, r20
     ac4:	c0 01       	movw	r24, r0
     ac6:	25 9f       	mul	r18, r21
     ac8:	90 0d       	add	r25, r0
     aca:	11 24       	eor	r1, r1
     acc:	db 01       	movw	r26, r22
     ace:	a8 0f       	add	r26, r24
     ad0:	b9 1f       	adc	r27, r25
inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
}

void inline Filter(int16_t *val, int16_t newVal, uint16_t strength) {
	int32_t temp = (int32_t)(*val) * strength / 100 + (int32_t)newVal * (100 - strength) / 100;
     ad2:	26 e4       	ldi	r18, 0x46	; 70
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	0e 94 1b 10 	call	0x2036	; 0x2036 <__usmulhisi3>
     ada:	a3 01       	movw	r20, r6
     adc:	92 01       	movw	r18, r4
     ade:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divmodsi4>
     ae2:	d5 01       	movw	r26, r10
     ae4:	c4 01       	movw	r24, r8
     ae6:	82 0f       	add	r24, r18
     ae8:	93 1f       	adc	r25, r19
     aea:	a4 1f       	adc	r26, r20
     aec:	b5 1f       	adc	r27, r21
     aee:	ca 57       	subi	r28, 0x7A	; 122
     af0:	df 4f       	sbci	r29, 0xFF	; 255
     af2:	88 83       	st	Y, r24
     af4:	99 83       	std	Y+1, r25	; 0x01
     af6:	aa 83       	std	Y+2, r26	; 0x02
     af8:	bb 83       	std	Y+3, r27	; 0x03
     afa:	c6 58       	subi	r28, 0x86	; 134
     afc:	d0 40       	sbci	r29, 0x00	; 0
		
			
		temp = (raw[0] + raw[1])/10 + 40*dLevels[0];
		Filter(&r, temp, 30);
			
		temp = (raw[1] + raw[2] + raw[3])/10 - 40*dLevels[0] - 20*dLevels[4] - 20*dLevels[3];
     afe:	28 ed       	ldi	r18, 0xD8	; 216
     b00:	ee 96       	adiw	r28, 0x3e	; 62
     b02:	4e ad       	ldd	r20, Y+62	; 0x3e
     b04:	5f ad       	ldd	r21, Y+63	; 0x3f
     b06:	ee 97       	sbiw	r28, 0x3e	; 62
     b08:	24 03       	mulsu	r18, r20
     b0a:	c0 01       	movw	r24, r0
     b0c:	25 9f       	mul	r18, r21
     b0e:	90 0d       	add	r25, r0
     b10:	11 24       	eor	r1, r1
     b12:	e4 96       	adiw	r28, 0x34	; 52
     b14:	9f af       	std	Y+63, r25	; 0x3f
     b16:	8e af       	std	Y+62, r24	; 0x3e
     b18:	e4 97       	sbiw	r28, 0x34	; 52
inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
}

void inline Filter(int16_t *val, int16_t newVal, uint16_t strength) {
	int32_t temp = (int32_t)(*val) * strength / 100 + (int32_t)newVal * (100 - strength) / 100;
     b1a:	ce 57       	subi	r28, 0x7E	; 126
     b1c:	df 4f       	sbci	r29, 0xFF	; 255
     b1e:	a8 81       	ld	r26, Y
     b20:	b9 81       	ldd	r27, Y+1	; 0x01
     b22:	c2 58       	subi	r28, 0x82	; 130
     b24:	d0 40       	sbci	r29, 0x00	; 0
     b26:	4d 01       	movw	r8, r26
     b28:	aa 24       	eor	r10, r10
     b2a:	97 fc       	sbrc	r9, 7
     b2c:	a0 94       	com	r10
     b2e:	ba 2c       	mov	r11, r10
     b30:	d5 01       	movw	r26, r10
     b32:	c4 01       	movw	r24, r8
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	aa 1f       	adc	r26, r26
     b3a:	bb 1f       	adc	r27, r27
     b3c:	88 0e       	add	r8, r24
     b3e:	99 1e       	adc	r9, r25
     b40:	aa 1e       	adc	r10, r26
     b42:	bb 1e       	adc	r11, r27
     b44:	d5 01       	movw	r26, r10
     b46:	c4 01       	movw	r24, r8
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	aa 1f       	adc	r26, r26
     b4e:	bb 1f       	adc	r27, r27
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	aa 1f       	adc	r26, r26
     b56:	bb 1f       	adc	r27, r27
     b58:	88 0e       	add	r8, r24
     b5a:	99 1e       	adc	r9, r25
     b5c:	aa 1e       	adc	r10, r26
     b5e:	bb 1e       	adc	r11, r27
     b60:	c5 01       	movw	r24, r10
     b62:	b4 01       	movw	r22, r8
     b64:	66 0f       	add	r22, r22
     b66:	77 1f       	adc	r23, r23
     b68:	88 1f       	adc	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	a3 01       	movw	r20, r6
     b6e:	92 01       	movw	r18, r4
     b70:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divmodsi4>
     b74:	49 01       	movw	r8, r18
     b76:	5a 01       	movw	r10, r20
		
			
		temp = (raw[0] + raw[1])/10 + 40*dLevels[0];
		Filter(&r, temp, 30);
			
		temp = (raw[1] + raw[2] + raw[3])/10 - 40*dLevels[0] - 20*dLevels[4] - 20*dLevels[3];
     b78:	e6 96       	adiw	r28, 0x36	; 54
     b7a:	ee ad       	ldd	r30, Y+62	; 0x3e
     b7c:	ff ad       	ldd	r31, Y+63	; 0x3f
     b7e:	e6 97       	sbiw	r28, 0x36	; 54
     b80:	2e 0e       	add	r2, r30
     b82:	3f 1e       	adc	r3, r31
     b84:	c1 01       	movw	r24, r2
     b86:	80 0f       	add	r24, r16
     b88:	91 1f       	adc	r25, r17
     b8a:	b7 01       	movw	r22, r14
     b8c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__divmodhi4>
     b90:	e4 96       	adiw	r28, 0x34	; 52
     b92:	ae ad       	ldd	r26, Y+62	; 0x3e
     b94:	bf ad       	ldd	r27, Y+63	; 0x3f
     b96:	e4 97       	sbiw	r28, 0x34	; 52
     b98:	a6 0f       	add	r26, r22
     b9a:	b7 1f       	adc	r27, r23
     b9c:	2c ee       	ldi	r18, 0xEC	; 236
     b9e:	c2 58       	subi	r28, 0x82	; 130
     ba0:	df 4f       	sbci	r29, 0xFF	; 255
     ba2:	48 81       	ld	r20, Y
     ba4:	59 81       	ldd	r21, Y+1	; 0x01
     ba6:	ce 57       	subi	r28, 0x7E	; 126
     ba8:	d0 40       	sbci	r29, 0x00	; 0
     baa:	24 03       	mulsu	r18, r20
     bac:	c0 01       	movw	r24, r0
     bae:	25 9f       	mul	r18, r21
     bb0:	90 0d       	add	r25, r0
     bb2:	11 24       	eor	r1, r1
     bb4:	a8 0f       	add	r26, r24
     bb6:	b9 1f       	adc	r27, r25
     bb8:	c0 58       	subi	r28, 0x80	; 128
     bba:	df 4f       	sbci	r29, 0xFF	; 255
     bbc:	48 81       	ld	r20, Y
     bbe:	59 81       	ldd	r21, Y+1	; 0x01
     bc0:	c0 58       	subi	r28, 0x80	; 128
     bc2:	d0 40       	sbci	r29, 0x00	; 0
     bc4:	24 03       	mulsu	r18, r20
     bc6:	c0 01       	movw	r24, r0
     bc8:	25 9f       	mul	r18, r21
     bca:	90 0d       	add	r25, r0
     bcc:	11 24       	eor	r1, r1
     bce:	a8 0f       	add	r26, r24
     bd0:	b9 1f       	adc	r27, r25
inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
}

void inline Filter(int16_t *val, int16_t newVal, uint16_t strength) {
	int32_t temp = (int32_t)(*val) * strength / 100 + (int32_t)newVal * (100 - strength) / 100;
     bd2:	26 e4       	ldi	r18, 0x46	; 70
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	0e 94 1b 10 	call	0x2036	; 0x2036 <__usmulhisi3>
     bda:	a3 01       	movw	r20, r6
     bdc:	92 01       	movw	r18, r4
     bde:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divmodsi4>
     be2:	d5 01       	movw	r26, r10
     be4:	c4 01       	movw	r24, r8
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	a4 1f       	adc	r26, r20
     bec:	b5 1f       	adc	r27, r21
     bee:	ce 57       	subi	r28, 0x7E	; 126
     bf0:	df 4f       	sbci	r29, 0xFF	; 255
     bf2:	88 83       	st	Y, r24
     bf4:	99 83       	std	Y+1, r25	; 0x01
     bf6:	aa 83       	std	Y+2, r26	; 0x02
     bf8:	bb 83       	std	Y+3, r27	; 0x03
     bfa:	c2 58       	subi	r28, 0x82	; 130
     bfc:	d0 40       	sbci	r29, 0x00	; 0
     bfe:	c1 57       	subi	r28, 0x71	; 113
     c00:	df 4f       	sbci	r29, 0xFF	; 255
     c02:	e8 81       	ld	r30, Y
     c04:	f9 81       	ldd	r31, Y+1	; 0x01
     c06:	cf 58       	subi	r28, 0x8F	; 143
     c08:	d0 40       	sbci	r29, 0x00	; 0
     c0a:	cf 01       	movw	r24, r30
     c0c:	aa 27       	eor	r26, r26
     c0e:	97 fd       	sbrc	r25, 7
     c10:	a0 95       	com	r26
     c12:	ba 2f       	mov	r27, r26
     c14:	ac 01       	movw	r20, r24
     c16:	bd 01       	movw	r22, r26
     c18:	44 0f       	add	r20, r20
     c1a:	55 1f       	adc	r21, r21
     c1c:	66 1f       	adc	r22, r22
     c1e:	77 1f       	adc	r23, r23
     c20:	84 0f       	add	r24, r20
     c22:	95 1f       	adc	r25, r21
     c24:	a6 1f       	adc	r26, r22
     c26:	b7 1f       	adc	r27, r23
     c28:	ac 01       	movw	r20, r24
     c2a:	bd 01       	movw	r22, r26
     c2c:	44 0f       	add	r20, r20
     c2e:	55 1f       	adc	r21, r21
     c30:	66 1f       	adc	r22, r22
     c32:	77 1f       	adc	r23, r23
     c34:	44 0f       	add	r20, r20
     c36:	55 1f       	adc	r21, r21
     c38:	66 1f       	adc	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	84 0f       	add	r24, r20
     c3e:	95 1f       	adc	r25, r21
     c40:	a6 1f       	adc	r26, r22
     c42:	b7 1f       	adc	r27, r23
     c44:	bc 01       	movw	r22, r24
     c46:	cd 01       	movw	r24, r26
     c48:	66 0f       	add	r22, r22
     c4a:	77 1f       	adc	r23, r23
     c4c:	88 1f       	adc	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	a3 01       	movw	r20, r6
     c52:	92 01       	movw	r18, r4
     c54:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divmodsi4>
     c58:	49 01       	movw	r8, r18
     c5a:	5a 01       	movw	r10, r20
		Filter(&r, temp, 30);
			
		temp = (raw[1] + raw[2] + raw[3])/10 - 40*dLevels[0] - 20*dLevels[4] - 20*dLevels[3];
		Filter(&g, temp, 30);
			
		temp = ((raw[3] >> 1) + raw[4])/10 - 40*dLevels[0] + 20*dLevels[4] + 20*dLevels[3];
     c5c:	c8 01       	movw	r24, r16
     c5e:	95 95       	asr	r25
     c60:	87 95       	ror	r24
     c62:	8c 0d       	add	r24, r12
     c64:	9d 1d       	adc	r25, r13
     c66:	b7 01       	movw	r22, r14
     c68:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__divmodhi4>
     c6c:	e4 96       	adiw	r28, 0x34	; 52
     c6e:	ae ad       	ldd	r26, Y+62	; 0x3e
     c70:	bf ad       	ldd	r27, Y+63	; 0x3f
     c72:	e4 97       	sbiw	r28, 0x34	; 52
     c74:	a6 0f       	add	r26, r22
     c76:	b7 1f       	adc	r27, r23
     c78:	24 e1       	ldi	r18, 0x14	; 20
     c7a:	c2 58       	subi	r28, 0x82	; 130
     c7c:	df 4f       	sbci	r29, 0xFF	; 255
     c7e:	48 81       	ld	r20, Y
     c80:	59 81       	ldd	r21, Y+1	; 0x01
     c82:	ce 57       	subi	r28, 0x7E	; 126
     c84:	d0 40       	sbci	r29, 0x00	; 0
     c86:	24 9f       	mul	r18, r20
     c88:	c0 01       	movw	r24, r0
     c8a:	25 9f       	mul	r18, r21
     c8c:	90 0d       	add	r25, r0
     c8e:	11 24       	eor	r1, r1
     c90:	a8 0f       	add	r26, r24
     c92:	b9 1f       	adc	r27, r25
     c94:	c0 58       	subi	r28, 0x80	; 128
     c96:	df 4f       	sbci	r29, 0xFF	; 255
     c98:	e8 81       	ld	r30, Y
     c9a:	f9 81       	ldd	r31, Y+1	; 0x01
     c9c:	c0 58       	subi	r28, 0x80	; 128
     c9e:	d0 40       	sbci	r29, 0x00	; 0
     ca0:	2e 9f       	mul	r18, r30
     ca2:	c0 01       	movw	r24, r0
     ca4:	2f 9f       	mul	r18, r31
     ca6:	90 0d       	add	r25, r0
     ca8:	11 24       	eor	r1, r1
     caa:	a8 0f       	add	r26, r24
     cac:	b9 1f       	adc	r27, r25
inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
}

void inline Filter(int16_t *val, int16_t newVal, uint16_t strength) {
	int32_t temp = (int32_t)(*val) * strength / 100 + (int32_t)newVal * (100 - strength) / 100;
     cae:	26 e4       	ldi	r18, 0x46	; 70
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	0e 94 1b 10 	call	0x2036	; 0x2036 <__usmulhisi3>
     cb6:	a3 01       	movw	r20, r6
     cb8:	92 01       	movw	r18, r4
     cba:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divmodsi4>
     cbe:	d5 01       	movw	r26, r10
     cc0:	c4 01       	movw	r24, r8
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	a4 1f       	adc	r26, r20
     cc8:	b5 1f       	adc	r27, r21
     cca:	ca 57       	subi	r28, 0x7A	; 122
     ccc:	df 4f       	sbci	r29, 0xFF	; 255
     cce:	28 81       	ld	r18, Y
     cd0:	39 81       	ldd	r19, Y+1	; 0x01
     cd2:	c6 58       	subi	r28, 0x86	; 134
     cd4:	d0 40       	sbci	r29, 0x00	; 0
     cd6:	33 23       	and	r19, r19
     cd8:	34 f4       	brge	.+12     	; 0xce6 <__stack+0x3e7>
     cda:	ca 57       	subi	r28, 0x7A	; 122
     cdc:	df 4f       	sbci	r29, 0xFF	; 255
     cde:	19 82       	std	Y+1, r1	; 0x01
     ce0:	18 82       	st	Y, r1
     ce2:	c6 58       	subi	r28, 0x86	; 134
     ce4:	d0 40       	sbci	r29, 0x00	; 0
     ce6:	ce 57       	subi	r28, 0x7E	; 126
     ce8:	df 4f       	sbci	r29, 0xFF	; 255
     cea:	48 81       	ld	r20, Y
     cec:	59 81       	ldd	r21, Y+1	; 0x01
     cee:	c2 58       	subi	r28, 0x82	; 130
     cf0:	d0 40       	sbci	r29, 0x00	; 0
     cf2:	55 23       	and	r21, r21
     cf4:	34 f4       	brge	.+12     	; 0xd02 <__stack+0x403>
     cf6:	ce 57       	subi	r28, 0x7E	; 126
     cf8:	df 4f       	sbci	r29, 0xFF	; 255
     cfa:	19 82       	std	Y+1, r1	; 0x01
     cfc:	18 82       	st	Y, r1
     cfe:	c2 58       	subi	r28, 0x82	; 130
     d00:	d0 40       	sbci	r29, 0x00	; 0
     d02:	c1 57       	subi	r28, 0x71	; 113
     d04:	df 4f       	sbci	r29, 0xFF	; 255
     d06:	99 83       	std	Y+1, r25	; 0x01
     d08:	88 83       	st	Y, r24
     d0a:	cf 58       	subi	r28, 0x8F	; 143
     d0c:	d0 40       	sbci	r29, 0x00	; 0
     d0e:	99 23       	and	r25, r25
     d10:	34 f4       	brge	.+12     	; 0xd1e <__stack+0x41f>
     d12:	c1 57       	subi	r28, 0x71	; 113
     d14:	df 4f       	sbci	r29, 0xFF	; 255
     d16:	19 82       	std	Y+1, r1	; 0x01
     d18:	18 82       	st	Y, r1
     d1a:	cf 58       	subi	r28, 0x8F	; 143
     d1c:	d0 40       	sbci	r29, 0x00	; 0
			
		//r /= scale;
		//g /= scale;
		//b /= scale;
		
		if(mode == 1) {
     d1e:	c6 57       	subi	r28, 0x76	; 118
     d20:	df 4f       	sbci	r29, 0xFF	; 255
     d22:	58 81       	ld	r21, Y
     d24:	ca 58       	subi	r28, 0x8A	; 138
     d26:	d0 40       	sbci	r29, 0x00	; 0
     d28:	51 30       	cpi	r21, 0x01	; 1
     d2a:	09 f0       	breq	.+2      	; 0xd2e <__stack+0x42f>
     d2c:	4f c4       	rjmp	.+2206   	; 0x15cc <__stack+0xccd>
			FillSegmentDown(&(spectrum[0]), levels[0]/10, 255, 0, 0);
     d2e:	e8 96       	adiw	r28, 0x38	; 56
     d30:	2e ad       	ldd	r18, Y+62	; 0x3e
     d32:	3f ad       	ldd	r19, Y+63	; 0x3f
     d34:	e8 97       	sbiw	r28, 0x38	; 56
     d36:	ad ec       	ldi	r26, 0xCD	; 205
     d38:	bc ec       	ldi	r27, 0xCC	; 204
     d3a:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>
     d3e:	7c 01       	movw	r14, r24
     d40:	f6 94       	lsr	r15
     d42:	e7 94       	ror	r14
     d44:	f6 94       	lsr	r15
     d46:	e7 94       	ror	r14
     d48:	f6 94       	lsr	r15
     d4a:	e7 94       	ror	r14
     d4c:	1e 2d       	mov	r17, r14
		APA102_SetPixel(segment, i, 0, 0, 0);
	}
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
     d4e:	ab 80       	ldd	r10, Y+3	; 0x03
     d50:	bc 80       	ldd	r11, Y+4	; 0x04
     d52:	b6 94       	lsr	r11
     d54:	a7 94       	ror	r10
     d56:	b6 94       	lsr	r11
     d58:	a7 94       	ror	r10
     d5a:	aa 94       	dec	r10
	
	for(i = 0; i < count; i++) {
     d5c:	ee 20       	and	r14, r14
     d5e:	89 f0       	breq	.+34     	; 0xd82 <__stack+0x483>
     d60:	ca 2c       	mov	r12, r10
     d62:	d1 2c       	mov	r13, r1
     d64:	b1 2c       	mov	r11, r1
		APA102_SetPixel(segment, last - i, r, g, b);
     d66:	00 e0       	ldi	r16, 0x00	; 0
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	4f ef       	ldi	r20, 0xFF	; 255
     d6c:	b6 01       	movw	r22, r12
     d6e:	ce 01       	movw	r24, r28
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
	
	for(i = 0; i < count; i++) {
     d76:	b3 94       	inc	r11
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	c8 1a       	sub	r12, r24
     d7c:	d1 08       	sbc	r13, r1
     d7e:	b1 16       	cp	r11, r17
     d80:	90 f3       	brcs	.-28     	; 0xd66 <__stack+0x467>
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
     d82:	ff 24       	eor	r15, r15
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	9c 81       	ldd	r25, Y+4	; 0x04
     d88:	96 95       	lsr	r25
     d8a:	87 95       	ror	r24
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	e8 16       	cp	r14, r24
     d92:	f9 06       	cpc	r15, r25
     d94:	c0 f4       	brcc	.+48     	; 0xdc6 <__stack+0x4c7>
		APA102_SetPixel(segment, last - i, 0, 0, 0);
     d96:	ea 2c       	mov	r14, r10
     d98:	f1 2c       	mov	r15, r1
     d9a:	b7 01       	movw	r22, r14
     d9c:	61 1b       	sub	r22, r17
     d9e:	71 09       	sbc	r23, r1
     da0:	00 e0       	ldi	r16, 0x00	; 0
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	ce 01       	movw	r24, r28
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
     dae:	1f 5f       	subi	r17, 0xFF	; 255
     db0:	21 2f       	mov	r18, r17
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	96 95       	lsr	r25
     dba:	87 95       	ror	r24
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24
     dc0:	28 17       	cp	r18, r24
     dc2:	39 07       	cpc	r19, r25
     dc4:	50 f3       	brcs	.-44     	; 0xd9a <__stack+0x49b>
		//g /= scale;
		//b /= scale;
		
		if(mode == 1) {
			FillSegmentDown(&(spectrum[0]), levels[0]/10, 255, 0, 0);
			FillSegmentUp(&(spectrum[1]), levels[1]/10, 255, 255, 0);
     dc6:	c5 57       	subi	r28, 0x75	; 117
     dc8:	df 4f       	sbci	r29, 0xFF	; 255
     dca:	28 81       	ld	r18, Y
     dcc:	39 81       	ldd	r19, Y+1	; 0x01
     dce:	cb 58       	subi	r28, 0x8B	; 139
     dd0:	d0 40       	sbci	r29, 0x00	; 0
     dd2:	ad ec       	ldi	r26, 0xCD	; 205
     dd4:	bc ec       	ldi	r27, 0xCC	; 204
     dd6:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>
     dda:	7c 01       	movw	r14, r24
     ddc:	f6 94       	lsr	r15
     dde:	e7 94       	ror	r14
     de0:	f6 94       	lsr	r15
     de2:	e7 94       	ror	r14
     de4:	f6 94       	lsr	r15
     de6:	e7 94       	ror	r14
     de8:	1e 2d       	mov	r17, r14
}

inline void FillSegmentUp(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i;
	
	for(i = 0; i < count; i++) {
     dea:	ee 20       	and	r14, r14
     dec:	79 f0       	breq	.+30     	; 0xe0c <__stack+0x50d>
     dee:	c1 2c       	mov	r12, r1
     df0:	d1 2c       	mov	r13, r1
		APA102_SetPixel(segment, i, r, g, b);
     df2:	00 e0       	ldi	r16, 0x00	; 0
     df4:	2f ef       	ldi	r18, 0xFF	; 255
     df6:	4f ef       	ldi	r20, 0xFF	; 255
     df8:	b6 01       	movw	r22, r12
     dfa:	ce 01       	movw	r24, r28
     dfc:	07 96       	adiw	r24, 0x07	; 7
     dfe:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
     e02:	9f ef       	ldi	r25, 0xFF	; 255
     e04:	c9 1a       	sub	r12, r25
     e06:	d9 0a       	sbc	r13, r25
}

inline void FillSegmentUp(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i;
	
	for(i = 0; i < count; i++) {
     e08:	c1 16       	cp	r12, r17
     e0a:	98 f3       	brcs	.-26     	; 0xdf2 <__stack+0x4f3>
		APA102_SetPixel(segment, i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
     e0c:	b7 01       	movw	r22, r14
     e0e:	77 27       	eor	r23, r23
     e10:	89 85       	ldd	r24, Y+9	; 0x09
     e12:	9a 85       	ldd	r25, Y+10	; 0x0a
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	68 17       	cp	r22, r24
     e1e:	79 07       	cpc	r23, r25
     e20:	98 f4       	brcc	.+38     	; 0xe48 <__stack+0x549>
		APA102_SetPixel(segment, i, 0, 0, 0);
     e22:	00 e0       	ldi	r16, 0x00	; 0
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	ce 01       	movw	r24, r28
     e2a:	07 96       	adiw	r24, 0x07	; 7
     e2c:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
     e30:	1f 5f       	subi	r17, 0xFF	; 255
     e32:	61 2f       	mov	r22, r17
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	89 85       	ldd	r24, Y+9	; 0x09
     e38:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3a:	96 95       	lsr	r25
     e3c:	87 95       	ror	r24
     e3e:	96 95       	lsr	r25
     e40:	87 95       	ror	r24
     e42:	68 17       	cp	r22, r24
     e44:	79 07       	cpc	r23, r25
     e46:	68 f3       	brcs	.-38     	; 0xe22 <__stack+0x523>
		//b /= scale;
		
		if(mode == 1) {
			FillSegmentDown(&(spectrum[0]), levels[0]/10, 255, 0, 0);
			FillSegmentUp(&(spectrum[1]), levels[1]/10, 255, 255, 0);
			FillSegmentDown(&(spectrum[2]), levels[2]/10, 0, 255, 0);
     e48:	c3 57       	subi	r28, 0x73	; 115
     e4a:	df 4f       	sbci	r29, 0xFF	; 255
     e4c:	28 81       	ld	r18, Y
     e4e:	39 81       	ldd	r19, Y+1	; 0x01
     e50:	cd 58       	subi	r28, 0x8D	; 141
     e52:	d0 40       	sbci	r29, 0x00	; 0
     e54:	ad ec       	ldi	r26, 0xCD	; 205
     e56:	bc ec       	ldi	r27, 0xCC	; 204
     e58:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>
     e5c:	7c 01       	movw	r14, r24
     e5e:	f6 94       	lsr	r15
     e60:	e7 94       	ror	r14
     e62:	f6 94       	lsr	r15
     e64:	e7 94       	ror	r14
     e66:	f6 94       	lsr	r15
     e68:	e7 94       	ror	r14
     e6a:	1e 2d       	mov	r17, r14
		APA102_SetPixel(segment, i, 0, 0, 0);
	}
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
     e6c:	af 84       	ldd	r10, Y+15	; 0x0f
     e6e:	b8 88       	ldd	r11, Y+16	; 0x10
     e70:	b6 94       	lsr	r11
     e72:	a7 94       	ror	r10
     e74:	b6 94       	lsr	r11
     e76:	a7 94       	ror	r10
     e78:	aa 94       	dec	r10
	
	for(i = 0; i < count; i++) {
     e7a:	ee 20       	and	r14, r14
     e7c:	89 f0       	breq	.+34     	; 0xea0 <__stack+0x5a1>
     e7e:	ca 2c       	mov	r12, r10
     e80:	d1 2c       	mov	r13, r1
     e82:	b1 2c       	mov	r11, r1
		APA102_SetPixel(segment, last - i, r, g, b);
     e84:	00 e0       	ldi	r16, 0x00	; 0
     e86:	2f ef       	ldi	r18, 0xFF	; 255
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	b6 01       	movw	r22, r12
     e8c:	ce 01       	movw	r24, r28
     e8e:	0d 96       	adiw	r24, 0x0d	; 13
     e90:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
	
	for(i = 0; i < count; i++) {
     e94:	b3 94       	inc	r11
     e96:	a1 e0       	ldi	r26, 0x01	; 1
     e98:	ca 1a       	sub	r12, r26
     e9a:	d1 08       	sbc	r13, r1
     e9c:	b1 16       	cp	r11, r17
     e9e:	90 f3       	brcs	.-28     	; 0xe84 <__stack+0x585>
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
     ea0:	ff 24       	eor	r15, r15
     ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea4:	98 89       	ldd	r25, Y+16	; 0x10
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	96 95       	lsr	r25
     eac:	87 95       	ror	r24
     eae:	e8 16       	cp	r14, r24
     eb0:	f9 06       	cpc	r15, r25
     eb2:	c0 f4       	brcc	.+48     	; 0xee4 <__stack+0x5e5>
		APA102_SetPixel(segment, last - i, 0, 0, 0);
     eb4:	ea 2c       	mov	r14, r10
     eb6:	f1 2c       	mov	r15, r1
     eb8:	b7 01       	movw	r22, r14
     eba:	61 1b       	sub	r22, r17
     ebc:	71 09       	sbc	r23, r1
     ebe:	00 e0       	ldi	r16, 0x00	; 0
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	ce 01       	movw	r24, r28
     ec6:	0d 96       	adiw	r24, 0x0d	; 13
     ec8:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
     ecc:	1f 5f       	subi	r17, 0xFF	; 255
     ece:	21 2f       	mov	r18, r17
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed4:	98 89       	ldd	r25, Y+16	; 0x10
     ed6:	96 95       	lsr	r25
     ed8:	87 95       	ror	r24
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	28 17       	cp	r18, r24
     ee0:	39 07       	cpc	r19, r25
     ee2:	50 f3       	brcs	.-44     	; 0xeb8 <__stack+0x5b9>
		
		if(mode == 1) {
			FillSegmentDown(&(spectrum[0]), levels[0]/10, 255, 0, 0);
			FillSegmentUp(&(spectrum[1]), levels[1]/10, 255, 255, 0);
			FillSegmentDown(&(spectrum[2]), levels[2]/10, 0, 255, 0);
			FillSegmentUp(&(spectrum[3]), levels[3]/10, 0, 255, 127);
     ee4:	ea 96       	adiw	r28, 0x3a	; 58
     ee6:	2e ad       	ldd	r18, Y+62	; 0x3e
     ee8:	3f ad       	ldd	r19, Y+63	; 0x3f
     eea:	ea 97       	sbiw	r28, 0x3a	; 58
     eec:	ad ec       	ldi	r26, 0xCD	; 205
     eee:	bc ec       	ldi	r27, 0xCC	; 204
     ef0:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>
     ef4:	7c 01       	movw	r14, r24
     ef6:	f6 94       	lsr	r15
     ef8:	e7 94       	ror	r14
     efa:	f6 94       	lsr	r15
     efc:	e7 94       	ror	r14
     efe:	f6 94       	lsr	r15
     f00:	e7 94       	ror	r14
     f02:	1e 2d       	mov	r17, r14
}

inline void FillSegmentUp(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i;
	
	for(i = 0; i < count; i++) {
     f04:	ee 20       	and	r14, r14
     f06:	79 f0       	breq	.+30     	; 0xf26 <__stack+0x627>
     f08:	c1 2c       	mov	r12, r1
     f0a:	d1 2c       	mov	r13, r1
		APA102_SetPixel(segment, i, r, g, b);
     f0c:	0f e7       	ldi	r16, 0x7F	; 127
     f0e:	2f ef       	ldi	r18, 0xFF	; 255
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	b6 01       	movw	r22, r12
     f14:	ce 01       	movw	r24, r28
     f16:	43 96       	adiw	r24, 0x13	; 19
     f18:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
     f1c:	bf ef       	ldi	r27, 0xFF	; 255
     f1e:	cb 1a       	sub	r12, r27
     f20:	db 0a       	sbc	r13, r27
}

inline void FillSegmentUp(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i;
	
	for(i = 0; i < count; i++) {
     f22:	c1 16       	cp	r12, r17
     f24:	98 f3       	brcs	.-26     	; 0xf0c <__stack+0x60d>
		APA102_SetPixel(segment, i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
     f26:	b7 01       	movw	r22, r14
     f28:	77 27       	eor	r23, r23
     f2a:	8d 89       	ldd	r24, Y+21	; 0x15
     f2c:	9e 89       	ldd	r25, Y+22	; 0x16
     f2e:	96 95       	lsr	r25
     f30:	87 95       	ror	r24
     f32:	96 95       	lsr	r25
     f34:	87 95       	ror	r24
     f36:	68 17       	cp	r22, r24
     f38:	79 07       	cpc	r23, r25
     f3a:	98 f4       	brcc	.+38     	; 0xf62 <__stack+0x663>
		APA102_SetPixel(segment, i, 0, 0, 0);
     f3c:	00 e0       	ldi	r16, 0x00	; 0
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	ce 01       	movw	r24, r28
     f44:	43 96       	adiw	r24, 0x13	; 19
     f46:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
     f4a:	1f 5f       	subi	r17, 0xFF	; 255
     f4c:	61 2f       	mov	r22, r17
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	8d 89       	ldd	r24, Y+21	; 0x15
     f52:	9e 89       	ldd	r25, Y+22	; 0x16
     f54:	96 95       	lsr	r25
     f56:	87 95       	ror	r24
     f58:	96 95       	lsr	r25
     f5a:	87 95       	ror	r24
     f5c:	68 17       	cp	r22, r24
     f5e:	79 07       	cpc	r23, r25
     f60:	68 f3       	brcs	.-38     	; 0xf3c <__stack+0x63d>
		if(mode == 1) {
			FillSegmentDown(&(spectrum[0]), levels[0]/10, 255, 0, 0);
			FillSegmentUp(&(spectrum[1]), levels[1]/10, 255, 255, 0);
			FillSegmentDown(&(spectrum[2]), levels[2]/10, 0, 255, 0);
			FillSegmentUp(&(spectrum[3]), levels[3]/10, 0, 255, 127);
			FillSegmentDown(&(spectrum[4]), levels[4]/10, 0, 0, 255);
     f62:	ec 96       	adiw	r28, 0x3c	; 60
     f64:	2e ad       	ldd	r18, Y+62	; 0x3e
     f66:	3f ad       	ldd	r19, Y+63	; 0x3f
     f68:	ec 97       	sbiw	r28, 0x3c	; 60
     f6a:	ad ec       	ldi	r26, 0xCD	; 205
     f6c:	bc ec       	ldi	r27, 0xCC	; 204
     f6e:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>
     f72:	7c 01       	movw	r14, r24
     f74:	f6 94       	lsr	r15
     f76:	e7 94       	ror	r14
     f78:	f6 94       	lsr	r15
     f7a:	e7 94       	ror	r14
     f7c:	f6 94       	lsr	r15
     f7e:	e7 94       	ror	r14
     f80:	1e 2d       	mov	r17, r14
		APA102_SetPixel(segment, i, 0, 0, 0);
	}
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
     f82:	ab 8c       	ldd	r10, Y+27	; 0x1b
     f84:	bc 8c       	ldd	r11, Y+28	; 0x1c
     f86:	b6 94       	lsr	r11
     f88:	a7 94       	ror	r10
     f8a:	b6 94       	lsr	r11
     f8c:	a7 94       	ror	r10
     f8e:	aa 94       	dec	r10
	
	for(i = 0; i < count; i++) {
     f90:	ee 20       	and	r14, r14
     f92:	89 f0       	breq	.+34     	; 0xfb6 <__stack+0x6b7>
     f94:	ca 2c       	mov	r12, r10
     f96:	d1 2c       	mov	r13, r1
     f98:	b1 2c       	mov	r11, r1
		APA102_SetPixel(segment, last - i, r, g, b);
     f9a:	0f ef       	ldi	r16, 0xFF	; 255
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	b6 01       	movw	r22, r12
     fa2:	ce 01       	movw	r24, r28
     fa4:	49 96       	adiw	r24, 0x19	; 25
     fa6:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
	
	for(i = 0; i < count; i++) {
     faa:	b3 94       	inc	r11
     fac:	e1 e0       	ldi	r30, 0x01	; 1
     fae:	ce 1a       	sub	r12, r30
     fb0:	d1 08       	sbc	r13, r1
     fb2:	b1 16       	cp	r11, r17
     fb4:	90 f3       	brcs	.-28     	; 0xf9a <__stack+0x69b>
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
     fb6:	ff 24       	eor	r15, r15
     fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbc:	96 95       	lsr	r25
     fbe:	87 95       	ror	r24
     fc0:	96 95       	lsr	r25
     fc2:	87 95       	ror	r24
     fc4:	e8 16       	cp	r14, r24
     fc6:	f9 06       	cpc	r15, r25
     fc8:	c0 f4       	brcc	.+48     	; 0xffa <__stack+0x6fb>
		APA102_SetPixel(segment, last - i, 0, 0, 0);
     fca:	ea 2c       	mov	r14, r10
     fcc:	f1 2c       	mov	r15, r1
     fce:	b7 01       	movw	r22, r14
     fd0:	61 1b       	sub	r22, r17
     fd2:	71 09       	sbc	r23, r1
     fd4:	00 e0       	ldi	r16, 0x00	; 0
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	ce 01       	movw	r24, r28
     fdc:	49 96       	adiw	r24, 0x19	; 25
     fde:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
     fe2:	1f 5f       	subi	r17, 0xFF	; 255
     fe4:	21 2f       	mov	r18, r17
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fec:	96 95       	lsr	r25
     fee:	87 95       	ror	r24
     ff0:	96 95       	lsr	r25
     ff2:	87 95       	ror	r24
     ff4:	28 17       	cp	r18, r24
     ff6:	39 07       	cpc	r19, r25
     ff8:	50 f3       	brcs	.-44     	; 0xfce <__stack+0x6cf>
			FillSegmentUp(&(spectrum[1]), levels[1]/10, 255, 255, 0);
			FillSegmentDown(&(spectrum[2]), levels[2]/10, 0, 255, 0);
			FillSegmentUp(&(spectrum[3]), levels[3]/10, 0, 255, 127);
			FillSegmentDown(&(spectrum[4]), levels[4]/10, 0, 0, 255);
			
			tick++;
     ffa:	cb 56       	subi	r28, 0x6B	; 107
     ffc:	df 4f       	sbci	r29, 0xFF	; 255
     ffe:	28 81       	ld	r18, Y
    1000:	39 81       	ldd	r19, Y+1	; 0x01
    1002:	c5 59       	subi	r28, 0x95	; 149
    1004:	d0 40       	sbci	r29, 0x00	; 0
    1006:	2f 5f       	subi	r18, 0xFF	; 255
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	cb 56       	subi	r28, 0x6B	; 107
    100c:	df 4f       	sbci	r29, 0xFF	; 255
    100e:	39 83       	std	Y+1, r19	; 0x01
    1010:	28 83       	st	Y, r18
    1012:	c5 59       	subi	r28, 0x95	; 149
    1014:	d0 40       	sbci	r29, 0x00	; 0
			
			if(tick >= 4) {
    1016:	24 30       	cpi	r18, 0x04	; 4
    1018:	31 05       	cpc	r19, r1
    101a:	0c f4       	brge	.+2      	; 0x101e <__stack+0x71f>
    101c:	93 c0       	rjmp	.+294    	; 0x1144 <__stack+0x845>
				tick = 0;
				
				APA102_Decrement(&leftArm, 1);
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	ce 01       	movw	r24, r28
    1022:	4f 96       	adiw	r24, 0x1f	; 31
    1024:	0e 94 82 01 	call	0x304	; 0x304 <APA102_Decrement>
				APA102_Decrement(&rightArm, 1);
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	ce 01       	movw	r24, r28
    102c:	85 96       	adiw	r24, 0x25	; 37
    102e:	0e 94 82 01 	call	0x304	; 0x304 <APA102_Decrement>
				APA102_Decrement(&rightLeg, 1);
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	ce 01       	movw	r24, r28
    1036:	8b 96       	adiw	r24, 0x2b	; 43
    1038:	0e 94 82 01 	call	0x304	; 0x304 <APA102_Decrement>
				APA102_Decrement(&leftLeg, 1);
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	ce 01       	movw	r24, r28
    1040:	c1 96       	adiw	r24, 0x31	; 49
    1042:	0e 94 82 01 	call	0x304	; 0x304 <APA102_Decrement>
inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
}

inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
    1046:	c1 57       	subi	r28, 0x71	; 113
    1048:	df 4f       	sbci	r29, 0xFF	; 255
    104a:	38 81       	ld	r19, Y
    104c:	cf 58       	subi	r28, 0x8F	; 143
    104e:	d0 40       	sbci	r29, 0x00	; 0
    1050:	c0 57       	subi	r28, 0x70	; 112
    1052:	df 4f       	sbci	r29, 0xFF	; 255
    1054:	28 81       	ld	r18, Y
    1056:	c0 59       	subi	r28, 0x90	; 144
    1058:	d0 40       	sbci	r29, 0x00	; 0
    105a:	c1 57       	subi	r28, 0x71	; 113
    105c:	df 4f       	sbci	r29, 0xFF	; 255
    105e:	48 81       	ld	r20, Y
    1060:	59 81       	ldd	r21, Y+1	; 0x01
    1062:	cf 58       	subi	r28, 0x8F	; 143
    1064:	d0 40       	sbci	r29, 0x00	; 0
    1066:	ce 57       	subi	r28, 0x7E	; 126
    1068:	df 4f       	sbci	r29, 0xFF	; 255
    106a:	88 81       	ld	r24, Y
    106c:	99 81       	ldd	r25, Y+1	; 0x01
    106e:	c2 58       	subi	r28, 0x82	; 130
    1070:	d0 40       	sbci	r29, 0x00	; 0
    1072:	48 17       	cp	r20, r24
    1074:	59 07       	cpc	r21, r25
    1076:	54 f4       	brge	.+20     	; 0x108c <__stack+0x78d>
    1078:	ce 57       	subi	r28, 0x7E	; 126
    107a:	df 4f       	sbci	r29, 0xFF	; 255
    107c:	38 81       	ld	r19, Y
    107e:	c2 58       	subi	r28, 0x82	; 130
    1080:	d0 40       	sbci	r29, 0x00	; 0
    1082:	cd 57       	subi	r28, 0x7D	; 125
    1084:	df 4f       	sbci	r29, 0xFF	; 255
    1086:	28 81       	ld	r18, Y
    1088:	c3 58       	subi	r28, 0x83	; 131
    108a:	d0 40       	sbci	r29, 0x00	; 0
    108c:	83 2f       	mov	r24, r19
    108e:	92 2f       	mov	r25, r18
    1090:	ca 57       	subi	r28, 0x7A	; 122
    1092:	df 4f       	sbci	r29, 0xFF	; 255
    1094:	a8 81       	ld	r26, Y
    1096:	b9 81       	ldd	r27, Y+1	; 0x01
    1098:	c6 58       	subi	r28, 0x86	; 134
    109a:	d0 40       	sbci	r29, 0x00	; 0
    109c:	8a 17       	cp	r24, r26
    109e:	9b 07       	cpc	r25, r27
    10a0:	0c f4       	brge	.+2      	; 0x10a4 <__stack+0x7a5>
    10a2:	cd 01       	movw	r24, r26
			b = 0;
			
		highestLevel = max(r, max(g, b));
		lowestLevel = min(r, min(g, b));
			
		scale = max(highestLevel / 255, 1);
    10a4:	21 e0       	ldi	r18, 0x01	; 1
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <__stack+0x7ad>
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
inline int16_t min(int16_t a, int16_t b) {
	return (a < b) ? a : b;
}

inline int16_t max(int16_t a, int16_t b) {
	return (a > b) ? a : b;
    10ae:	12 16       	cp	r1, r18
    10b0:	13 06       	cpc	r1, r19
    10b2:	14 f0       	brlt	.+4      	; 0x10b8 <__stack+0x7b9>
    10b4:	21 e0       	ldi	r18, 0x01	; 1
    10b6:	30 e0       	ldi	r19, 0x00	; 0
				APA102_Decrement(&leftArm, 1);
				APA102_Decrement(&rightArm, 1);
				APA102_Decrement(&rightLeg, 1);
				APA102_Decrement(&leftLeg, 1);
				
				APA102_SetPixel(&leftArm, 0, r / scale, g / scale, b / scale);
    10b8:	33 27       	eor	r19, r19
    10ba:	c1 57       	subi	r28, 0x71	; 113
    10bc:	df 4f       	sbci	r29, 0xFF	; 255
    10be:	88 81       	ld	r24, Y
    10c0:	99 81       	ldd	r25, Y+1	; 0x01
    10c2:	cf 58       	subi	r28, 0x8F	; 143
    10c4:	d0 40       	sbci	r29, 0x00	; 0
    10c6:	b9 01       	movw	r22, r18
    10c8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__divmodhi4>
    10cc:	e6 2e       	mov	r14, r22
    10ce:	ce 57       	subi	r28, 0x7E	; 126
    10d0:	df 4f       	sbci	r29, 0xFF	; 255
    10d2:	88 81       	ld	r24, Y
    10d4:	99 81       	ldd	r25, Y+1	; 0x01
    10d6:	c2 58       	subi	r28, 0x82	; 130
    10d8:	d0 40       	sbci	r29, 0x00	; 0
    10da:	b9 01       	movw	r22, r18
    10dc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__divmodhi4>
    10e0:	f6 2e       	mov	r15, r22
    10e2:	ca 57       	subi	r28, 0x7A	; 122
    10e4:	df 4f       	sbci	r29, 0xFF	; 255
    10e6:	88 81       	ld	r24, Y
    10e8:	99 81       	ldd	r25, Y+1	; 0x01
    10ea:	c6 58       	subi	r28, 0x86	; 134
    10ec:	d0 40       	sbci	r29, 0x00	; 0
    10ee:	b9 01       	movw	r22, r18
    10f0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__divmodhi4>
    10f4:	16 2f       	mov	r17, r22
    10f6:	0e 2d       	mov	r16, r14
    10f8:	2f 2d       	mov	r18, r15
    10fa:	46 2f       	mov	r20, r22
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	ce 01       	movw	r24, r28
    1102:	4f 96       	adiw	r24, 0x1f	; 31
    1104:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
				APA102_SetPixel(&rightArm, 0, r / scale, g / scale, b / scale);
    1108:	2f 2d       	mov	r18, r15
    110a:	41 2f       	mov	r20, r17
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	ce 01       	movw	r24, r28
    1112:	85 96       	adiw	r24, 0x25	; 37
    1114:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
				APA102_SetPixel(&rightLeg, 0, r / scale, g / scale, b / scale);
    1118:	2f 2d       	mov	r18, r15
    111a:	41 2f       	mov	r20, r17
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	ce 01       	movw	r24, r28
    1122:	8b 96       	adiw	r24, 0x2b	; 43
    1124:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
				APA102_SetPixel(&leftLeg, 0, r / scale, g / scale, b / scale);
    1128:	2f 2d       	mov	r18, r15
    112a:	41 2f       	mov	r20, r17
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	ce 01       	movw	r24, r28
    1132:	c1 96       	adiw	r24, 0x31	; 49
    1134:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
			FillSegmentDown(&(spectrum[4]), levels[4]/10, 0, 0, 255);
			
			tick++;
			
			if(tick >= 4) {
				tick = 0;
    1138:	cb 56       	subi	r28, 0x6B	; 107
    113a:	df 4f       	sbci	r29, 0xFF	; 255
    113c:	19 82       	std	Y+1, r1	; 0x01
    113e:	18 82       	st	Y, r1
    1140:	c5 59       	subi	r28, 0x95	; 149
    1142:	d0 40       	sbci	r29, 0x00	; 0
				APA102_SetPixel(&leftArm, 0, r / scale, g / scale, b / scale);
				APA102_SetPixel(&rightArm, 0, r / scale, g / scale, b / scale);
				APA102_SetPixel(&rightLeg, 0, r / scale, g / scale, b / scale);
				APA102_SetPixel(&leftLeg, 0, r / scale, g / scale, b / scale);
			}
			APA102_Send(&strip);
    1144:	ce 01       	movw	r24, r28
    1146:	87 5b       	subi	r24, 0xB7	; 183
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	0e 94 8f 01 	call	0x31e	; 0x31e <APA102_Send>
		}
		if(mode != lastMode || mode == 1 || mode > 3) {
    114e:	22 24       	eor	r2, r2
    1150:	23 94       	inc	r2
    1152:	31 2c       	mov	r3, r1
    1154:	2f c2       	rjmp	.+1118   	; 0x15b4 <__stack+0xcb5>
    1156:	c6 57       	subi	r28, 0x76	; 118
    1158:	df 4f       	sbci	r29, 0xFF	; 255
    115a:	b8 81       	ld	r27, Y
    115c:	ca 58       	subi	r28, 0x8A	; 138
    115e:	d0 40       	sbci	r29, 0x00	; 0
    1160:	b4 30       	cpi	r27, 0x04	; 4
    1162:	08 f0       	brcs	.+2      	; 0x1166 <__stack+0x867>
    1164:	45 c2       	rjmp	.+1162   	; 0x15f0 <__stack+0xcf1>
    1166:	cd 56       	subi	r28, 0x6D	; 109
    1168:	df 4f       	sbci	r29, 0xFF	; 255
    116a:	39 82       	std	Y+1, r3	; 0x01
    116c:	28 82       	st	Y, r2
    116e:	c3 59       	subi	r28, 0x93	; 147
    1170:	d0 40       	sbci	r29, 0x00	; 0
    1172:	78 ca       	rjmp	.-2832   	; 0x664 <main+0x17a>
			
			
			if(mode == 2 || mode == 3) {
    1174:	c6 57       	subi	r28, 0x76	; 118
    1176:	df 4f       	sbci	r29, 0xFF	; 255
    1178:	88 81       	ld	r24, Y
    117a:	ca 58       	subi	r28, 0x8A	; 138
    117c:	d0 40       	sbci	r29, 0x00	; 0
    117e:	82 50       	subi	r24, 0x02	; 2
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	08 f0       	brcs	.+2      	; 0x1186 <__stack+0x887>
    1184:	39 c1       	rjmp	.+626    	; 0x13f8 <__stack+0xaf9>
				uint8_t brightness;
				
				if(mode == 2)
    1186:	c6 57       	subi	r28, 0x76	; 118
    1188:	df 4f       	sbci	r29, 0xFF	; 255
    118a:	e8 81       	ld	r30, Y
    118c:	ca 58       	subi	r28, 0x8A	; 138
    118e:	d0 40       	sbci	r29, 0x00	; 0
    1190:	e2 30       	cpi	r30, 0x02	; 2
    1192:	11 f4       	brne	.+4      	; 0x1198 <__stack+0x899>
					brightness = 32;
    1194:	10 e2       	ldi	r17, 0x20	; 32
    1196:	01 c0       	rjmp	.+2      	; 0x119a <__stack+0x89b>
				else
					brightness = 127;
    1198:	1f e7       	ldi	r17, 0x7F	; 127
		APA102_SetPixel(segment, i, 0, 0, 0);
	}
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
    119a:	cb 80       	ldd	r12, Y+3	; 0x03
    119c:	dc 80       	ldd	r13, Y+4	; 0x04
    119e:	d6 94       	lsr	r13
    11a0:	c7 94       	ror	r12
    11a2:	d6 94       	lsr	r13
    11a4:	c7 94       	ror	r12
    11a6:	ca 94       	dec	r12
    11a8:	ec 2c       	mov	r14, r12
    11aa:	f1 2c       	mov	r15, r1
    11ac:	57 01       	movw	r10, r14
    11ae:	fd e0       	ldi	r31, 0x0D	; 13
    11b0:	af 1a       	sub	r10, r31
    11b2:	b1 08       	sbc	r11, r1
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, last - i, r, g, b);
    11b4:	67 01       	movw	r12, r14
    11b6:	46 01       	movw	r8, r12
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	21 2f       	mov	r18, r17
    11bc:	41 2f       	mov	r20, r17
    11be:	b7 01       	movw	r22, r14
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	e2 1a       	sub	r14, r18
    11cc:	f1 08       	sbc	r15, r1
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
	
	for(i = 0; i < count; i++) {
    11ce:	ea 14       	cp	r14, r10
    11d0:	fb 04       	cpc	r15, r11
    11d2:	89 f7       	brne	.-30     	; 0x11b6 <__stack+0x8b7>
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	c8 97       	sbiw	r24, 0x38	; 56
    11da:	08 f4       	brcc	.+2      	; 0x11de <__stack+0x8df>
    11dc:	13 c2       	rjmp	.+1062   	; 0x1604 <__stack+0xd05>
    11de:	0f 2e       	mov	r0, r31
    11e0:	fd e0       	ldi	r31, 0x0D	; 13
    11e2:	ff 2e       	mov	r15, r31
    11e4:	f0 2d       	mov	r31, r0
		APA102_SetPixel(segment, last - i, 0, 0, 0);
    11e6:	b4 01       	movw	r22, r8
    11e8:	6f 19       	sub	r22, r15
    11ea:	71 09       	sbc	r23, r1
    11ec:	00 e0       	ldi	r16, 0x00	; 0
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    11fa:	f3 94       	inc	r15
    11fc:	2f 2d       	mov	r18, r15
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	96 95       	lsr	r25
    1206:	87 95       	ror	r24
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	28 17       	cp	r18, r24
    120e:	39 07       	cpc	r19, r25
    1210:	50 f3       	brcs	.-44     	; 0x11e6 <__stack+0x8e7>
    1212:	f8 c1       	rjmp	.+1008   	; 0x1604 <__stack+0xd05>

inline void FillSegmentUp(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i;
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, i, r, g, b);
    1214:	00 e0       	ldi	r16, 0x00	; 0
    1216:	21 2f       	mov	r18, r17
    1218:	41 2f       	mov	r20, r17
    121a:	b7 01       	movw	r22, r14
    121c:	ce 01       	movw	r24, r28
    121e:	07 96       	adiw	r24, 0x07	; 7
    1220:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
    1224:	3f ef       	ldi	r19, 0xFF	; 255
    1226:	e3 1a       	sub	r14, r19
    1228:	f3 0a       	sbc	r15, r19
}

inline void FillSegmentUp(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i;
	
	for(i = 0; i < count; i++) {
    122a:	4f e0       	ldi	r20, 0x0F	; 15
    122c:	e4 16       	cp	r14, r20
    122e:	f1 04       	cpc	r15, r1
    1230:	89 f7       	brne	.-30     	; 0x1214 <__stack+0x915>
		APA102_SetPixel(segment, i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    1232:	89 85       	ldd	r24, Y+9	; 0x09
    1234:	9a 85       	ldd	r25, Y+10	; 0x0a
    1236:	80 34       	cpi	r24, 0x40	; 64
    1238:	91 05       	cpc	r25, r1
    123a:	c8 f0       	brcs	.+50     	; 0x126e <__stack+0x96f>
    123c:	0f 2e       	mov	r0, r31
    123e:	ff e0       	ldi	r31, 0x0F	; 15
    1240:	ff 2e       	mov	r15, r31
    1242:	f0 2d       	mov	r31, r0
    1244:	6f e0       	ldi	r22, 0x0F	; 15
    1246:	70 e0       	ldi	r23, 0x00	; 0
		APA102_SetPixel(segment, i, 0, 0, 0);
    1248:	00 e0       	ldi	r16, 0x00	; 0
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	ce 01       	movw	r24, r28
    1250:	07 96       	adiw	r24, 0x07	; 7
    1252:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    1256:	f3 94       	inc	r15
    1258:	6f 2d       	mov	r22, r15
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	89 85       	ldd	r24, Y+9	; 0x09
    125e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1260:	96 95       	lsr	r25
    1262:	87 95       	ror	r24
    1264:	96 95       	lsr	r25
    1266:	87 95       	ror	r24
    1268:	68 17       	cp	r22, r24
    126a:	79 07       	cpc	r23, r25
    126c:	68 f3       	brcs	.-38     	; 0x1248 <__stack+0x949>
		APA102_SetPixel(segment, i, 0, 0, 0);
	}
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
    126e:	cf 84       	ldd	r12, Y+15	; 0x0f
    1270:	d8 88       	ldd	r13, Y+16	; 0x10
    1272:	d6 94       	lsr	r13
    1274:	c7 94       	ror	r12
    1276:	d6 94       	lsr	r13
    1278:	c7 94       	ror	r12
    127a:	ca 94       	dec	r12
    127c:	8c 2c       	mov	r8, r12
    127e:	91 2c       	mov	r9, r1
    1280:	54 01       	movw	r10, r8
    1282:	51 e1       	ldi	r21, 0x11	; 17
    1284:	a5 1a       	sub	r10, r21
    1286:	b1 08       	sbc	r11, r1
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, last - i, r, g, b);
    1288:	64 01       	movw	r12, r8
    128a:	76 01       	movw	r14, r12
    128c:	00 e0       	ldi	r16, 0x00	; 0
    128e:	21 2f       	mov	r18, r17
    1290:	41 2f       	mov	r20, r17
    1292:	b4 01       	movw	r22, r8
    1294:	ce 01       	movw	r24, r28
    1296:	0d 96       	adiw	r24, 0x0d	; 13
    1298:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	88 1a       	sub	r8, r24
    12a0:	91 08       	sbc	r9, r1
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
	
	for(i = 0; i < count; i++) {
    12a2:	8a 14       	cp	r8, r10
    12a4:	9b 04       	cpc	r9, r11
    12a6:	89 f7       	brne	.-30     	; 0x128a <__stack+0x98b>
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    12a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12aa:	98 89       	ldd	r25, Y+16	; 0x10
    12ac:	88 34       	cpi	r24, 0x48	; 72
    12ae:	91 05       	cpc	r25, r1
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <__stack+0x9b5>
    12b2:	ab c1       	rjmp	.+854    	; 0x160a <__stack+0xd0b>
    12b4:	0f 2e       	mov	r0, r31
    12b6:	f1 e1       	ldi	r31, 0x11	; 17
    12b8:	df 2e       	mov	r13, r31
    12ba:	f0 2d       	mov	r31, r0
		APA102_SetPixel(segment, last - i, 0, 0, 0);
    12bc:	b7 01       	movw	r22, r14
    12be:	6d 19       	sub	r22, r13
    12c0:	71 09       	sbc	r23, r1
    12c2:	00 e0       	ldi	r16, 0x00	; 0
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	ce 01       	movw	r24, r28
    12ca:	0d 96       	adiw	r24, 0x0d	; 13
    12cc:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    12d0:	d3 94       	inc	r13
    12d2:	2d 2d       	mov	r18, r13
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d8:	98 89       	ldd	r25, Y+16	; 0x10
    12da:	96 95       	lsr	r25
    12dc:	87 95       	ror	r24
    12de:	96 95       	lsr	r25
    12e0:	87 95       	ror	r24
    12e2:	28 17       	cp	r18, r24
    12e4:	39 07       	cpc	r19, r25
    12e6:	50 f3       	brcs	.-44     	; 0x12bc <__stack+0x9bd>
    12e8:	90 c1       	rjmp	.+800    	; 0x160a <__stack+0xd0b>

inline void FillSegmentUp(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i;
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, i, r, g, b);
    12ea:	00 e0       	ldi	r16, 0x00	; 0
    12ec:	21 2f       	mov	r18, r17
    12ee:	41 2f       	mov	r20, r17
    12f0:	b7 01       	movw	r22, r14
    12f2:	ce 01       	movw	r24, r28
    12f4:	43 96       	adiw	r24, 0x13	; 19
    12f6:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
    12fa:	9f ef       	ldi	r25, 0xFF	; 255
    12fc:	e9 1a       	sub	r14, r25
    12fe:	f9 0a       	sbc	r15, r25
}

inline void FillSegmentUp(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i;
	
	for(i = 0; i < count; i++) {
    1300:	af e0       	ldi	r26, 0x0F	; 15
    1302:	ea 16       	cp	r14, r26
    1304:	f1 04       	cpc	r15, r1
    1306:	89 f7       	brne	.-30     	; 0x12ea <__stack+0x9eb>
		APA102_SetPixel(segment, i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    1308:	8d 89       	ldd	r24, Y+21	; 0x15
    130a:	9e 89       	ldd	r25, Y+22	; 0x16
    130c:	80 34       	cpi	r24, 0x40	; 64
    130e:	91 05       	cpc	r25, r1
    1310:	c8 f0       	brcs	.+50     	; 0x1344 <__stack+0xa45>
    1312:	0f 2e       	mov	r0, r31
    1314:	ff e0       	ldi	r31, 0x0F	; 15
    1316:	ff 2e       	mov	r15, r31
    1318:	f0 2d       	mov	r31, r0
    131a:	6f e0       	ldi	r22, 0x0F	; 15
    131c:	70 e0       	ldi	r23, 0x00	; 0
		APA102_SetPixel(segment, i, 0, 0, 0);
    131e:	00 e0       	ldi	r16, 0x00	; 0
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	ce 01       	movw	r24, r28
    1326:	43 96       	adiw	r24, 0x13	; 19
    1328:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    132c:	f3 94       	inc	r15
    132e:	6f 2d       	mov	r22, r15
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	8d 89       	ldd	r24, Y+21	; 0x15
    1334:	9e 89       	ldd	r25, Y+22	; 0x16
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	96 95       	lsr	r25
    133c:	87 95       	ror	r24
    133e:	68 17       	cp	r22, r24
    1340:	79 07       	cpc	r23, r25
    1342:	68 f3       	brcs	.-38     	; 0x131e <__stack+0xa1f>
		APA102_SetPixel(segment, i, 0, 0, 0);
	}
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
    1344:	cb 8c       	ldd	r12, Y+27	; 0x1b
    1346:	dc 8c       	ldd	r13, Y+28	; 0x1c
    1348:	d6 94       	lsr	r13
    134a:	c7 94       	ror	r12
    134c:	d6 94       	lsr	r13
    134e:	c7 94       	ror	r12
    1350:	ca 94       	dec	r12
    1352:	ec 2c       	mov	r14, r12
    1354:	f1 2c       	mov	r15, r1
    1356:	57 01       	movw	r10, r14
    1358:	bd e0       	ldi	r27, 0x0D	; 13
    135a:	ab 1a       	sub	r10, r27
    135c:	b1 08       	sbc	r11, r1
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, last - i, r, g, b);
    135e:	67 01       	movw	r12, r14
    1360:	46 01       	movw	r8, r12
    1362:	00 e0       	ldi	r16, 0x00	; 0
    1364:	21 2f       	mov	r18, r17
    1366:	41 2f       	mov	r20, r17
    1368:	b7 01       	movw	r22, r14
    136a:	ce 01       	movw	r24, r28
    136c:	49 96       	adiw	r24, 0x19	; 25
    136e:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
    1372:	e1 e0       	ldi	r30, 0x01	; 1
    1374:	ee 1a       	sub	r14, r30
    1376:	f1 08       	sbc	r15, r1
}

inline void FillSegmentDown(APA102_Segment *segment, uint8_t count, uint8_t r, uint8_t g, uint8_t b) {
	uint8_t i, last = segment->size/4 - 1;
	
	for(i = 0; i < count; i++) {
    1378:	ea 14       	cp	r14, r10
    137a:	fb 04       	cpc	r15, r11
    137c:	89 f7       	brne	.-30     	; 0x1360 <__stack+0xa61>
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    137e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1380:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1382:	c8 97       	sbiw	r24, 0x38	; 56
    1384:	d0 f0       	brcs	.+52     	; 0x13ba <__stack+0xabb>
    1386:	0f 2e       	mov	r0, r31
    1388:	fd e0       	ldi	r31, 0x0D	; 13
    138a:	ff 2e       	mov	r15, r31
    138c:	f0 2d       	mov	r31, r0
		APA102_SetPixel(segment, last - i, 0, 0, 0);
    138e:	b4 01       	movw	r22, r8
    1390:	6f 19       	sub	r22, r15
    1392:	71 09       	sbc	r23, r1
    1394:	00 e0       	ldi	r16, 0x00	; 0
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	ce 01       	movw	r24, r28
    139c:	49 96       	adiw	r24, 0x19	; 25
    139e:	0e 94 20 01 	call	0x240	; 0x240 <APA102_SetPixel>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    13a2:	f3 94       	inc	r15
    13a4:	2f 2d       	mov	r18, r15
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ac:	96 95       	lsr	r25
    13ae:	87 95       	ror	r24
    13b0:	96 95       	lsr	r25
    13b2:	87 95       	ror	r24
    13b4:	28 17       	cp	r18, r24
    13b6:	39 07       	cpc	r19, r25
    13b8:	50 f3       	brcs	.-44     	; 0x138e <__stack+0xa8f>
				FillSegmentUp(&(spectrum[1]), 15, brightness, brightness, 0);
				FillSegmentDown(&(spectrum[2]), 17, brightness, brightness, 0);
				FillSegmentUp(&(spectrum[3]), 15, brightness, brightness, 0);
				FillSegmentDown(&(spectrum[4]), 13, brightness, brightness, 0);
			
				APA102_SetAll(&leftArm, brightness << 1, 0, 0);
    13ba:	01 2f       	mov	r16, r17
    13bc:	00 0f       	add	r16, r16
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	60 2f       	mov	r22, r16
    13c4:	ce 01       	movw	r24, r28
    13c6:	4f 96       	adiw	r24, 0x1f	; 31
    13c8:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
				APA102_SetAll(&rightArm, brightness << 1, 0, 0);
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	60 2f       	mov	r22, r16
    13d2:	ce 01       	movw	r24, r28
    13d4:	85 96       	adiw	r24, 0x25	; 37
    13d6:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
				APA102_SetAll(&leftLeg, brightness, brightness, 0);
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	41 2f       	mov	r20, r17
    13de:	61 2f       	mov	r22, r17
    13e0:	ce 01       	movw	r24, r28
    13e2:	c1 96       	adiw	r24, 0x31	; 49
    13e4:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
				APA102_SetAll(&rightLeg, brightness, brightness, 0);
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	41 2f       	mov	r20, r17
    13ec:	61 2f       	mov	r22, r17
    13ee:	ce 01       	movw	r24, r28
    13f0:	8b 96       	adiw	r24, 0x2b	; 43
    13f2:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
    13f6:	de c0       	rjmp	.+444    	; 0x15b4 <__stack+0xcb5>
				
				
			}
			else if(mode > 3) {
    13f8:	c6 57       	subi	r28, 0x76	; 118
    13fa:	df 4f       	sbci	r29, 0xFF	; 255
    13fc:	f8 81       	ld	r31, Y
    13fe:	ca 58       	subi	r28, 0x8A	; 138
    1400:	d0 40       	sbci	r29, 0x00	; 0
    1402:	f4 30       	cpi	r31, 0x04	; 4
    1404:	08 f4       	brcc	.+2      	; 0x1408 <__stack+0xb09>
    1406:	98 c0       	rjmp	.+304    	; 0x1538 <__stack+0xc39>
				if(lastMode != mode) {
    1408:	cd 56       	subi	r28, 0x6D	; 109
    140a:	df 4f       	sbci	r29, 0xFF	; 255
    140c:	28 81       	ld	r18, Y
    140e:	39 81       	ldd	r19, Y+1	; 0x01
    1410:	c3 59       	subi	r28, 0x93	; 147
    1412:	d0 40       	sbci	r29, 0x00	; 0
    1414:	22 15       	cp	r18, r2
    1416:	33 05       	cpc	r19, r3
    1418:	09 f0       	breq	.+2      	; 0x141c <__stack+0xb1d>
    141a:	fa c0       	rjmp	.+500    	; 0x1610 <__stack+0xd11>
					letterPtr = 0;
					letterTime = 0;//Util_GetMillis();;
				}
				
				if(Util_GetMillis() >= (letterTime)) {
    141c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <Util_GetMillis>
    1420:	c7 56       	subi	r28, 0x67	; 103
    1422:	df 4f       	sbci	r29, 0xFF	; 255
    1424:	28 81       	ld	r18, Y
    1426:	39 81       	ldd	r19, Y+1	; 0x01
    1428:	4a 81       	ldd	r20, Y+2	; 0x02
    142a:	5b 81       	ldd	r21, Y+3	; 0x03
    142c:	c9 59       	subi	r28, 0x99	; 153
    142e:	d0 40       	sbci	r29, 0x00	; 0
    1430:	62 17       	cp	r22, r18
    1432:	73 07       	cpc	r23, r19
    1434:	84 07       	cpc	r24, r20
    1436:	95 07       	cpc	r25, r21
    1438:	08 f4       	brcc	.+2      	; 0x143c <__stack+0xb3d>
    143a:	bc c0       	rjmp	.+376    	; 0x15b4 <__stack+0xcb5>
					letterTime = Util_GetMillis() + 500;
    143c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <Util_GetMillis>
    1440:	9b 01       	movw	r18, r22
    1442:	ac 01       	movw	r20, r24
    1444:	2c 50       	subi	r18, 0x0C	; 12
    1446:	3e 4f       	sbci	r19, 0xFE	; 254
    1448:	4f 4f       	sbci	r20, 0xFF	; 255
    144a:	5f 4f       	sbci	r21, 0xFF	; 255
    144c:	c7 56       	subi	r28, 0x67	; 103
    144e:	df 4f       	sbci	r29, 0xFF	; 255
    1450:	28 83       	st	Y, r18
    1452:	39 83       	std	Y+1, r19	; 0x01
    1454:	4a 83       	std	Y+2, r20	; 0x02
    1456:	5b 83       	std	Y+3, r21	; 0x03
    1458:	c9 59       	subi	r28, 0x99	; 153
    145a:	d0 40       	sbci	r29, 0x00	; 0
				
					uint16_t *letter;
					uint8_t brightness;
					
					if(mode == 4)
    145c:	c6 57       	subi	r28, 0x76	; 118
    145e:	df 4f       	sbci	r29, 0xFF	; 255
    1460:	38 81       	ld	r19, Y
    1462:	ca 58       	subi	r28, 0x8A	; 138
    1464:	d0 40       	sbci	r29, 0x00	; 0
    1466:	34 30       	cpi	r19, 0x04	; 4
    1468:	11 f4       	brne	.+4      	; 0x146e <__stack+0xb6f>
						brightness = 32;
    146a:	10 e2       	ldi	r17, 0x20	; 32
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <__stack+0xb71>
					else
						brightness = 127;
    146e:	1f e7       	ldi	r17, 0x7F	; 127
					
					if(letterPtr == 0)
    1470:	c9 56       	subi	r28, 0x69	; 105
    1472:	df 4f       	sbci	r29, 0xFF	; 255
    1474:	48 81       	ld	r20, Y
    1476:	59 81       	ldd	r21, Y+1	; 0x01
    1478:	c7 59       	subi	r28, 0x97	; 151
    147a:	d0 40       	sbci	r29, 0x00	; 0
    147c:	41 15       	cp	r20, r1
    147e:	51 05       	cpc	r21, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <__stack+0xb85>
    1482:	cf c0       	rjmp	.+414    	; 0x1622 <__stack+0xd23>
						letter = I_LED;
					else if(letterPtr == 1)
    1484:	41 30       	cpi	r20, 0x01	; 1
    1486:	51 05       	cpc	r21, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <__stack+0xb8d>
    148a:	dc c0       	rjmp	.+440    	; 0x1644 <__stack+0xd45>
						letter = S_LED;
					else if(letterPtr == 2)
    148c:	42 30       	cpi	r20, 0x02	; 2
    148e:	51 05       	cpc	r21, r1
    1490:	61 f0       	breq	.+24     	; 0x14aa <__stack+0xbab>
						letter = U_LED;
					
					letterPtr++;
    1492:	4f 5f       	subi	r20, 0xFF	; 255
    1494:	5f 4f       	sbci	r21, 0xFF	; 255
    1496:	c9 56       	subi	r28, 0x69	; 105
    1498:	df 4f       	sbci	r29, 0xFF	; 255
    149a:	59 83       	std	Y+1, r21	; 0x01
    149c:	48 83       	st	Y, r20
    149e:	c7 59       	subi	r28, 0x97	; 151
    14a0:	d0 40       	sbci	r29, 0x00	; 0
					if(letterPtr >= 3)
    14a2:	43 30       	cpi	r20, 0x03	; 3
    14a4:	51 05       	cpc	r21, r1
    14a6:	8c f4       	brge	.+34     	; 0x14ca <__stack+0xbcb>
    14a8:	16 c0       	rjmp	.+44     	; 0x14d6 <__stack+0xbd7>
					if(letterPtr == 0)
						letter = I_LED;
					else if(letterPtr == 1)
						letter = S_LED;
					else if(letterPtr == 2)
						letter = U_LED;
    14aa:	e1 96       	adiw	r28, 0x31	; 49
    14ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    14ae:	e1 97       	sbiw	r28, 0x31	; 49
    14b0:	c3 56       	subi	r28, 0x63	; 99
    14b2:	df 4f       	sbci	r29, 0xFF	; 255
    14b4:	58 83       	st	Y, r21
    14b6:	cd 59       	subi	r28, 0x9D	; 157
    14b8:	d0 40       	sbci	r29, 0x00	; 0
    14ba:	e2 96       	adiw	r28, 0x32	; 50
    14bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    14be:	e2 97       	sbiw	r28, 0x32	; 50
    14c0:	c2 56       	subi	r28, 0x62	; 98
    14c2:	df 4f       	sbci	r29, 0xFF	; 255
    14c4:	88 83       	st	Y, r24
    14c6:	ce 59       	subi	r28, 0x9E	; 158
    14c8:	d0 40       	sbci	r29, 0x00	; 0
					
					letterPtr++;
					if(letterPtr >= 3)
					letterPtr = 0;
    14ca:	c9 56       	subi	r28, 0x69	; 105
    14cc:	df 4f       	sbci	r29, 0xFF	; 255
    14ce:	19 82       	std	Y+1, r1	; 0x01
    14d0:	18 82       	st	Y, r1
    14d2:	c7 59       	subi	r28, 0x97	; 151
    14d4:	d0 40       	sbci	r29, 0x00	; 0
					
					DrawLetter(letter, spectrum, brightness, brightness, 0);
    14d6:	00 e0       	ldi	r16, 0x00	; 0
    14d8:	21 2f       	mov	r18, r17
    14da:	41 2f       	mov	r20, r17
    14dc:	be 01       	movw	r22, r28
    14de:	6f 5f       	subi	r22, 0xFF	; 255
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	c3 56       	subi	r28, 0x63	; 99
    14e4:	df 4f       	sbci	r29, 0xFF	; 255
    14e6:	88 81       	ld	r24, Y
    14e8:	cd 59       	subi	r28, 0x9D	; 157
    14ea:	d0 40       	sbci	r29, 0x00	; 0
    14ec:	c2 56       	subi	r28, 0x62	; 98
    14ee:	df 4f       	sbci	r29, 0xFF	; 255
    14f0:	98 81       	ld	r25, Y
    14f2:	ce 59       	subi	r28, 0x9E	; 158
    14f4:	d0 40       	sbci	r29, 0x00	; 0
    14f6:	0e 94 96 01 	call	0x32c	; 0x32c <DrawLetter>
					
					APA102_SetAll(&leftArm, brightness << 1, 0, 0);
    14fa:	01 2f       	mov	r16, r17
    14fc:	00 0f       	add	r16, r16
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	60 2f       	mov	r22, r16
    1504:	ce 01       	movw	r24, r28
    1506:	4f 96       	adiw	r24, 0x1f	; 31
    1508:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
					APA102_SetAll(&rightArm, brightness << 1, 0, 0);
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	60 2f       	mov	r22, r16
    1512:	ce 01       	movw	r24, r28
    1514:	85 96       	adiw	r24, 0x25	; 37
    1516:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
					APA102_SetAll(&leftLeg, brightness, brightness, 0);
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	41 2f       	mov	r20, r17
    151e:	61 2f       	mov	r22, r17
    1520:	ce 01       	movw	r24, r28
    1522:	c1 96       	adiw	r24, 0x31	; 49
    1524:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
					APA102_SetAll(&rightLeg, brightness, brightness, 0);
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	41 2f       	mov	r20, r17
    152c:	61 2f       	mov	r22, r17
    152e:	ce 01       	movw	r24, r28
    1530:	8b 96       	adiw	r24, 0x2b	; 43
    1532:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
    1536:	3e c0       	rjmp	.+124    	; 0x15b4 <__stack+0xcb5>
				}
			}
			else if (mode == 0) {
    1538:	c6 57       	subi	r28, 0x76	; 118
    153a:	df 4f       	sbci	r29, 0xFF	; 255
    153c:	98 81       	ld	r25, Y
    153e:	ca 58       	subi	r28, 0x8A	; 138
    1540:	d0 40       	sbci	r29, 0x00	; 0
    1542:	91 11       	cpse	r25, r1
    1544:	37 c0       	rjmp	.+110    	; 0x15b4 <__stack+0xcb5>
    1546:	8e 01       	movw	r16, r28
    1548:	0f 5f       	subi	r16, 0xFF	; 255
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
				int i;
				for(i = 0; i < SPECTRUM_COUNT; i++) {
					APA102_SetAll(&(spectrum[i]), 0, 0, 0);
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	c8 01       	movw	r24, r16
    1554:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
    1558:	0a 5f       	subi	r16, 0xFA	; 250
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
					APA102_SetAll(&rightLeg, brightness, brightness, 0);
				}
			}
			else if (mode == 0) {
				int i;
				for(i = 0; i < SPECTRUM_COUNT; i++) {
    155c:	ac 96       	adiw	r28, 0x2c	; 44
    155e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1560:	bf ad       	ldd	r27, Y+63	; 0x3f
    1562:	ac 97       	sbiw	r28, 0x2c	; 44
    1564:	a0 17       	cp	r26, r16
    1566:	b1 07       	cpc	r27, r17
    1568:	89 f7       	brne	.-30     	; 0x154c <__stack+0xc4d>
					APA102_SetAll(&(spectrum[i]), 0, 0, 0);
				}
				APA102_SetAll(&leftArm, 0, 0, 0);
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	ce 01       	movw	r24, r28
    1572:	4f 96       	adiw	r24, 0x1f	; 31
    1574:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
				APA102_SetAll(&rightArm, 0, 0, 0);
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	ce 01       	movw	r24, r28
    1580:	85 96       	adiw	r24, 0x25	; 37
    1582:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
				APA102_SetAll(&leftLeg, 0, 0, 0);
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	ce 01       	movw	r24, r28
    158e:	c1 96       	adiw	r24, 0x31	; 49
    1590:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
				APA102_SetAll(&rightLeg, 0, 0, 0);
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	ce 01       	movw	r24, r28
    159c:	8b 96       	adiw	r24, 0x2b	; 43
    159e:	0e 94 45 01 	call	0x28a	; 0x28a <APA102_SetAll>
				
				APA102_Send(&strip);
    15a2:	ce 01       	movw	r24, r28
    15a4:	87 5b       	subi	r24, 0xB7	; 183
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	0e 94 8f 01 	call	0x31e	; 0x31e <APA102_Send>
				Util_WaitMillis(10);
    15ac:	8a e0       	ldi	r24, 0x0A	; 10
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Util_WaitMillis>
			}
			//for(i = 0; i < 10; i++)
				APA102_Send(&strip);
    15b4:	ce 01       	movw	r24, r28
    15b6:	87 5b       	subi	r24, 0xB7	; 183
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	0e 94 8f 01 	call	0x31e	; 0x31e <APA102_Send>
    15be:	cd 56       	subi	r28, 0x6D	; 109
    15c0:	df 4f       	sbci	r29, 0xFF	; 255
    15c2:	39 82       	std	Y+1, r3	; 0x01
    15c4:	28 82       	st	Y, r2
    15c6:	c3 59       	subi	r28, 0x93	; 147
    15c8:	d0 40       	sbci	r29, 0x00	; 0
    15ca:	4c c8       	rjmp	.-3944   	; 0x664 <main+0x17a>
				APA102_SetPixel(&rightLeg, 0, r / scale, g / scale, b / scale);
				APA102_SetPixel(&leftLeg, 0, r / scale, g / scale, b / scale);
			}
			APA102_Send(&strip);
		}
		if(mode != lastMode || mode == 1 || mode > 3) {
    15cc:	c6 57       	subi	r28, 0x76	; 118
    15ce:	df 4f       	sbci	r29, 0xFF	; 255
    15d0:	b8 81       	ld	r27, Y
    15d2:	ca 58       	subi	r28, 0x8A	; 138
    15d4:	d0 40       	sbci	r29, 0x00	; 0
    15d6:	2b 2e       	mov	r2, r27
    15d8:	31 2c       	mov	r3, r1
    15da:	cd 56       	subi	r28, 0x6D	; 109
    15dc:	df 4f       	sbci	r29, 0xFF	; 255
    15de:	e8 81       	ld	r30, Y
    15e0:	f9 81       	ldd	r31, Y+1	; 0x01
    15e2:	c3 59       	subi	r28, 0x93	; 147
    15e4:	d0 40       	sbci	r29, 0x00	; 0
    15e6:	2e 16       	cp	r2, r30
    15e8:	3f 06       	cpc	r3, r31
    15ea:	09 f0       	breq	.+2      	; 0x15ee <__stack+0xcef>
    15ec:	c3 cd       	rjmp	.-1146   	; 0x1174 <__stack+0x875>
    15ee:	b3 cd       	rjmp	.-1178   	; 0x1156 <__stack+0x857>
			
			
			if(mode == 2 || mode == 3) {
    15f0:	c6 57       	subi	r28, 0x76	; 118
    15f2:	df 4f       	sbci	r29, 0xFF	; 255
    15f4:	88 81       	ld	r24, Y
    15f6:	ca 58       	subi	r28, 0x8A	; 138
    15f8:	d0 40       	sbci	r29, 0x00	; 0
    15fa:	82 50       	subi	r24, 0x02	; 2
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <__stack+0xd03>
    1600:	0d cf       	rjmp	.-486    	; 0x141c <__stack+0xb1d>
    1602:	c1 cd       	rjmp	.-1150   	; 0x1186 <__stack+0x887>
	
	for(i = 0; i < count; i++) {
		APA102_SetPixel(segment, last - i, r, g, b);
	}
	
	for(i = count; i < segment->size/4; i++) {
    1604:	e1 2c       	mov	r14, r1
    1606:	f1 2c       	mov	r15, r1
    1608:	05 ce       	rjmp	.-1014   	; 0x1214 <__stack+0x915>
    160a:	e1 2c       	mov	r14, r1
    160c:	f1 2c       	mov	r15, r1
    160e:	6d ce       	rjmp	.-806    	; 0x12ea <__stack+0x9eb>
				if(lastMode != mode) {
					letterPtr = 0;
					letterTime = 0;//Util_GetMillis();;
				}
				
				if(Util_GetMillis() >= (letterTime)) {
    1610:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <Util_GetMillis>
				
				
			}
			else if(mode > 3) {
				if(lastMode != mode) {
					letterPtr = 0;
    1614:	c9 56       	subi	r28, 0x69	; 105
    1616:	df 4f       	sbci	r29, 0xFF	; 255
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	18 82       	st	Y, r1
    161c:	c7 59       	subi	r28, 0x97	; 151
    161e:	d0 40       	sbci	r29, 0x00	; 0
    1620:	0d cf       	rjmp	.-486    	; 0x143c <__stack+0xb3d>
						brightness = 32;
					else
						brightness = 127;
					
					if(letterPtr == 0)
						letter = I_LED;
    1622:	ad 96       	adiw	r28, 0x2d	; 45
    1624:	ff ad       	ldd	r31, Y+63	; 0x3f
    1626:	ad 97       	sbiw	r28, 0x2d	; 45
    1628:	c3 56       	subi	r28, 0x63	; 99
    162a:	df 4f       	sbci	r29, 0xFF	; 255
    162c:	f8 83       	st	Y, r31
    162e:	cd 59       	subi	r28, 0x9D	; 157
    1630:	d0 40       	sbci	r29, 0x00	; 0
    1632:	ae 96       	adiw	r28, 0x2e	; 46
    1634:	2f ad       	ldd	r18, Y+63	; 0x3f
    1636:	ae 97       	sbiw	r28, 0x2e	; 46
    1638:	c2 56       	subi	r28, 0x62	; 98
    163a:	df 4f       	sbci	r29, 0xFF	; 255
    163c:	28 83       	st	Y, r18
    163e:	ce 59       	subi	r28, 0x9E	; 158
    1640:	d0 40       	sbci	r29, 0x00	; 0
    1642:	10 c0       	rjmp	.+32     	; 0x1664 <__stack+0xd65>
					else if(letterPtr == 1)
						letter = S_LED;
    1644:	af 96       	adiw	r28, 0x2f	; 47
    1646:	3f ad       	ldd	r19, Y+63	; 0x3f
    1648:	af 97       	sbiw	r28, 0x2f	; 47
    164a:	c3 56       	subi	r28, 0x63	; 99
    164c:	df 4f       	sbci	r29, 0xFF	; 255
    164e:	38 83       	st	Y, r19
    1650:	cd 59       	subi	r28, 0x9D	; 157
    1652:	d0 40       	sbci	r29, 0x00	; 0
    1654:	e0 96       	adiw	r28, 0x30	; 48
    1656:	4f ad       	ldd	r20, Y+63	; 0x3f
    1658:	e0 97       	sbiw	r28, 0x30	; 48
    165a:	c2 56       	subi	r28, 0x62	; 98
    165c:	df 4f       	sbci	r29, 0xFF	; 255
    165e:	48 83       	st	Y, r20
    1660:	ce 59       	subi	r28, 0x9E	; 158
    1662:	d0 40       	sbci	r29, 0x00	; 0
					else if(letterPtr == 2)
						letter = U_LED;
					
					letterPtr++;
    1664:	c9 56       	subi	r28, 0x69	; 105
    1666:	df 4f       	sbci	r29, 0xFF	; 255
    1668:	88 81       	ld	r24, Y
    166a:	99 81       	ldd	r25, Y+1	; 0x01
    166c:	c7 59       	subi	r28, 0x97	; 151
    166e:	d0 40       	sbci	r29, 0x00	; 0
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	c9 56       	subi	r28, 0x69	; 105
    1674:	df 4f       	sbci	r29, 0xFF	; 255
    1676:	99 83       	std	Y+1, r25	; 0x01
    1678:	88 83       	st	Y, r24
    167a:	c7 59       	subi	r28, 0x97	; 151
    167c:	d0 40       	sbci	r29, 0x00	; 0
    167e:	2b cf       	rjmp	.-426    	; 0x14d6 <__stack+0xbd7>

00001680 <SPI_Init>:
 */ 
#include "SPI.h"

void SPI_Init() {
	//MOSI on PB3, SCK on PB5
	DDRB |= 0b00101100;
    1680:	84 b1       	in	r24, 0x04	; 4
    1682:	8c 62       	ori	r24, 0x2C	; 44
    1684:	84 b9       	out	0x04, r24	; 4
	
	SPCR = (1 << MSTR) | (1 << SPE);
    1686:	80 e5       	ldi	r24, 0x50	; 80
    1688:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x01;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	8d bd       	out	0x2d, r24	; 45
    168e:	08 95       	ret

00001690 <SPI_SendSewingMachineCirc>:
		
		while(!SPI_TX_DONE);
	}
}

void SPI_SendSewingMachineCirc(SPI_RawBuffer *stitchingData[], uint8_t numberOfElements) {
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
	int i = 0, j = 0;
	SPI_RawBuffer *curBuffer = (stitchingData[0]);
    169c:	dc 01       	movw	r26, r24
    169e:	ed 91       	ld	r30, X+
    16a0:	fc 91       	ld	r31, X
		while(!SPI_TX_DONE);
	}
}

void SPI_SendSewingMachineCirc(SPI_RawBuffer *stitchingData[], uint8_t numberOfElements) {
	int i = 0, j = 0;
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	c0 e0       	ldi	r28, 0x00	; 0
    16a8:	d0 e0       	ldi	r29, 0x00	; 0
		j++;
		
		if(j >= curBuffer->size) {
			i++;
			
			if(i >= numberOfElements)
    16aa:	06 2f       	mov	r16, r22
    16ac:	10 e0       	ldi	r17, 0x00	; 0
				break;
			
			curBuffer = (stitchingData[i]);
			j = 0;
    16ae:	e1 2c       	mov	r14, r1
    16b0:	f1 2c       	mov	r15, r1
	SPI_RawBuffer *curBuffer = (stitchingData[0]);
	
	//k = curBuffer->start;
	
	while(1) {
		int k = j + curBuffer->start;
    16b2:	44 81       	ldd	r20, Z+4	; 0x04
    16b4:	55 81       	ldd	r21, Z+5	; 0x05
    16b6:	42 0f       	add	r20, r18
    16b8:	53 1f       	adc	r21, r19
		if(k >= curBuffer->size)
    16ba:	62 81       	ldd	r22, Z+2	; 0x02
    16bc:	73 81       	ldd	r23, Z+3	; 0x03
    16be:	46 17       	cp	r20, r22
    16c0:	57 07       	cpc	r21, r23
    16c2:	10 f0       	brcs	.+4      	; 0x16c8 <SPI_SendSewingMachineCirc+0x38>
			k -= curBuffer->size;
    16c4:	46 1b       	sub	r20, r22
    16c6:	57 0b       	sbc	r21, r23
	SPCR = (1 << MSTR) | (1 << SPE);
	SPSR = 0x01;
}

void inline SPI_Write(uint8_t *data) {
	SPDR = *data;
    16c8:	a0 81       	ld	r26, Z
    16ca:	b1 81       	ldd	r27, Z+1	; 0x01
    16cc:	a4 0f       	add	r26, r20
    16ce:	b5 1f       	adc	r27, r21
    16d0:	4c 91       	ld	r20, X
    16d2:	4e bd       	out	0x2e, r20	; 46
		int k = j + curBuffer->start;
		if(k >= curBuffer->size)
			k -= curBuffer->size;
		
		SPI_Write(&(curBuffer->data[ k ]));
		j++;
    16d4:	2f 5f       	subi	r18, 0xFF	; 255
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
		
		if(j >= curBuffer->size) {
    16d8:	42 81       	ldd	r20, Z+2	; 0x02
    16da:	53 81       	ldd	r21, Z+3	; 0x03
    16dc:	24 17       	cp	r18, r20
    16de:	35 07       	cpc	r19, r21
    16e0:	70 f0       	brcs	.+28     	; 0x16fe <SPI_SendSewingMachineCirc+0x6e>
			i++;
    16e2:	21 96       	adiw	r28, 0x01	; 1
			
			if(i >= numberOfElements)
    16e4:	c0 17       	cp	r28, r16
    16e6:	d1 07       	cpc	r29, r17
    16e8:	74 f4       	brge	.+28     	; 0x1706 <SPI_SendSewingMachineCirc+0x76>
				break;
			
			curBuffer = (stitchingData[i]);
    16ea:	fe 01       	movw	r30, r28
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	e8 0f       	add	r30, r24
    16f2:	f9 1f       	adc	r31, r25
    16f4:	01 90       	ld	r0, Z+
    16f6:	f0 81       	ld	r31, Z
    16f8:	e0 2d       	mov	r30, r0
			j = 0;
    16fa:	2e 2d       	mov	r18, r14
    16fc:	3f 2d       	mov	r19, r15
		}
		
		
		while(!SPI_TX_DONE);
    16fe:	0d b4       	in	r0, 0x2d	; 45
    1700:	07 fe       	sbrs	r0, 7
    1702:	fd cf       	rjmp	.-6      	; 0x16fe <SPI_SendSewingMachineCirc+0x6e>
    1704:	d6 cf       	rjmp	.-84     	; 0x16b2 <SPI_SendSewingMachineCirc+0x22>
	}
}
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	08 95       	ret

00001714 <Util_Init>:
volatile uint32_t scale[5];

uint8_t ticks = 0;

void Util_Init() {
	cli();
    1714:	f8 94       	cli
	
	//Init timer0 with /64 prescaler
	//And OCR0A to fire every 1ms
	TCCR0A = 0x00;
    1716:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x03;
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;
    171c:	9a ef       	ldi	r25, 0xFA	; 250
    171e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 1 << OCIE0A;
    1720:	92 e0       	ldi	r25, 0x02	; 2
    1722:	90 93 6e 00 	sts	0x006E, r25
	
	//Init ADC to run everytime OCR0A fires
	//starting with ADC channel 0
	ADMUX = 0b01000111;
    1726:	97 e4       	ldi	r25, 0x47	; 71
    1728:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = 0b10101111;
    172c:	9f ea       	ldi	r25, 0xAF	; 175
    172e:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0b00000011;
    1732:	80 93 7b 00 	sts	0x007B, r24
	DIDR0 = 0b00111111;
    1736:	8f e3       	ldi	r24, 0x3F	; 63
    1738:	80 93 7e 00 	sts	0x007E, r24
	
	//Init port D pins to clear the peak detector
	DDRD |= 0b01111100;
    173c:	8a b1       	in	r24, 0x0a	; 10
    173e:	8c 67       	ori	r24, 0x7C	; 124
    1740:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(0b01111100);
    1742:	8b b1       	in	r24, 0x0b	; 11
    1744:	83 78       	andi	r24, 0x83	; 131
    1746:	8b b9       	out	0x0b, r24	; 11
	
	//Init calibrate button on PB0
	DDRB &= ~(0x01);
    1748:	20 98       	cbi	0x04, 0	; 4
	PORTB |= 0x01;
    174a:	28 9a       	sbi	0x05, 0	; 5
	
	//Initialize offset
	offset[0] = 0;
    174c:	10 92 54 01 	sts	0x0154, r1
    1750:	10 92 53 01 	sts	0x0153, r1
	offset[1] = 0;
    1754:	10 92 56 01 	sts	0x0156, r1
    1758:	10 92 55 01 	sts	0x0155, r1
	offset[2] = 0;
    175c:	10 92 58 01 	sts	0x0158, r1
    1760:	10 92 57 01 	sts	0x0157, r1
	offset[3] = 0;
    1764:	10 92 5a 01 	sts	0x015A, r1
    1768:	10 92 59 01 	sts	0x0159, r1
	offset[4] = 0;
    176c:	10 92 5c 01 	sts	0x015C, r1
    1770:	10 92 5b 01 	sts	0x015B, r1
	
	scale[0] = 1 << 4;
    1774:	80 e1       	ldi	r24, 0x10	; 16
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 e0       	ldi	r26, 0x00	; 0
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	80 93 5e 01 	sts	0x015E, r24
    1780:	90 93 5f 01 	sts	0x015F, r25
    1784:	a0 93 60 01 	sts	0x0160, r26
    1788:	b0 93 61 01 	sts	0x0161, r27
	scale[1] = 1 << 4;
    178c:	80 93 62 01 	sts	0x0162, r24
    1790:	90 93 63 01 	sts	0x0163, r25
    1794:	a0 93 64 01 	sts	0x0164, r26
    1798:	b0 93 65 01 	sts	0x0165, r27
	scale[2] = 1 << 4;
    179c:	80 93 66 01 	sts	0x0166, r24
    17a0:	90 93 67 01 	sts	0x0167, r25
    17a4:	a0 93 68 01 	sts	0x0168, r26
    17a8:	b0 93 69 01 	sts	0x0169, r27
	scale[3] = 1 << 4;
    17ac:	80 93 6a 01 	sts	0x016A, r24
    17b0:	90 93 6b 01 	sts	0x016B, r25
    17b4:	a0 93 6c 01 	sts	0x016C, r26
    17b8:	b0 93 6d 01 	sts	0x016D, r27
	scale[4] = 1 << 4;
    17bc:	80 93 6e 01 	sts	0x016E, r24
    17c0:	90 93 6f 01 	sts	0x016F, r25
    17c4:	a0 93 70 01 	sts	0x0170, r26
    17c8:	b0 93 71 01 	sts	0x0171, r27
	
	sei();
    17cc:	78 94       	sei
	
	ms = 0;
    17ce:	10 92 3b 01 	sts	0x013B, r1
    17d2:	10 92 3c 01 	sts	0x013C, r1
    17d6:	10 92 3d 01 	sts	0x013D, r1
    17da:	10 92 3e 01 	sts	0x013E, r1
	adcChannel = 0;
    17de:	10 92 5d 01 	sts	0x015D, r1
    17e2:	08 95       	ret

000017e4 <Util_GetMillis>:
}

unsigned long Util_GetMillis() {
	unsigned long millis;
	
	cli();
    17e4:	f8 94       	cli
	millis = ms;
    17e6:	60 91 3b 01 	lds	r22, 0x013B
    17ea:	70 91 3c 01 	lds	r23, 0x013C
    17ee:	80 91 3d 01 	lds	r24, 0x013D
    17f2:	90 91 3e 01 	lds	r25, 0x013E
	sei();
    17f6:	78 94       	sei
	
	return millis;
}
    17f8:	08 95       	ret

000017fa <Util_WaitMillis>:

void Util_WaitMillis(unsigned int millis) {
    17fa:	cf 92       	push	r12
    17fc:	df 92       	push	r13
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	7c 01       	movw	r14, r24
	unsigned long endTime = millis + Util_GetMillis();
    1804:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <Util_GetMillis>
    1808:	9b 01       	movw	r18, r22
    180a:	ac 01       	movw	r20, r24
    180c:	2e 0d       	add	r18, r14
    180e:	3f 1d       	adc	r19, r15
    1810:	41 1d       	adc	r20, r1
    1812:	51 1d       	adc	r21, r1
    1814:	69 01       	movw	r12, r18
    1816:	7a 01       	movw	r14, r20
	
	while(Util_GetMillis() < endTime);
    1818:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <Util_GetMillis>
    181c:	6c 15       	cp	r22, r12
    181e:	7d 05       	cpc	r23, r13
    1820:	8e 05       	cpc	r24, r14
    1822:	9f 05       	cpc	r25, r15
    1824:	c8 f3       	brcs	.-14     	; 0x1818 <Util_WaitMillis+0x1e>
}
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	08 95       	ret

00001830 <__vector_14>:

void inline Util_FilterSigned(int16_t *val, int16_t newVal, uint16_t strength) {
	*val = (*val) * strength / 100 + newVal * (100 - strength) / 100;
}

ISR(TIMER0_COMPA_vect) {
    1830:	1f 92       	push	r1
    1832:	0f 92       	push	r0
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	0f 92       	push	r0
    1838:	11 24       	eor	r1, r1
    183a:	8f 93       	push	r24
    183c:	9f 93       	push	r25
    183e:	af 93       	push	r26
    1840:	bf 93       	push	r27
	TCNT0 = 0;
    1842:	16 bc       	out	0x26, r1	; 38
	ms++;
    1844:	80 91 3b 01 	lds	r24, 0x013B
    1848:	90 91 3c 01 	lds	r25, 0x013C
    184c:	a0 91 3d 01 	lds	r26, 0x013D
    1850:	b0 91 3e 01 	lds	r27, 0x013E
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	a1 1d       	adc	r26, r1
    1858:	b1 1d       	adc	r27, r1
    185a:	80 93 3b 01 	sts	0x013B, r24
    185e:	90 93 3c 01 	sts	0x013C, r25
    1862:	a0 93 3d 01 	sts	0x013D, r26
    1866:	b0 93 3e 01 	sts	0x013E, r27
}
    186a:	bf 91       	pop	r27
    186c:	af 91       	pop	r26
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	0f 90       	pop	r0
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	0f 90       	pop	r0
    1878:	1f 90       	pop	r1
    187a:	18 95       	reti

0000187c <__vector_15>:

ISR(TIMER0_COMPB_vect) {
    187c:	1f 92       	push	r1
    187e:	0f 92       	push	r0
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	0f 92       	push	r0
    1884:	11 24       	eor	r1, r1
    1886:	8f 93       	push	r24
    1888:	ef 93       	push	r30
    188a:	ff 93       	push	r31
	//Release the peak detector
	PORTD &= ~(0b01111100);
    188c:	8b b1       	in	r24, 0x0b	; 11
    188e:	83 78       	andi	r24, 0x83	; 131
    1890:	8b b9       	out	0x0b, r24	; 11
	
	//Remove the interrupt
	TIMSK0 &= ~(1 << OCIE0B);
    1892:	ee e6       	ldi	r30, 0x6E	; 110
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	8b 7f       	andi	r24, 0xFB	; 251
    189a:	80 83       	st	Z, r24
}
    189c:	ff 91       	pop	r31
    189e:	ef 91       	pop	r30
    18a0:	8f 91       	pop	r24
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti

000018ac <__vector_21>:

ISR(ADC_vect) {
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	2f 93       	push	r18
    18b8:	3f 93       	push	r19
    18ba:	4f 93       	push	r20
    18bc:	5f 93       	push	r21
    18be:	6f 93       	push	r22
    18c0:	7f 93       	push	r23
    18c2:	8f 93       	push	r24
    18c4:	9f 93       	push	r25
    18c6:	af 93       	push	r26
    18c8:	bf 93       	push	r27
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
	ticks++;
    18d2:	80 91 24 01 	lds	r24, 0x0124
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(ticks == 5) {
    18d8:	85 30       	cpi	r24, 0x05	; 5
    18da:	19 f0       	breq	.+6      	; 0x18e2 <__vector_21+0x36>
	//Remove the interrupt
	TIMSK0 &= ~(1 << OCIE0B);
}

ISR(ADC_vect) {
	ticks++;
    18dc:	80 93 24 01 	sts	0x0124, r24
    18e0:	fd c0       	rjmp	.+506    	; 0x1adc <__vector_21+0x230>
	
	if(ticks == 5) {
			ticks = 0;
    18e2:	10 92 24 01 	sts	0x0124, r1
		//record the adc value
		//adc[adcChannel] = (ADCL) | (ADCH << 8);
		uint16_t newValue = (ADCL) | (ADCH << 8), calibrated;
    18e6:	e0 91 78 00 	lds	r30, 0x0078
    18ea:	80 91 79 00 	lds	r24, 0x0079
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	f8 2b       	or	r31, r24
		
		//check the calibrate button
		if(~PINB & 0x01) {
    18f2:	18 99       	sbic	0x03, 0	; 3
    18f4:	3b c0       	rjmp	.+118    	; 0x196c <__vector_21+0xc0>
			Util_Filter(&(offset[adcChannel]), newValue, 0.1);
    18f6:	c0 91 5d 01 	lds	r28, 0x015D
    18fa:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(Util_GetMillis() < endTime);
}

void inline Util_Filter(uint16_t *val, uint16_t newVal, uint16_t strength) {
	*val = (*val) * strength / 100 + newVal * (100 - strength) / 100;
    18fc:	cc 0f       	add	r28, r28
    18fe:	dd 1f       	adc	r29, r29
    1900:	cd 5a       	subi	r28, 0xAD	; 173
    1902:	de 4f       	sbci	r29, 0xFE	; 254
    1904:	84 e6       	ldi	r24, 0x64	; 100
    1906:	8e 9f       	mul	r24, r30
    1908:	90 01       	movw	r18, r0
    190a:	8f 9f       	mul	r24, r31
    190c:	30 0d       	add	r19, r0
    190e:	11 24       	eor	r1, r1
    1910:	36 95       	lsr	r19
    1912:	27 95       	ror	r18
    1914:	36 95       	lsr	r19
    1916:	27 95       	ror	r18
    1918:	ab e7       	ldi	r26, 0x7B	; 123
    191a:	b4 e1       	ldi	r27, 0x14	; 20
    191c:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>
    1920:	96 95       	lsr	r25
    1922:	87 95       	ror	r24
    1924:	99 83       	std	Y+1, r25	; 0x01
    1926:	88 83       	st	Y, r24
		
		//check the calibrate button
		if(~PINB & 0x01) {
			Util_Filter(&(offset[adcChannel]), newValue, 0.1);
			
			scale[adcChannel] = ((uint32_t)1023 << 4) / (1023 - offset[adcChannel]);
    1928:	20 91 5d 01 	lds	r18, 0x015D
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	a0 91 5d 01 	lds	r26, 0x015D
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	aa 0f       	add	r26, r26
    1936:	bb 1f       	adc	r27, r27
    1938:	ad 5a       	subi	r26, 0xAD	; 173
    193a:	be 4f       	sbci	r27, 0xFE	; 254
    193c:	8d 91       	ld	r24, X+
    193e:	9c 91       	ld	r25, X
    1940:	6f ef       	ldi	r22, 0xFF	; 255
    1942:	73 e0       	ldi	r23, 0x03	; 3
    1944:	68 1b       	sub	r22, r24
    1946:	79 0b       	sbc	r23, r25
    1948:	80 ef       	ldi	r24, 0xF0	; 240
    194a:	9f e3       	ldi	r25, 0x3F	; 63
    194c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__udivmodhi4>
    1950:	cb 01       	movw	r24, r22
    1952:	a0 e0       	ldi	r26, 0x00	; 0
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e9 01       	movw	r28, r18
    1958:	cc 0f       	add	r28, r28
    195a:	dd 1f       	adc	r29, r29
    195c:	cc 0f       	add	r28, r28
    195e:	dd 1f       	adc	r29, r29
    1960:	c2 5a       	subi	r28, 0xA2	; 162
    1962:	de 4f       	sbci	r29, 0xFE	; 254
    1964:	88 83       	st	Y, r24
    1966:	99 83       	std	Y+1, r25	; 0x01
    1968:	aa 83       	std	Y+2, r26	; 0x02
    196a:	bb 83       	std	Y+3, r27	; 0x03
		}
		
		if(offset[adcChannel] >= newValue)
    196c:	a0 91 5d 01 	lds	r26, 0x015D
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	aa 0f       	add	r26, r26
    1974:	bb 1f       	adc	r27, r27
    1976:	ad 5a       	subi	r26, 0xAD	; 173
    1978:	be 4f       	sbci	r27, 0xFE	; 254
    197a:	8d 91       	ld	r24, X+
    197c:	9c 91       	ld	r25, X
    197e:	8e 17       	cp	r24, r30
    1980:	9f 07       	cpc	r25, r31
    1982:	38 f5       	brcc	.+78     	; 0x19d2 <__vector_21+0x126>
			newValue = 0;
		else {
			newValue -= offset[adcChannel];
    1984:	a0 91 5d 01 	lds	r26, 0x015D
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	aa 0f       	add	r26, r26
    198c:	bb 1f       	adc	r27, r27
    198e:	ad 5a       	subi	r26, 0xAD	; 173
    1990:	be 4f       	sbci	r27, 0xFE	; 254
    1992:	8d 91       	ld	r24, X+
    1994:	9c 91       	ld	r25, X
			newValue = ((uint32_t)newValue * scale[adcChannel]) >> 4;
    1996:	a0 91 5d 01 	lds	r26, 0x015D
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	aa 0f       	add	r26, r26
    199e:	bb 1f       	adc	r27, r27
    19a0:	aa 0f       	add	r26, r26
    19a2:	bb 1f       	adc	r27, r27
    19a4:	a2 5a       	subi	r26, 0xA2	; 162
    19a6:	be 4f       	sbci	r27, 0xFE	; 254
    19a8:	2d 91       	ld	r18, X+
    19aa:	3d 91       	ld	r19, X+
    19ac:	4d 91       	ld	r20, X+
    19ae:	5c 91       	ld	r21, X
		}
		
		if(offset[adcChannel] >= newValue)
			newValue = 0;
		else {
			newValue -= offset[adcChannel];
    19b0:	df 01       	movw	r26, r30
    19b2:	a8 1b       	sub	r26, r24
    19b4:	b9 0b       	sbc	r27, r25
			newValue = ((uint32_t)newValue * scale[adcChannel]) >> 4;
    19b6:	0e 94 22 10 	call	0x2044	; 0x2044 <__muluhisi3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	68 94       	set
    19c0:	13 f8       	bld	r1, 3
    19c2:	b6 95       	lsr	r27
    19c4:	a7 95       	ror	r26
    19c6:	97 95       	ror	r25
    19c8:	87 95       	ror	r24
    19ca:	16 94       	lsr	r1
    19cc:	d1 f7       	brne	.-12     	; 0x19c2 <__vector_21+0x116>
    19ce:	ac 01       	movw	r20, r24
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <__vector_21+0x12a>
			
			scale[adcChannel] = ((uint32_t)1023 << 4) / (1023 - offset[adcChannel]);
		}
		
		if(offset[adcChannel] >= newValue)
			newValue = 0;
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	50 e0       	ldi	r21, 0x00	; 0
		else {
			newValue -= offset[adcChannel];
			newValue = ((uint32_t)newValue * scale[adcChannel]) >> 4;
		}
	
		Util_Filter( &(adc[adcChannel]), newValue, 20);
    19d6:	e0 91 5d 01 	lds	r30, 0x015D
    19da:	f0 e0       	ldi	r31, 0x00	; 0
	
	while(Util_GetMillis() < endTime);
}

void inline Util_Filter(uint16_t *val, uint16_t newVal, uint16_t strength) {
	*val = (*val) * strength / 100 + newVal * (100 - strength) / 100;
    19dc:	ee 0f       	add	r30, r30
    19de:	ff 1f       	adc	r31, r31
    19e0:	e7 5b       	subi	r30, 0xB7	; 183
    19e2:	fe 4f       	sbci	r31, 0xFE	; 254
    19e4:	80 e5       	ldi	r24, 0x50	; 80
    19e6:	84 9f       	mul	r24, r20
    19e8:	90 01       	movw	r18, r0
    19ea:	85 9f       	mul	r24, r21
    19ec:	30 0d       	add	r19, r0
    19ee:	11 24       	eor	r1, r1
    19f0:	36 95       	lsr	r19
    19f2:	27 95       	ror	r18
    19f4:	36 95       	lsr	r19
    19f6:	27 95       	ror	r18
    19f8:	ab e7       	ldi	r26, 0x7B	; 123
    19fa:	b4 e1       	ldi	r27, 0x14	; 20
    19fc:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>
    1a00:	ec 01       	movw	r28, r24
    1a02:	d6 95       	lsr	r29
    1a04:	c7 95       	ror	r28
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	64 e1       	ldi	r22, 0x14	; 20
    1a0c:	68 9f       	mul	r22, r24
    1a0e:	90 01       	movw	r18, r0
    1a10:	69 9f       	mul	r22, r25
    1a12:	30 0d       	add	r19, r0
    1a14:	11 24       	eor	r1, r1
    1a16:	36 95       	lsr	r19
    1a18:	27 95       	ror	r18
    1a1a:	36 95       	lsr	r19
    1a1c:	27 95       	ror	r18
    1a1e:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>
    1a22:	96 95       	lsr	r25
    1a24:	87 95       	ror	r24
    1a26:	c8 0f       	add	r28, r24
    1a28:	d9 1f       	adc	r29, r25
    1a2a:	d1 83       	std	Z+1, r29	; 0x01
    1a2c:	c0 83       	st	Z, r28
			newValue -= offset[adcChannel];
			newValue = ((uint32_t)newValue * scale[adcChannel]) >> 4;
		}
	
		Util_Filter( &(adc[adcChannel]), newValue, 20);
		Util_Filter( &(derivative[adcChannel]), newValue - old[adcChannel], 0);
    1a2e:	e0 91 5d 01 	lds	r30, 0x015D
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	e1 5c       	subi	r30, 0xC1	; 193
    1a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	e0 91 5d 01 	lds	r30, 0x015D
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
	
	while(Util_GetMillis() < endTime);
}

void inline Util_Filter(uint16_t *val, uint16_t newVal, uint16_t strength) {
	*val = (*val) * strength / 100 + newVal * (100 - strength) / 100;
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	ef 5c       	subi	r30, 0xCF	; 207
    1a4c:	fe 4f       	sbci	r31, 0xFE	; 254
			newValue -= offset[adcChannel];
			newValue = ((uint32_t)newValue * scale[adcChannel]) >> 4;
		}
	
		Util_Filter( &(adc[adcChannel]), newValue, 20);
		Util_Filter( &(derivative[adcChannel]), newValue - old[adcChannel], 0);
    1a4e:	9a 01       	movw	r18, r20
    1a50:	28 1b       	sub	r18, r24
    1a52:	39 0b       	sbc	r19, r25
    1a54:	c9 01       	movw	r24, r18
	
	while(Util_GetMillis() < endTime);
}

void inline Util_Filter(uint16_t *val, uint16_t newVal, uint16_t strength) {
	*val = (*val) * strength / 100 + newVal * (100 - strength) / 100;
    1a56:	64 e6       	ldi	r22, 0x64	; 100
    1a58:	68 9f       	mul	r22, r24
    1a5a:	90 01       	movw	r18, r0
    1a5c:	69 9f       	mul	r22, r25
    1a5e:	30 0d       	add	r19, r0
    1a60:	11 24       	eor	r1, r1
    1a62:	36 95       	lsr	r19
    1a64:	27 95       	ror	r18
    1a66:	36 95       	lsr	r19
    1a68:	27 95       	ror	r18
    1a6a:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>
    1a6e:	96 95       	lsr	r25
    1a70:	87 95       	ror	r24
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	80 83       	st	Z, r24
		}
	
		Util_Filter( &(adc[adcChannel]), newValue, 20);
		Util_Filter( &(derivative[adcChannel]), newValue - old[adcChannel], 0);
	
		old[adcChannel] = newValue;
    1a76:	e0 91 5d 01 	lds	r30, 0x015D
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	ee 0f       	add	r30, r30
    1a7e:	ff 1f       	adc	r31, r31
    1a80:	e1 5c       	subi	r30, 0xC1	; 193
    1a82:	fe 4f       	sbci	r31, 0xFE	; 254
    1a84:	51 83       	std	Z+1, r21	; 0x01
    1a86:	40 83       	st	Z, r20
		
		//clear the peak detector
		PORTD |= 1 << (adcChannel + 2);
    1a88:	4b b1       	in	r20, 0x0b	; 11
    1a8a:	80 91 5d 01 	lds	r24, 0x015D
    1a8e:	8e 5f       	subi	r24, 0xFE	; 254
    1a90:	21 e0       	ldi	r18, 0x01	; 1
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	b9 01       	movw	r22, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <__vector_21+0x1f0>
    1a98:	66 0f       	add	r22, r22
    1a9a:	77 1f       	adc	r23, r23
    1a9c:	8a 95       	dec	r24
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <__vector_21+0x1ec>
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8b b9       	out	0x0b, r24	; 11
	
		//set OCR0B to release the peak detector
		OCR0B = TCNT0 + 4;	//16uS
    1aa6:	86 b5       	in	r24, 0x26	; 38
    1aa8:	8c 5f       	subi	r24, 0xFC	; 252
    1aaa:	88 bd       	out	0x28, r24	; 40
		TIMSK0 |= 1 << OCIE0B;
    1aac:	ee e6       	ldi	r30, 0x6E	; 110
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	84 60       	ori	r24, 0x04	; 4
    1ab4:	80 83       	st	Z, r24
		
		adcChannel++;
    1ab6:	80 91 5d 01 	lds	r24, 0x015D
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	80 93 5d 01 	sts	0x015D, r24
	
		if(adcChannel >= 5)
    1ac0:	80 91 5d 01 	lds	r24, 0x015D
    1ac4:	85 30       	cpi	r24, 0x05	; 5
    1ac6:	10 f0       	brcs	.+4      	; 0x1acc <__vector_21+0x220>
			adcChannel = 0;
    1ac8:	10 92 5d 01 	sts	0x015D, r1
	
		//Change the ADC channel for the next conversion
		ADMUX = (ADMUX & 0b11111000) | adcChannel;
    1acc:	ec e7       	ldi	r30, 0x7C	; 124
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	90 91 5d 01 	lds	r25, 0x015D
    1ad6:	88 7f       	andi	r24, 0xF8	; 248
    1ad8:	89 2b       	or	r24, r25
    1ada:	80 83       	st	Z, r24
	}
	
    1adc:	ff 91       	pop	r31
    1ade:	ef 91       	pop	r30
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	bf 91       	pop	r27
    1ae6:	af 91       	pop	r26
    1ae8:	9f 91       	pop	r25
    1aea:	8f 91       	pop	r24
    1aec:	7f 91       	pop	r23
    1aee:	6f 91       	pop	r22
    1af0:	5f 91       	pop	r21
    1af2:	4f 91       	pop	r20
    1af4:	3f 91       	pop	r19
    1af6:	2f 91       	pop	r18
    1af8:	0f 90       	pop	r0
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	0f 90       	pop	r0
    1afe:	1f 90       	pop	r1
    1b00:	18 95       	reti

00001b02 <__fixunssfsi>:
    1b02:	70 d0       	rcall	.+224    	; 0x1be4 <__fp_splitA>
    1b04:	88 f0       	brcs	.+34     	; 0x1b28 <__fixunssfsi+0x26>
    1b06:	9f 57       	subi	r25, 0x7F	; 127
    1b08:	90 f0       	brcs	.+36     	; 0x1b2e <__fixunssfsi+0x2c>
    1b0a:	b9 2f       	mov	r27, r25
    1b0c:	99 27       	eor	r25, r25
    1b0e:	b7 51       	subi	r27, 0x17	; 23
    1b10:	a0 f0       	brcs	.+40     	; 0x1b3a <__fixunssfsi+0x38>
    1b12:	d1 f0       	breq	.+52     	; 0x1b48 <__fixunssfsi+0x46>
    1b14:	66 0f       	add	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	1a f0       	brmi	.+6      	; 0x1b24 <__fixunssfsi+0x22>
    1b1e:	ba 95       	dec	r27
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <__fixunssfsi+0x12>
    1b22:	12 c0       	rjmp	.+36     	; 0x1b48 <__fixunssfsi+0x46>
    1b24:	b1 30       	cpi	r27, 0x01	; 1
    1b26:	81 f0       	breq	.+32     	; 0x1b48 <__fixunssfsi+0x46>
    1b28:	77 d0       	rcall	.+238    	; 0x1c18 <__fp_zero>
    1b2a:	b1 e0       	ldi	r27, 0x01	; 1
    1b2c:	08 95       	ret
    1b2e:	74 c0       	rjmp	.+232    	; 0x1c18 <__fp_zero>
    1b30:	67 2f       	mov	r22, r23
    1b32:	78 2f       	mov	r23, r24
    1b34:	88 27       	eor	r24, r24
    1b36:	b8 5f       	subi	r27, 0xF8	; 248
    1b38:	39 f0       	breq	.+14     	; 0x1b48 <__fixunssfsi+0x46>
    1b3a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b3c:	cc f3       	brlt	.-14     	; 0x1b30 <__fixunssfsi+0x2e>
    1b3e:	86 95       	lsr	r24
    1b40:	77 95       	ror	r23
    1b42:	67 95       	ror	r22
    1b44:	b3 95       	inc	r27
    1b46:	d9 f7       	brne	.-10     	; 0x1b3e <__fixunssfsi+0x3c>
    1b48:	3e f4       	brtc	.+14     	; 0x1b58 <__fixunssfsi+0x56>
    1b4a:	90 95       	com	r25
    1b4c:	80 95       	com	r24
    1b4e:	70 95       	com	r23
    1b50:	61 95       	neg	r22
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	8f 4f       	sbci	r24, 0xFF	; 255
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	08 95       	ret

00001b5a <__floatunsisf>:
    1b5a:	e8 94       	clt
    1b5c:	09 c0       	rjmp	.+18     	; 0x1b70 <__floatsisf+0x12>

00001b5e <__floatsisf>:
    1b5e:	97 fb       	bst	r25, 7
    1b60:	3e f4       	brtc	.+14     	; 0x1b70 <__floatsisf+0x12>
    1b62:	90 95       	com	r25
    1b64:	80 95       	com	r24
    1b66:	70 95       	com	r23
    1b68:	61 95       	neg	r22
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b70:	99 23       	and	r25, r25
    1b72:	a9 f0       	breq	.+42     	; 0x1b9e <__floatsisf+0x40>
    1b74:	f9 2f       	mov	r31, r25
    1b76:	96 e9       	ldi	r25, 0x96	; 150
    1b78:	bb 27       	eor	r27, r27
    1b7a:	93 95       	inc	r25
    1b7c:	f6 95       	lsr	r31
    1b7e:	87 95       	ror	r24
    1b80:	77 95       	ror	r23
    1b82:	67 95       	ror	r22
    1b84:	b7 95       	ror	r27
    1b86:	f1 11       	cpse	r31, r1
    1b88:	f8 cf       	rjmp	.-16     	; 0x1b7a <__floatsisf+0x1c>
    1b8a:	fa f4       	brpl	.+62     	; 0x1bca <__floatsisf+0x6c>
    1b8c:	bb 0f       	add	r27, r27
    1b8e:	11 f4       	brne	.+4      	; 0x1b94 <__floatsisf+0x36>
    1b90:	60 ff       	sbrs	r22, 0
    1b92:	1b c0       	rjmp	.+54     	; 0x1bca <__floatsisf+0x6c>
    1b94:	6f 5f       	subi	r22, 0xFF	; 255
    1b96:	7f 4f       	sbci	r23, 0xFF	; 255
    1b98:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9c:	16 c0       	rjmp	.+44     	; 0x1bca <__floatsisf+0x6c>
    1b9e:	88 23       	and	r24, r24
    1ba0:	11 f0       	breq	.+4      	; 0x1ba6 <__floatsisf+0x48>
    1ba2:	96 e9       	ldi	r25, 0x96	; 150
    1ba4:	11 c0       	rjmp	.+34     	; 0x1bc8 <__floatsisf+0x6a>
    1ba6:	77 23       	and	r23, r23
    1ba8:	21 f0       	breq	.+8      	; 0x1bb2 <__floatsisf+0x54>
    1baa:	9e e8       	ldi	r25, 0x8E	; 142
    1bac:	87 2f       	mov	r24, r23
    1bae:	76 2f       	mov	r23, r22
    1bb0:	05 c0       	rjmp	.+10     	; 0x1bbc <__floatsisf+0x5e>
    1bb2:	66 23       	and	r22, r22
    1bb4:	71 f0       	breq	.+28     	; 0x1bd2 <__floatsisf+0x74>
    1bb6:	96 e8       	ldi	r25, 0x86	; 134
    1bb8:	86 2f       	mov	r24, r22
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	2a f0       	brmi	.+10     	; 0x1bca <__floatsisf+0x6c>
    1bc0:	9a 95       	dec	r25
    1bc2:	66 0f       	add	r22, r22
    1bc4:	77 1f       	adc	r23, r23
    1bc6:	88 1f       	adc	r24, r24
    1bc8:	da f7       	brpl	.-10     	; 0x1bc0 <__floatsisf+0x62>
    1bca:	88 0f       	add	r24, r24
    1bcc:	96 95       	lsr	r25
    1bce:	87 95       	ror	r24
    1bd0:	97 f9       	bld	r25, 7
    1bd2:	08 95       	ret

00001bd4 <__fp_split3>:
    1bd4:	57 fd       	sbrc	r21, 7
    1bd6:	90 58       	subi	r25, 0x80	; 128
    1bd8:	44 0f       	add	r20, r20
    1bda:	55 1f       	adc	r21, r21
    1bdc:	59 f0       	breq	.+22     	; 0x1bf4 <__fp_splitA+0x10>
    1bde:	5f 3f       	cpi	r21, 0xFF	; 255
    1be0:	71 f0       	breq	.+28     	; 0x1bfe <__fp_splitA+0x1a>
    1be2:	47 95       	ror	r20

00001be4 <__fp_splitA>:
    1be4:	88 0f       	add	r24, r24
    1be6:	97 fb       	bst	r25, 7
    1be8:	99 1f       	adc	r25, r25
    1bea:	61 f0       	breq	.+24     	; 0x1c04 <__fp_splitA+0x20>
    1bec:	9f 3f       	cpi	r25, 0xFF	; 255
    1bee:	79 f0       	breq	.+30     	; 0x1c0e <__fp_splitA+0x2a>
    1bf0:	87 95       	ror	r24
    1bf2:	08 95       	ret
    1bf4:	12 16       	cp	r1, r18
    1bf6:	13 06       	cpc	r1, r19
    1bf8:	14 06       	cpc	r1, r20
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	f2 cf       	rjmp	.-28     	; 0x1be2 <__fp_split3+0xe>
    1bfe:	46 95       	lsr	r20
    1c00:	f1 df       	rcall	.-30     	; 0x1be4 <__fp_splitA>
    1c02:	08 c0       	rjmp	.+16     	; 0x1c14 <__fp_splitA+0x30>
    1c04:	16 16       	cp	r1, r22
    1c06:	17 06       	cpc	r1, r23
    1c08:	18 06       	cpc	r1, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	f1 cf       	rjmp	.-30     	; 0x1bf0 <__fp_splitA+0xc>
    1c0e:	86 95       	lsr	r24
    1c10:	71 05       	cpc	r23, r1
    1c12:	61 05       	cpc	r22, r1
    1c14:	08 94       	sec
    1c16:	08 95       	ret

00001c18 <__fp_zero>:
    1c18:	e8 94       	clt

00001c1a <__fp_szero>:
    1c1a:	bb 27       	eor	r27, r27
    1c1c:	66 27       	eor	r22, r22
    1c1e:	77 27       	eor	r23, r23
    1c20:	cb 01       	movw	r24, r22
    1c22:	97 f9       	bld	r25, 7
    1c24:	08 95       	ret

00001c26 <__gesf2>:
    1c26:	10 d1       	rcall	.+544    	; 0x1e48 <__fp_cmp>
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <__gesf2+0x6>
    1c2a:	8f ef       	ldi	r24, 0xFF	; 255
    1c2c:	08 95       	ret
    1c2e:	0e f0       	brts	.+2      	; 0x1c32 <__gesf2+0xc>
    1c30:	35 c1       	rjmp	.+618    	; 0x1e9c <__fp_mpack>
    1c32:	42 c1       	rjmp	.+644    	; 0x1eb8 <__fp_nan>
    1c34:	68 94       	set
    1c36:	2c c1       	rjmp	.+600    	; 0x1e90 <__fp_inf>

00001c38 <log>:
    1c38:	d5 df       	rcall	.-86     	; 0x1be4 <__fp_splitA>
    1c3a:	c8 f3       	brcs	.-14     	; 0x1c2e <__gesf2+0x8>
    1c3c:	99 23       	and	r25, r25
    1c3e:	d1 f3       	breq	.-12     	; 0x1c34 <__gesf2+0xe>
    1c40:	c6 f3       	brts	.-16     	; 0x1c32 <__gesf2+0xc>
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	1f 93       	push	r17
    1c48:	0f 93       	push	r16
    1c4a:	ff 92       	push	r15
    1c4c:	c9 2f       	mov	r28, r25
    1c4e:	dd 27       	eor	r29, r29
    1c50:	88 23       	and	r24, r24
    1c52:	2a f0       	brmi	.+10     	; 0x1c5e <log+0x26>
    1c54:	21 97       	sbiw	r28, 0x01	; 1
    1c56:	66 0f       	add	r22, r22
    1c58:	77 1f       	adc	r23, r23
    1c5a:	88 1f       	adc	r24, r24
    1c5c:	da f7       	brpl	.-10     	; 0x1c54 <log+0x1c>
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f eb       	ldi	r21, 0xBF	; 191
    1c66:	9f e3       	ldi	r25, 0x3F	; 63
    1c68:	88 39       	cpi	r24, 0x98	; 152
    1c6a:	20 f0       	brcs	.+8      	; 0x1c74 <log+0x3c>
    1c6c:	80 3e       	cpi	r24, 0xE0	; 224
    1c6e:	30 f0       	brcs	.+12     	; 0x1c7c <log+0x44>
    1c70:	21 96       	adiw	r28, 0x01	; 1
    1c72:	8f 77       	andi	r24, 0x7F	; 127
    1c74:	85 d0       	rcall	.+266    	; 0x1d80 <__addsf3>
    1c76:	e8 e6       	ldi	r30, 0x68	; 104
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <log+0x4a>
    1c7c:	81 d0       	rcall	.+258    	; 0x1d80 <__addsf3>
    1c7e:	e5 e9       	ldi	r30, 0x95	; 149
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	1d d1       	rcall	.+570    	; 0x1ebe <__fp_powser>
    1c84:	8b 01       	movw	r16, r22
    1c86:	be 01       	movw	r22, r28
    1c88:	ec 01       	movw	r28, r24
    1c8a:	fb 2e       	mov	r15, r27
    1c8c:	6f 57       	subi	r22, 0x7F	; 127
    1c8e:	71 09       	sbc	r23, r1
    1c90:	75 95       	asr	r23
    1c92:	77 1f       	adc	r23, r23
    1c94:	88 0b       	sbc	r24, r24
    1c96:	99 0b       	sbc	r25, r25
    1c98:	62 df       	rcall	.-316    	; 0x1b5e <__floatsisf>
    1c9a:	28 e1       	ldi	r18, 0x18	; 24
    1c9c:	32 e7       	ldi	r19, 0x72	; 114
    1c9e:	41 e3       	ldi	r20, 0x31	; 49
    1ca0:	5f e3       	ldi	r21, 0x3F	; 63
    1ca2:	16 d0       	rcall	.+44     	; 0x1cd0 <__mulsf3x>
    1ca4:	af 2d       	mov	r26, r15
    1ca6:	98 01       	movw	r18, r16
    1ca8:	ae 01       	movw	r20, r28
    1caa:	ff 90       	pop	r15
    1cac:	0f 91       	pop	r16
    1cae:	1f 91       	pop	r17
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	76 d0       	rcall	.+236    	; 0x1da2 <__addsf3x>
    1cb6:	36 c1       	rjmp	.+620    	; 0x1f24 <__fp_round>

00001cb8 <__mulsf3>:
    1cb8:	0b d0       	rcall	.+22     	; 0x1cd0 <__mulsf3x>
    1cba:	34 c1       	rjmp	.+616    	; 0x1f24 <__fp_round>
    1cbc:	25 d1       	rcall	.+586    	; 0x1f08 <__fp_pscA>
    1cbe:	28 f0       	brcs	.+10     	; 0x1cca <__mulsf3+0x12>
    1cc0:	2a d1       	rcall	.+596    	; 0x1f16 <__fp_pscB>
    1cc2:	18 f0       	brcs	.+6      	; 0x1cca <__mulsf3+0x12>
    1cc4:	95 23       	and	r25, r21
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <__mulsf3+0x12>
    1cc8:	e3 c0       	rjmp	.+454    	; 0x1e90 <__fp_inf>
    1cca:	f6 c0       	rjmp	.+492    	; 0x1eb8 <__fp_nan>
    1ccc:	11 24       	eor	r1, r1
    1cce:	a5 cf       	rjmp	.-182    	; 0x1c1a <__fp_szero>

00001cd0 <__mulsf3x>:
    1cd0:	81 df       	rcall	.-254    	; 0x1bd4 <__fp_split3>
    1cd2:	a0 f3       	brcs	.-24     	; 0x1cbc <__mulsf3+0x4>

00001cd4 <__mulsf3_pse>:
    1cd4:	95 9f       	mul	r25, r21
    1cd6:	d1 f3       	breq	.-12     	; 0x1ccc <__mulsf3+0x14>
    1cd8:	95 0f       	add	r25, r21
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	55 1f       	adc	r21, r21
    1cde:	62 9f       	mul	r22, r18
    1ce0:	f0 01       	movw	r30, r0
    1ce2:	72 9f       	mul	r23, r18
    1ce4:	bb 27       	eor	r27, r27
    1ce6:	f0 0d       	add	r31, r0
    1ce8:	b1 1d       	adc	r27, r1
    1cea:	63 9f       	mul	r22, r19
    1cec:	aa 27       	eor	r26, r26
    1cee:	f0 0d       	add	r31, r0
    1cf0:	b1 1d       	adc	r27, r1
    1cf2:	aa 1f       	adc	r26, r26
    1cf4:	64 9f       	mul	r22, r20
    1cf6:	66 27       	eor	r22, r22
    1cf8:	b0 0d       	add	r27, r0
    1cfa:	a1 1d       	adc	r26, r1
    1cfc:	66 1f       	adc	r22, r22
    1cfe:	82 9f       	mul	r24, r18
    1d00:	22 27       	eor	r18, r18
    1d02:	b0 0d       	add	r27, r0
    1d04:	a1 1d       	adc	r26, r1
    1d06:	62 1f       	adc	r22, r18
    1d08:	73 9f       	mul	r23, r19
    1d0a:	b0 0d       	add	r27, r0
    1d0c:	a1 1d       	adc	r26, r1
    1d0e:	62 1f       	adc	r22, r18
    1d10:	83 9f       	mul	r24, r19
    1d12:	a0 0d       	add	r26, r0
    1d14:	61 1d       	adc	r22, r1
    1d16:	22 1f       	adc	r18, r18
    1d18:	74 9f       	mul	r23, r20
    1d1a:	33 27       	eor	r19, r19
    1d1c:	a0 0d       	add	r26, r0
    1d1e:	61 1d       	adc	r22, r1
    1d20:	23 1f       	adc	r18, r19
    1d22:	84 9f       	mul	r24, r20
    1d24:	60 0d       	add	r22, r0
    1d26:	21 1d       	adc	r18, r1
    1d28:	82 2f       	mov	r24, r18
    1d2a:	76 2f       	mov	r23, r22
    1d2c:	6a 2f       	mov	r22, r26
    1d2e:	11 24       	eor	r1, r1
    1d30:	9f 57       	subi	r25, 0x7F	; 127
    1d32:	50 40       	sbci	r21, 0x00	; 0
    1d34:	8a f0       	brmi	.+34     	; 0x1d58 <__mulsf3_pse+0x84>
    1d36:	e1 f0       	breq	.+56     	; 0x1d70 <__mulsf3_pse+0x9c>
    1d38:	88 23       	and	r24, r24
    1d3a:	4a f0       	brmi	.+18     	; 0x1d4e <__mulsf3_pse+0x7a>
    1d3c:	ee 0f       	add	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	bb 1f       	adc	r27, r27
    1d42:	66 1f       	adc	r22, r22
    1d44:	77 1f       	adc	r23, r23
    1d46:	88 1f       	adc	r24, r24
    1d48:	91 50       	subi	r25, 0x01	; 1
    1d4a:	50 40       	sbci	r21, 0x00	; 0
    1d4c:	a9 f7       	brne	.-22     	; 0x1d38 <__mulsf3_pse+0x64>
    1d4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d50:	51 05       	cpc	r21, r1
    1d52:	70 f0       	brcs	.+28     	; 0x1d70 <__mulsf3_pse+0x9c>
    1d54:	9d c0       	rjmp	.+314    	; 0x1e90 <__fp_inf>
    1d56:	61 cf       	rjmp	.-318    	; 0x1c1a <__fp_szero>
    1d58:	5f 3f       	cpi	r21, 0xFF	; 255
    1d5a:	ec f3       	brlt	.-6      	; 0x1d56 <__mulsf3_pse+0x82>
    1d5c:	98 3e       	cpi	r25, 0xE8	; 232
    1d5e:	dc f3       	brlt	.-10     	; 0x1d56 <__mulsf3_pse+0x82>
    1d60:	86 95       	lsr	r24
    1d62:	77 95       	ror	r23
    1d64:	67 95       	ror	r22
    1d66:	b7 95       	ror	r27
    1d68:	f7 95       	ror	r31
    1d6a:	e7 95       	ror	r30
    1d6c:	9f 5f       	subi	r25, 0xFF	; 255
    1d6e:	c1 f7       	brne	.-16     	; 0x1d60 <__mulsf3_pse+0x8c>
    1d70:	fe 2b       	or	r31, r30
    1d72:	88 0f       	add	r24, r24
    1d74:	91 1d       	adc	r25, r1
    1d76:	96 95       	lsr	r25
    1d78:	87 95       	ror	r24
    1d7a:	97 f9       	bld	r25, 7
    1d7c:	08 95       	ret

00001d7e <__subsf3>:
    1d7e:	50 58       	subi	r21, 0x80	; 128

00001d80 <__addsf3>:
    1d80:	bb 27       	eor	r27, r27
    1d82:	aa 27       	eor	r26, r26
    1d84:	0e d0       	rcall	.+28     	; 0x1da2 <__addsf3x>
    1d86:	ce c0       	rjmp	.+412    	; 0x1f24 <__fp_round>
    1d88:	bf d0       	rcall	.+382    	; 0x1f08 <__fp_pscA>
    1d8a:	30 f0       	brcs	.+12     	; 0x1d98 <__addsf3+0x18>
    1d8c:	c4 d0       	rcall	.+392    	; 0x1f16 <__fp_pscB>
    1d8e:	20 f0       	brcs	.+8      	; 0x1d98 <__addsf3+0x18>
    1d90:	31 f4       	brne	.+12     	; 0x1d9e <__addsf3+0x1e>
    1d92:	9f 3f       	cpi	r25, 0xFF	; 255
    1d94:	11 f4       	brne	.+4      	; 0x1d9a <__addsf3+0x1a>
    1d96:	1e f4       	brtc	.+6      	; 0x1d9e <__addsf3+0x1e>
    1d98:	8f c0       	rjmp	.+286    	; 0x1eb8 <__fp_nan>
    1d9a:	0e f4       	brtc	.+2      	; 0x1d9e <__addsf3+0x1e>
    1d9c:	e0 95       	com	r30
    1d9e:	e7 fb       	bst	r30, 7
    1da0:	77 c0       	rjmp	.+238    	; 0x1e90 <__fp_inf>

00001da2 <__addsf3x>:
    1da2:	e9 2f       	mov	r30, r25
    1da4:	17 df       	rcall	.-466    	; 0x1bd4 <__fp_split3>
    1da6:	80 f3       	brcs	.-32     	; 0x1d88 <__addsf3+0x8>
    1da8:	ba 17       	cp	r27, r26
    1daa:	62 07       	cpc	r22, r18
    1dac:	73 07       	cpc	r23, r19
    1dae:	84 07       	cpc	r24, r20
    1db0:	95 07       	cpc	r25, r21
    1db2:	18 f0       	brcs	.+6      	; 0x1dba <__addsf3x+0x18>
    1db4:	71 f4       	brne	.+28     	; 0x1dd2 <__addsf3x+0x30>
    1db6:	9e f5       	brtc	.+102    	; 0x1e1e <__addsf3x+0x7c>
    1db8:	2f cf       	rjmp	.-418    	; 0x1c18 <__fp_zero>
    1dba:	0e f4       	brtc	.+2      	; 0x1dbe <__addsf3x+0x1c>
    1dbc:	e0 95       	com	r30
    1dbe:	0b 2e       	mov	r0, r27
    1dc0:	ba 2f       	mov	r27, r26
    1dc2:	a0 2d       	mov	r26, r0
    1dc4:	0b 01       	movw	r0, r22
    1dc6:	b9 01       	movw	r22, r18
    1dc8:	90 01       	movw	r18, r0
    1dca:	0c 01       	movw	r0, r24
    1dcc:	ca 01       	movw	r24, r20
    1dce:	a0 01       	movw	r20, r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	ff 27       	eor	r31, r31
    1dd4:	59 1b       	sub	r21, r25
    1dd6:	99 f0       	breq	.+38     	; 0x1dfe <__addsf3x+0x5c>
    1dd8:	59 3f       	cpi	r21, 0xF9	; 249
    1dda:	50 f4       	brcc	.+20     	; 0x1df0 <__addsf3x+0x4e>
    1ddc:	50 3e       	cpi	r21, 0xE0	; 224
    1dde:	68 f1       	brcs	.+90     	; 0x1e3a <__addsf3x+0x98>
    1de0:	1a 16       	cp	r1, r26
    1de2:	f0 40       	sbci	r31, 0x00	; 0
    1de4:	a2 2f       	mov	r26, r18
    1de6:	23 2f       	mov	r18, r19
    1de8:	34 2f       	mov	r19, r20
    1dea:	44 27       	eor	r20, r20
    1dec:	58 5f       	subi	r21, 0xF8	; 248
    1dee:	f3 cf       	rjmp	.-26     	; 0x1dd6 <__addsf3x+0x34>
    1df0:	46 95       	lsr	r20
    1df2:	37 95       	ror	r19
    1df4:	27 95       	ror	r18
    1df6:	a7 95       	ror	r26
    1df8:	f0 40       	sbci	r31, 0x00	; 0
    1dfa:	53 95       	inc	r21
    1dfc:	c9 f7       	brne	.-14     	; 0x1df0 <__addsf3x+0x4e>
    1dfe:	7e f4       	brtc	.+30     	; 0x1e1e <__addsf3x+0x7c>
    1e00:	1f 16       	cp	r1, r31
    1e02:	ba 0b       	sbc	r27, r26
    1e04:	62 0b       	sbc	r22, r18
    1e06:	73 0b       	sbc	r23, r19
    1e08:	84 0b       	sbc	r24, r20
    1e0a:	ba f0       	brmi	.+46     	; 0x1e3a <__addsf3x+0x98>
    1e0c:	91 50       	subi	r25, 0x01	; 1
    1e0e:	a1 f0       	breq	.+40     	; 0x1e38 <__addsf3x+0x96>
    1e10:	ff 0f       	add	r31, r31
    1e12:	bb 1f       	adc	r27, r27
    1e14:	66 1f       	adc	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	c2 f7       	brpl	.-16     	; 0x1e0c <__addsf3x+0x6a>
    1e1c:	0e c0       	rjmp	.+28     	; 0x1e3a <__addsf3x+0x98>
    1e1e:	ba 0f       	add	r27, r26
    1e20:	62 1f       	adc	r22, r18
    1e22:	73 1f       	adc	r23, r19
    1e24:	84 1f       	adc	r24, r20
    1e26:	48 f4       	brcc	.+18     	; 0x1e3a <__addsf3x+0x98>
    1e28:	87 95       	ror	r24
    1e2a:	77 95       	ror	r23
    1e2c:	67 95       	ror	r22
    1e2e:	b7 95       	ror	r27
    1e30:	f7 95       	ror	r31
    1e32:	9e 3f       	cpi	r25, 0xFE	; 254
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <__addsf3x+0x96>
    1e36:	b3 cf       	rjmp	.-154    	; 0x1d9e <__addsf3+0x1e>
    1e38:	93 95       	inc	r25
    1e3a:	88 0f       	add	r24, r24
    1e3c:	08 f0       	brcs	.+2      	; 0x1e40 <__addsf3x+0x9e>
    1e3e:	99 27       	eor	r25, r25
    1e40:	ee 0f       	add	r30, r30
    1e42:	97 95       	ror	r25
    1e44:	87 95       	ror	r24
    1e46:	08 95       	ret

00001e48 <__fp_cmp>:
    1e48:	99 0f       	add	r25, r25
    1e4a:	00 08       	sbc	r0, r0
    1e4c:	55 0f       	add	r21, r21
    1e4e:	aa 0b       	sbc	r26, r26
    1e50:	e0 e8       	ldi	r30, 0x80	; 128
    1e52:	fe ef       	ldi	r31, 0xFE	; 254
    1e54:	16 16       	cp	r1, r22
    1e56:	17 06       	cpc	r1, r23
    1e58:	e8 07       	cpc	r30, r24
    1e5a:	f9 07       	cpc	r31, r25
    1e5c:	c0 f0       	brcs	.+48     	; 0x1e8e <__fp_cmp+0x46>
    1e5e:	12 16       	cp	r1, r18
    1e60:	13 06       	cpc	r1, r19
    1e62:	e4 07       	cpc	r30, r20
    1e64:	f5 07       	cpc	r31, r21
    1e66:	98 f0       	brcs	.+38     	; 0x1e8e <__fp_cmp+0x46>
    1e68:	62 1b       	sub	r22, r18
    1e6a:	73 0b       	sbc	r23, r19
    1e6c:	84 0b       	sbc	r24, r20
    1e6e:	95 0b       	sbc	r25, r21
    1e70:	39 f4       	brne	.+14     	; 0x1e80 <__fp_cmp+0x38>
    1e72:	0a 26       	eor	r0, r26
    1e74:	61 f0       	breq	.+24     	; 0x1e8e <__fp_cmp+0x46>
    1e76:	23 2b       	or	r18, r19
    1e78:	24 2b       	or	r18, r20
    1e7a:	25 2b       	or	r18, r21
    1e7c:	21 f4       	brne	.+8      	; 0x1e86 <__fp_cmp+0x3e>
    1e7e:	08 95       	ret
    1e80:	0a 26       	eor	r0, r26
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <__fp_cmp+0x3e>
    1e84:	a1 40       	sbci	r26, 0x01	; 1
    1e86:	a6 95       	lsr	r26
    1e88:	8f ef       	ldi	r24, 0xFF	; 255
    1e8a:	81 1d       	adc	r24, r1
    1e8c:	81 1d       	adc	r24, r1
    1e8e:	08 95       	ret

00001e90 <__fp_inf>:
    1e90:	97 f9       	bld	r25, 7
    1e92:	9f 67       	ori	r25, 0x7F	; 127
    1e94:	80 e8       	ldi	r24, 0x80	; 128
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	08 95       	ret

00001e9c <__fp_mpack>:
    1e9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e9e:	31 f0       	breq	.+12     	; 0x1eac <__fp_mpack_finite+0xc>

00001ea0 <__fp_mpack_finite>:
    1ea0:	91 50       	subi	r25, 0x01	; 1
    1ea2:	20 f4       	brcc	.+8      	; 0x1eac <__fp_mpack_finite+0xc>
    1ea4:	87 95       	ror	r24
    1ea6:	77 95       	ror	r23
    1ea8:	67 95       	ror	r22
    1eaa:	b7 95       	ror	r27
    1eac:	88 0f       	add	r24, r24
    1eae:	91 1d       	adc	r25, r1
    1eb0:	96 95       	lsr	r25
    1eb2:	87 95       	ror	r24
    1eb4:	97 f9       	bld	r25, 7
    1eb6:	08 95       	ret

00001eb8 <__fp_nan>:
    1eb8:	9f ef       	ldi	r25, 0xFF	; 255
    1eba:	80 ec       	ldi	r24, 0xC0	; 192
    1ebc:	08 95       	ret

00001ebe <__fp_powser>:
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	1f 93       	push	r17
    1ec4:	0f 93       	push	r16
    1ec6:	ff 92       	push	r15
    1ec8:	ef 92       	push	r14
    1eca:	df 92       	push	r13
    1ecc:	7b 01       	movw	r14, r22
    1ece:	8c 01       	movw	r16, r24
    1ed0:	68 94       	set
    1ed2:	05 c0       	rjmp	.+10     	; 0x1ede <__fp_powser+0x20>
    1ed4:	da 2e       	mov	r13, r26
    1ed6:	ef 01       	movw	r28, r30
    1ed8:	fb de       	rcall	.-522    	; 0x1cd0 <__mulsf3x>
    1eda:	fe 01       	movw	r30, r28
    1edc:	e8 94       	clt
    1ede:	a5 91       	lpm	r26, Z+
    1ee0:	25 91       	lpm	r18, Z+
    1ee2:	35 91       	lpm	r19, Z+
    1ee4:	45 91       	lpm	r20, Z+
    1ee6:	55 91       	lpm	r21, Z+
    1ee8:	ae f3       	brts	.-22     	; 0x1ed4 <__fp_powser+0x16>
    1eea:	ef 01       	movw	r28, r30
    1eec:	5a df       	rcall	.-332    	; 0x1da2 <__addsf3x>
    1eee:	fe 01       	movw	r30, r28
    1ef0:	97 01       	movw	r18, r14
    1ef2:	a8 01       	movw	r20, r16
    1ef4:	da 94       	dec	r13
    1ef6:	79 f7       	brne	.-34     	; 0x1ed6 <__fp_powser+0x18>
    1ef8:	df 90       	pop	r13
    1efa:	ef 90       	pop	r14
    1efc:	ff 90       	pop	r15
    1efe:	0f 91       	pop	r16
    1f00:	1f 91       	pop	r17
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <__fp_pscA>:
    1f08:	00 24       	eor	r0, r0
    1f0a:	0a 94       	dec	r0
    1f0c:	16 16       	cp	r1, r22
    1f0e:	17 06       	cpc	r1, r23
    1f10:	18 06       	cpc	r1, r24
    1f12:	09 06       	cpc	r0, r25
    1f14:	08 95       	ret

00001f16 <__fp_pscB>:
    1f16:	00 24       	eor	r0, r0
    1f18:	0a 94       	dec	r0
    1f1a:	12 16       	cp	r1, r18
    1f1c:	13 06       	cpc	r1, r19
    1f1e:	14 06       	cpc	r1, r20
    1f20:	05 06       	cpc	r0, r21
    1f22:	08 95       	ret

00001f24 <__fp_round>:
    1f24:	09 2e       	mov	r0, r25
    1f26:	03 94       	inc	r0
    1f28:	00 0c       	add	r0, r0
    1f2a:	11 f4       	brne	.+4      	; 0x1f30 <__fp_round+0xc>
    1f2c:	88 23       	and	r24, r24
    1f2e:	52 f0       	brmi	.+20     	; 0x1f44 <__fp_round+0x20>
    1f30:	bb 0f       	add	r27, r27
    1f32:	40 f4       	brcc	.+16     	; 0x1f44 <__fp_round+0x20>
    1f34:	bf 2b       	or	r27, r31
    1f36:	11 f4       	brne	.+4      	; 0x1f3c <__fp_round+0x18>
    1f38:	60 ff       	sbrs	r22, 0
    1f3a:	04 c0       	rjmp	.+8      	; 0x1f44 <__fp_round+0x20>
    1f3c:	6f 5f       	subi	r22, 0xFF	; 255
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	8f 4f       	sbci	r24, 0xFF	; 255
    1f42:	9f 4f       	sbci	r25, 0xFF	; 255
    1f44:	08 95       	ret

00001f46 <__udivmodhi4>:
    1f46:	aa 1b       	sub	r26, r26
    1f48:	bb 1b       	sub	r27, r27
    1f4a:	51 e1       	ldi	r21, 0x11	; 17
    1f4c:	07 c0       	rjmp	.+14     	; 0x1f5c <__udivmodhi4_ep>

00001f4e <__udivmodhi4_loop>:
    1f4e:	aa 1f       	adc	r26, r26
    1f50:	bb 1f       	adc	r27, r27
    1f52:	a6 17       	cp	r26, r22
    1f54:	b7 07       	cpc	r27, r23
    1f56:	10 f0       	brcs	.+4      	; 0x1f5c <__udivmodhi4_ep>
    1f58:	a6 1b       	sub	r26, r22
    1f5a:	b7 0b       	sbc	r27, r23

00001f5c <__udivmodhi4_ep>:
    1f5c:	88 1f       	adc	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	5a 95       	dec	r21
    1f62:	a9 f7       	brne	.-22     	; 0x1f4e <__udivmodhi4_loop>
    1f64:	80 95       	com	r24
    1f66:	90 95       	com	r25
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	08 95       	ret

00001f6e <__divmodhi4>:
    1f6e:	97 fb       	bst	r25, 7
    1f70:	07 2e       	mov	r0, r23
    1f72:	16 f4       	brtc	.+4      	; 0x1f78 <__divmodhi4+0xa>
    1f74:	00 94       	com	r0
    1f76:	07 d0       	rcall	.+14     	; 0x1f86 <__divmodhi4_neg1>
    1f78:	77 fd       	sbrc	r23, 7
    1f7a:	09 d0       	rcall	.+18     	; 0x1f8e <__divmodhi4_neg2>
    1f7c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__udivmodhi4>
    1f80:	07 fc       	sbrc	r0, 7
    1f82:	05 d0       	rcall	.+10     	; 0x1f8e <__divmodhi4_neg2>
    1f84:	3e f4       	brtc	.+14     	; 0x1f94 <__divmodhi4_exit>

00001f86 <__divmodhi4_neg1>:
    1f86:	90 95       	com	r25
    1f88:	81 95       	neg	r24
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	08 95       	ret

00001f8e <__divmodhi4_neg2>:
    1f8e:	70 95       	com	r23
    1f90:	61 95       	neg	r22
    1f92:	7f 4f       	sbci	r23, 0xFF	; 255

00001f94 <__divmodhi4_exit>:
    1f94:	08 95       	ret

00001f96 <__udivmodsi4>:
    1f96:	a1 e2       	ldi	r26, 0x21	; 33
    1f98:	1a 2e       	mov	r1, r26
    1f9a:	aa 1b       	sub	r26, r26
    1f9c:	bb 1b       	sub	r27, r27
    1f9e:	fd 01       	movw	r30, r26
    1fa0:	0d c0       	rjmp	.+26     	; 0x1fbc <__udivmodsi4_ep>

00001fa2 <__udivmodsi4_loop>:
    1fa2:	aa 1f       	adc	r26, r26
    1fa4:	bb 1f       	adc	r27, r27
    1fa6:	ee 1f       	adc	r30, r30
    1fa8:	ff 1f       	adc	r31, r31
    1faa:	a2 17       	cp	r26, r18
    1fac:	b3 07       	cpc	r27, r19
    1fae:	e4 07       	cpc	r30, r20
    1fb0:	f5 07       	cpc	r31, r21
    1fb2:	20 f0       	brcs	.+8      	; 0x1fbc <__udivmodsi4_ep>
    1fb4:	a2 1b       	sub	r26, r18
    1fb6:	b3 0b       	sbc	r27, r19
    1fb8:	e4 0b       	sbc	r30, r20
    1fba:	f5 0b       	sbc	r31, r21

00001fbc <__udivmodsi4_ep>:
    1fbc:	66 1f       	adc	r22, r22
    1fbe:	77 1f       	adc	r23, r23
    1fc0:	88 1f       	adc	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	1a 94       	dec	r1
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <__udivmodsi4_loop>
    1fc8:	60 95       	com	r22
    1fca:	70 95       	com	r23
    1fcc:	80 95       	com	r24
    1fce:	90 95       	com	r25
    1fd0:	9b 01       	movw	r18, r22
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	bd 01       	movw	r22, r26
    1fd6:	cf 01       	movw	r24, r30
    1fd8:	08 95       	ret

00001fda <__divmodsi4>:
    1fda:	05 2e       	mov	r0, r21
    1fdc:	97 fb       	bst	r25, 7
    1fde:	1e f4       	brtc	.+6      	; 0x1fe6 <__divmodsi4+0xc>
    1fe0:	00 94       	com	r0
    1fe2:	0e 94 04 10 	call	0x2008	; 0x2008 <__negsi2>
    1fe6:	57 fd       	sbrc	r21, 7
    1fe8:	07 d0       	rcall	.+14     	; 0x1ff8 <__divmodsi4_neg2>
    1fea:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__udivmodsi4>
    1fee:	07 fc       	sbrc	r0, 7
    1ff0:	03 d0       	rcall	.+6      	; 0x1ff8 <__divmodsi4_neg2>
    1ff2:	4e f4       	brtc	.+18     	; 0x2006 <__divmodsi4_exit>
    1ff4:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__negsi2>

00001ff8 <__divmodsi4_neg2>:
    1ff8:	50 95       	com	r21
    1ffa:	40 95       	com	r20
    1ffc:	30 95       	com	r19
    1ffe:	21 95       	neg	r18
    2000:	3f 4f       	sbci	r19, 0xFF	; 255
    2002:	4f 4f       	sbci	r20, 0xFF	; 255
    2004:	5f 4f       	sbci	r21, 0xFF	; 255

00002006 <__divmodsi4_exit>:
    2006:	08 95       	ret

00002008 <__negsi2>:
    2008:	90 95       	com	r25
    200a:	80 95       	com	r24
    200c:	70 95       	com	r23
    200e:	61 95       	neg	r22
    2010:	7f 4f       	sbci	r23, 0xFF	; 255
    2012:	8f 4f       	sbci	r24, 0xFF	; 255
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	08 95       	ret

00002018 <__umulhisi3>:
    2018:	a2 9f       	mul	r26, r18
    201a:	b0 01       	movw	r22, r0
    201c:	b3 9f       	mul	r27, r19
    201e:	c0 01       	movw	r24, r0
    2020:	a3 9f       	mul	r26, r19
    2022:	70 0d       	add	r23, r0
    2024:	81 1d       	adc	r24, r1
    2026:	11 24       	eor	r1, r1
    2028:	91 1d       	adc	r25, r1
    202a:	b2 9f       	mul	r27, r18
    202c:	70 0d       	add	r23, r0
    202e:	81 1d       	adc	r24, r1
    2030:	11 24       	eor	r1, r1
    2032:	91 1d       	adc	r25, r1
    2034:	08 95       	ret

00002036 <__usmulhisi3>:
    2036:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>

0000203a <__usmulhisi3_tail>:
    203a:	b7 ff       	sbrs	r27, 7
    203c:	08 95       	ret
    203e:	82 1b       	sub	r24, r18
    2040:	93 0b       	sbc	r25, r19
    2042:	08 95       	ret

00002044 <__muluhisi3>:
    2044:	0e 94 0c 10 	call	0x2018	; 0x2018 <__umulhisi3>
    2048:	a5 9f       	mul	r26, r21
    204a:	90 0d       	add	r25, r0
    204c:	b4 9f       	mul	r27, r20
    204e:	90 0d       	add	r25, r0
    2050:	a4 9f       	mul	r26, r20
    2052:	80 0d       	add	r24, r0
    2054:	91 1d       	adc	r25, r1
    2056:	11 24       	eor	r1, r1
    2058:	08 95       	ret

0000205a <malloc>:
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	82 30       	cpi	r24, 0x02	; 2
    2060:	91 05       	cpc	r25, r1
    2062:	10 f4       	brcc	.+4      	; 0x2068 <malloc+0xe>
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	e0 91 74 01 	lds	r30, 0x0174
    206c:	f0 91 75 01 	lds	r31, 0x0175
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	a0 e0       	ldi	r26, 0x00	; 0
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	30 97       	sbiw	r30, 0x00	; 0
    207a:	39 f1       	breq	.+78     	; 0x20ca <malloc+0x70>
    207c:	40 81       	ld	r20, Z
    207e:	51 81       	ldd	r21, Z+1	; 0x01
    2080:	48 17       	cp	r20, r24
    2082:	59 07       	cpc	r21, r25
    2084:	b8 f0       	brcs	.+46     	; 0x20b4 <malloc+0x5a>
    2086:	48 17       	cp	r20, r24
    2088:	59 07       	cpc	r21, r25
    208a:	71 f4       	brne	.+28     	; 0x20a8 <malloc+0x4e>
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	10 97       	sbiw	r26, 0x00	; 0
    2092:	29 f0       	breq	.+10     	; 0x209e <malloc+0x44>
    2094:	13 96       	adiw	r26, 0x03	; 3
    2096:	9c 93       	st	X, r25
    2098:	8e 93       	st	-X, r24
    209a:	12 97       	sbiw	r26, 0x02	; 2
    209c:	2c c0       	rjmp	.+88     	; 0x20f6 <malloc+0x9c>
    209e:	90 93 75 01 	sts	0x0175, r25
    20a2:	80 93 74 01 	sts	0x0174, r24
    20a6:	27 c0       	rjmp	.+78     	; 0x20f6 <malloc+0x9c>
    20a8:	21 15       	cp	r18, r1
    20aa:	31 05       	cpc	r19, r1
    20ac:	31 f0       	breq	.+12     	; 0x20ba <malloc+0x60>
    20ae:	42 17       	cp	r20, r18
    20b0:	53 07       	cpc	r21, r19
    20b2:	18 f0       	brcs	.+6      	; 0x20ba <malloc+0x60>
    20b4:	a9 01       	movw	r20, r18
    20b6:	db 01       	movw	r26, r22
    20b8:	01 c0       	rjmp	.+2      	; 0x20bc <malloc+0x62>
    20ba:	ef 01       	movw	r28, r30
    20bc:	9a 01       	movw	r18, r20
    20be:	bd 01       	movw	r22, r26
    20c0:	df 01       	movw	r26, r30
    20c2:	02 80       	ldd	r0, Z+2	; 0x02
    20c4:	f3 81       	ldd	r31, Z+3	; 0x03
    20c6:	e0 2d       	mov	r30, r0
    20c8:	d7 cf       	rjmp	.-82     	; 0x2078 <malloc+0x1e>
    20ca:	21 15       	cp	r18, r1
    20cc:	31 05       	cpc	r19, r1
    20ce:	f9 f0       	breq	.+62     	; 0x210e <malloc+0xb4>
    20d0:	28 1b       	sub	r18, r24
    20d2:	39 0b       	sbc	r19, r25
    20d4:	24 30       	cpi	r18, 0x04	; 4
    20d6:	31 05       	cpc	r19, r1
    20d8:	80 f4       	brcc	.+32     	; 0x20fa <malloc+0xa0>
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	9b 81       	ldd	r25, Y+3	; 0x03
    20de:	61 15       	cp	r22, r1
    20e0:	71 05       	cpc	r23, r1
    20e2:	21 f0       	breq	.+8      	; 0x20ec <malloc+0x92>
    20e4:	fb 01       	movw	r30, r22
    20e6:	93 83       	std	Z+3, r25	; 0x03
    20e8:	82 83       	std	Z+2, r24	; 0x02
    20ea:	04 c0       	rjmp	.+8      	; 0x20f4 <malloc+0x9a>
    20ec:	90 93 75 01 	sts	0x0175, r25
    20f0:	80 93 74 01 	sts	0x0174, r24
    20f4:	fe 01       	movw	r30, r28
    20f6:	32 96       	adiw	r30, 0x02	; 2
    20f8:	44 c0       	rjmp	.+136    	; 0x2182 <malloc+0x128>
    20fa:	fe 01       	movw	r30, r28
    20fc:	e2 0f       	add	r30, r18
    20fe:	f3 1f       	adc	r31, r19
    2100:	81 93       	st	Z+, r24
    2102:	91 93       	st	Z+, r25
    2104:	22 50       	subi	r18, 0x02	; 2
    2106:	31 09       	sbc	r19, r1
    2108:	39 83       	std	Y+1, r19	; 0x01
    210a:	28 83       	st	Y, r18
    210c:	3a c0       	rjmp	.+116    	; 0x2182 <malloc+0x128>
    210e:	20 91 72 01 	lds	r18, 0x0172
    2112:	30 91 73 01 	lds	r19, 0x0173
    2116:	23 2b       	or	r18, r19
    2118:	41 f4       	brne	.+16     	; 0x212a <malloc+0xd0>
    211a:	20 91 02 01 	lds	r18, 0x0102
    211e:	30 91 03 01 	lds	r19, 0x0103
    2122:	30 93 73 01 	sts	0x0173, r19
    2126:	20 93 72 01 	sts	0x0172, r18
    212a:	20 91 00 01 	lds	r18, 0x0100
    212e:	30 91 01 01 	lds	r19, 0x0101
    2132:	21 15       	cp	r18, r1
    2134:	31 05       	cpc	r19, r1
    2136:	41 f4       	brne	.+16     	; 0x2148 <malloc+0xee>
    2138:	2d b7       	in	r18, 0x3d	; 61
    213a:	3e b7       	in	r19, 0x3e	; 62
    213c:	40 91 04 01 	lds	r20, 0x0104
    2140:	50 91 05 01 	lds	r21, 0x0105
    2144:	24 1b       	sub	r18, r20
    2146:	35 0b       	sbc	r19, r21
    2148:	e0 91 72 01 	lds	r30, 0x0172
    214c:	f0 91 73 01 	lds	r31, 0x0173
    2150:	e2 17       	cp	r30, r18
    2152:	f3 07       	cpc	r31, r19
    2154:	a0 f4       	brcc	.+40     	; 0x217e <malloc+0x124>
    2156:	2e 1b       	sub	r18, r30
    2158:	3f 0b       	sbc	r19, r31
    215a:	28 17       	cp	r18, r24
    215c:	39 07       	cpc	r19, r25
    215e:	78 f0       	brcs	.+30     	; 0x217e <malloc+0x124>
    2160:	ac 01       	movw	r20, r24
    2162:	4e 5f       	subi	r20, 0xFE	; 254
    2164:	5f 4f       	sbci	r21, 0xFF	; 255
    2166:	24 17       	cp	r18, r20
    2168:	35 07       	cpc	r19, r21
    216a:	48 f0       	brcs	.+18     	; 0x217e <malloc+0x124>
    216c:	4e 0f       	add	r20, r30
    216e:	5f 1f       	adc	r21, r31
    2170:	50 93 73 01 	sts	0x0173, r21
    2174:	40 93 72 01 	sts	0x0172, r20
    2178:	81 93       	st	Z+, r24
    217a:	91 93       	st	Z+, r25
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <malloc+0x128>
    217e:	e0 e0       	ldi	r30, 0x00	; 0
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	cf 01       	movw	r24, r30
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <free>:
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	09 f4       	brne	.+2      	; 0x2194 <free+0xa>
    2192:	87 c0       	rjmp	.+270    	; 0x22a2 <free+0x118>
    2194:	fc 01       	movw	r30, r24
    2196:	32 97       	sbiw	r30, 0x02	; 2
    2198:	13 82       	std	Z+3, r1	; 0x03
    219a:	12 82       	std	Z+2, r1	; 0x02
    219c:	c0 91 74 01 	lds	r28, 0x0174
    21a0:	d0 91 75 01 	lds	r29, 0x0175
    21a4:	20 97       	sbiw	r28, 0x00	; 0
    21a6:	81 f4       	brne	.+32     	; 0x21c8 <free+0x3e>
    21a8:	20 81       	ld	r18, Z
    21aa:	31 81       	ldd	r19, Z+1	; 0x01
    21ac:	28 0f       	add	r18, r24
    21ae:	39 1f       	adc	r19, r25
    21b0:	80 91 72 01 	lds	r24, 0x0172
    21b4:	90 91 73 01 	lds	r25, 0x0173
    21b8:	82 17       	cp	r24, r18
    21ba:	93 07       	cpc	r25, r19
    21bc:	79 f5       	brne	.+94     	; 0x221c <free+0x92>
    21be:	f0 93 73 01 	sts	0x0173, r31
    21c2:	e0 93 72 01 	sts	0x0172, r30
    21c6:	6d c0       	rjmp	.+218    	; 0x22a2 <free+0x118>
    21c8:	de 01       	movw	r26, r28
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	ae 17       	cp	r26, r30
    21d0:	bf 07       	cpc	r27, r31
    21d2:	50 f4       	brcc	.+20     	; 0x21e8 <free+0x5e>
    21d4:	12 96       	adiw	r26, 0x02	; 2
    21d6:	4d 91       	ld	r20, X+
    21d8:	5c 91       	ld	r21, X
    21da:	13 97       	sbiw	r26, 0x03	; 3
    21dc:	9d 01       	movw	r18, r26
    21de:	41 15       	cp	r20, r1
    21e0:	51 05       	cpc	r21, r1
    21e2:	09 f1       	breq	.+66     	; 0x2226 <free+0x9c>
    21e4:	da 01       	movw	r26, r20
    21e6:	f3 cf       	rjmp	.-26     	; 0x21ce <free+0x44>
    21e8:	b3 83       	std	Z+3, r27	; 0x03
    21ea:	a2 83       	std	Z+2, r26	; 0x02
    21ec:	40 81       	ld	r20, Z
    21ee:	51 81       	ldd	r21, Z+1	; 0x01
    21f0:	84 0f       	add	r24, r20
    21f2:	95 1f       	adc	r25, r21
    21f4:	8a 17       	cp	r24, r26
    21f6:	9b 07       	cpc	r25, r27
    21f8:	71 f4       	brne	.+28     	; 0x2216 <free+0x8c>
    21fa:	8d 91       	ld	r24, X+
    21fc:	9c 91       	ld	r25, X
    21fe:	11 97       	sbiw	r26, 0x01	; 1
    2200:	84 0f       	add	r24, r20
    2202:	95 1f       	adc	r25, r21
    2204:	02 96       	adiw	r24, 0x02	; 2
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	80 83       	st	Z, r24
    220a:	12 96       	adiw	r26, 0x02	; 2
    220c:	8d 91       	ld	r24, X+
    220e:	9c 91       	ld	r25, X
    2210:	13 97       	sbiw	r26, 0x03	; 3
    2212:	93 83       	std	Z+3, r25	; 0x03
    2214:	82 83       	std	Z+2, r24	; 0x02
    2216:	21 15       	cp	r18, r1
    2218:	31 05       	cpc	r19, r1
    221a:	29 f4       	brne	.+10     	; 0x2226 <free+0x9c>
    221c:	f0 93 75 01 	sts	0x0175, r31
    2220:	e0 93 74 01 	sts	0x0174, r30
    2224:	3e c0       	rjmp	.+124    	; 0x22a2 <free+0x118>
    2226:	d9 01       	movw	r26, r18
    2228:	13 96       	adiw	r26, 0x03	; 3
    222a:	fc 93       	st	X, r31
    222c:	ee 93       	st	-X, r30
    222e:	12 97       	sbiw	r26, 0x02	; 2
    2230:	4d 91       	ld	r20, X+
    2232:	5d 91       	ld	r21, X+
    2234:	a4 0f       	add	r26, r20
    2236:	b5 1f       	adc	r27, r21
    2238:	ea 17       	cp	r30, r26
    223a:	fb 07       	cpc	r31, r27
    223c:	79 f4       	brne	.+30     	; 0x225c <free+0xd2>
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	84 0f       	add	r24, r20
    2244:	95 1f       	adc	r25, r21
    2246:	02 96       	adiw	r24, 0x02	; 2
    2248:	d9 01       	movw	r26, r18
    224a:	11 96       	adiw	r26, 0x01	; 1
    224c:	9c 93       	st	X, r25
    224e:	8e 93       	st	-X, r24
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	13 96       	adiw	r26, 0x03	; 3
    2256:	9c 93       	st	X, r25
    2258:	8e 93       	st	-X, r24
    225a:	12 97       	sbiw	r26, 0x02	; 2
    225c:	e0 e0       	ldi	r30, 0x00	; 0
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	19 f0       	breq	.+6      	; 0x226e <free+0xe4>
    2268:	fe 01       	movw	r30, r28
    226a:	ec 01       	movw	r28, r24
    226c:	f9 cf       	rjmp	.-14     	; 0x2260 <free+0xd6>
    226e:	ce 01       	movw	r24, r28
    2270:	02 96       	adiw	r24, 0x02	; 2
    2272:	28 81       	ld	r18, Y
    2274:	39 81       	ldd	r19, Y+1	; 0x01
    2276:	82 0f       	add	r24, r18
    2278:	93 1f       	adc	r25, r19
    227a:	20 91 72 01 	lds	r18, 0x0172
    227e:	30 91 73 01 	lds	r19, 0x0173
    2282:	28 17       	cp	r18, r24
    2284:	39 07       	cpc	r19, r25
    2286:	69 f4       	brne	.+26     	; 0x22a2 <free+0x118>
    2288:	30 97       	sbiw	r30, 0x00	; 0
    228a:	29 f4       	brne	.+10     	; 0x2296 <free+0x10c>
    228c:	10 92 75 01 	sts	0x0175, r1
    2290:	10 92 74 01 	sts	0x0174, r1
    2294:	02 c0       	rjmp	.+4      	; 0x229a <free+0x110>
    2296:	13 82       	std	Z+3, r1	; 0x03
    2298:	12 82       	std	Z+2, r1	; 0x02
    229a:	d0 93 73 01 	sts	0x0173, r29
    229e:	c0 93 72 01 	sts	0x0172, r28
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <_exit>:
    22a8:	f8 94       	cli

000022aa <__stop_program>:
    22aa:	ff cf       	rjmp	.-2      	; 0x22aa <__stop_program>
